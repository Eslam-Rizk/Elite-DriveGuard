
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007868  080081a0  080081a0  000081a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800fa08  0800fa08  0000fa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb40  0800fb40  00010010  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb40  0800fb40  0000fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb48  0800fb48  00010010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb48  0800fb48  0000fb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb4c  0800fb4c  0000fb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800fb50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bd8  20000010  0800fb60  00010010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004be8  0800fb60  00014be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aba9  00000000  00000000  00010083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004075  00000000  00000000  0002ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  0002eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001109  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004df2  00000000  00000000  000313c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae71  00000000  00000000  000361b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a35b0  00000000  00000000  00051024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005bdc  00000000  00000000  000f45d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000fa1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081a0 <__do_global_dtors_aux>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4c05      	ldr	r4, [pc, #20]	; (80081b8 <__do_global_dtors_aux+0x18>)
 80081a4:	7823      	ldrb	r3, [r4, #0]
 80081a6:	b933      	cbnz	r3, 80081b6 <__do_global_dtors_aux+0x16>
 80081a8:	4b04      	ldr	r3, [pc, #16]	; (80081bc <__do_global_dtors_aux+0x1c>)
 80081aa:	b113      	cbz	r3, 80081b2 <__do_global_dtors_aux+0x12>
 80081ac:	4804      	ldr	r0, [pc, #16]	; (80081c0 <__do_global_dtors_aux+0x20>)
 80081ae:	f3af 8000 	nop.w
 80081b2:	2301      	movs	r3, #1
 80081b4:	7023      	strb	r3, [r4, #0]
 80081b6:	bd10      	pop	{r4, pc}
 80081b8:	20000010 	.word	0x20000010
 80081bc:	00000000 	.word	0x00000000
 80081c0:	0800f9f0 	.word	0x0800f9f0

080081c4 <frame_dummy>:
 80081c4:	b508      	push	{r3, lr}
 80081c6:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <frame_dummy+0x10>)
 80081c8:	b11b      	cbz	r3, 80081d2 <frame_dummy+0xe>
 80081ca:	4903      	ldr	r1, [pc, #12]	; (80081d8 <frame_dummy+0x14>)
 80081cc:	4803      	ldr	r0, [pc, #12]	; (80081dc <frame_dummy+0x18>)
 80081ce:	f3af 8000 	nop.w
 80081d2:	bd08      	pop	{r3, pc}
 80081d4:	00000000 	.word	0x00000000
 80081d8:	20000014 	.word	0x20000014
 80081dc:	0800f9f0 	.word	0x0800f9f0

080081e0 <__aeabi_drsub>:
 80081e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80081e4:	e002      	b.n	80081ec <__adddf3>
 80081e6:	bf00      	nop

080081e8 <__aeabi_dsub>:
 80081e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080081ec <__adddf3>:
 80081ec:	b530      	push	{r4, r5, lr}
 80081ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80081f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80081f6:	ea94 0f05 	teq	r4, r5
 80081fa:	bf08      	it	eq
 80081fc:	ea90 0f02 	teqeq	r0, r2
 8008200:	bf1f      	itttt	ne
 8008202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800820a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800820e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008212:	f000 80e2 	beq.w	80083da <__adddf3+0x1ee>
 8008216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800821a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800821e:	bfb8      	it	lt
 8008220:	426d      	neglt	r5, r5
 8008222:	dd0c      	ble.n	800823e <__adddf3+0x52>
 8008224:	442c      	add	r4, r5
 8008226:	ea80 0202 	eor.w	r2, r0, r2
 800822a:	ea81 0303 	eor.w	r3, r1, r3
 800822e:	ea82 0000 	eor.w	r0, r2, r0
 8008232:	ea83 0101 	eor.w	r1, r3, r1
 8008236:	ea80 0202 	eor.w	r2, r0, r2
 800823a:	ea81 0303 	eor.w	r3, r1, r3
 800823e:	2d36      	cmp	r5, #54	; 0x36
 8008240:	bf88      	it	hi
 8008242:	bd30      	pophi	{r4, r5, pc}
 8008244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800824c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008254:	d002      	beq.n	800825c <__adddf3+0x70>
 8008256:	4240      	negs	r0, r0
 8008258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800825c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008268:	d002      	beq.n	8008270 <__adddf3+0x84>
 800826a:	4252      	negs	r2, r2
 800826c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008270:	ea94 0f05 	teq	r4, r5
 8008274:	f000 80a7 	beq.w	80083c6 <__adddf3+0x1da>
 8008278:	f1a4 0401 	sub.w	r4, r4, #1
 800827c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008280:	db0d      	blt.n	800829e <__adddf3+0xb2>
 8008282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008286:	fa22 f205 	lsr.w	r2, r2, r5
 800828a:	1880      	adds	r0, r0, r2
 800828c:	f141 0100 	adc.w	r1, r1, #0
 8008290:	fa03 f20e 	lsl.w	r2, r3, lr
 8008294:	1880      	adds	r0, r0, r2
 8008296:	fa43 f305 	asr.w	r3, r3, r5
 800829a:	4159      	adcs	r1, r3
 800829c:	e00e      	b.n	80082bc <__adddf3+0xd0>
 800829e:	f1a5 0520 	sub.w	r5, r5, #32
 80082a2:	f10e 0e20 	add.w	lr, lr, #32
 80082a6:	2a01      	cmp	r2, #1
 80082a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80082ac:	bf28      	it	cs
 80082ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80082b2:	fa43 f305 	asr.w	r3, r3, r5
 80082b6:	18c0      	adds	r0, r0, r3
 80082b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80082bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80082c0:	d507      	bpl.n	80082d2 <__adddf3+0xe6>
 80082c2:	f04f 0e00 	mov.w	lr, #0
 80082c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80082ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80082ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80082d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80082d6:	d31b      	bcc.n	8008310 <__adddf3+0x124>
 80082d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80082dc:	d30c      	bcc.n	80082f8 <__adddf3+0x10c>
 80082de:	0849      	lsrs	r1, r1, #1
 80082e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80082e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80082e8:	f104 0401 	add.w	r4, r4, #1
 80082ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80082f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80082f4:	f080 809a 	bcs.w	800842c <__adddf3+0x240>
 80082f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80082fc:	bf08      	it	eq
 80082fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008302:	f150 0000 	adcs.w	r0, r0, #0
 8008306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800830a:	ea41 0105 	orr.w	r1, r1, r5
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008314:	4140      	adcs	r0, r0
 8008316:	eb41 0101 	adc.w	r1, r1, r1
 800831a:	3c01      	subs	r4, #1
 800831c:	bf28      	it	cs
 800831e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008322:	d2e9      	bcs.n	80082f8 <__adddf3+0x10c>
 8008324:	f091 0f00 	teq	r1, #0
 8008328:	bf04      	itt	eq
 800832a:	4601      	moveq	r1, r0
 800832c:	2000      	moveq	r0, #0
 800832e:	fab1 f381 	clz	r3, r1
 8008332:	bf08      	it	eq
 8008334:	3320      	addeq	r3, #32
 8008336:	f1a3 030b 	sub.w	r3, r3, #11
 800833a:	f1b3 0220 	subs.w	r2, r3, #32
 800833e:	da0c      	bge.n	800835a <__adddf3+0x16e>
 8008340:	320c      	adds	r2, #12
 8008342:	dd08      	ble.n	8008356 <__adddf3+0x16a>
 8008344:	f102 0c14 	add.w	ip, r2, #20
 8008348:	f1c2 020c 	rsb	r2, r2, #12
 800834c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008350:	fa21 f102 	lsr.w	r1, r1, r2
 8008354:	e00c      	b.n	8008370 <__adddf3+0x184>
 8008356:	f102 0214 	add.w	r2, r2, #20
 800835a:	bfd8      	it	le
 800835c:	f1c2 0c20 	rsble	ip, r2, #32
 8008360:	fa01 f102 	lsl.w	r1, r1, r2
 8008364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008368:	bfdc      	itt	le
 800836a:	ea41 010c 	orrle.w	r1, r1, ip
 800836e:	4090      	lslle	r0, r2
 8008370:	1ae4      	subs	r4, r4, r3
 8008372:	bfa2      	ittt	ge
 8008374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008378:	4329      	orrge	r1, r5
 800837a:	bd30      	popge	{r4, r5, pc}
 800837c:	ea6f 0404 	mvn.w	r4, r4
 8008380:	3c1f      	subs	r4, #31
 8008382:	da1c      	bge.n	80083be <__adddf3+0x1d2>
 8008384:	340c      	adds	r4, #12
 8008386:	dc0e      	bgt.n	80083a6 <__adddf3+0x1ba>
 8008388:	f104 0414 	add.w	r4, r4, #20
 800838c:	f1c4 0220 	rsb	r2, r4, #32
 8008390:	fa20 f004 	lsr.w	r0, r0, r4
 8008394:	fa01 f302 	lsl.w	r3, r1, r2
 8008398:	ea40 0003 	orr.w	r0, r0, r3
 800839c:	fa21 f304 	lsr.w	r3, r1, r4
 80083a0:	ea45 0103 	orr.w	r1, r5, r3
 80083a4:	bd30      	pop	{r4, r5, pc}
 80083a6:	f1c4 040c 	rsb	r4, r4, #12
 80083aa:	f1c4 0220 	rsb	r2, r4, #32
 80083ae:	fa20 f002 	lsr.w	r0, r0, r2
 80083b2:	fa01 f304 	lsl.w	r3, r1, r4
 80083b6:	ea40 0003 	orr.w	r0, r0, r3
 80083ba:	4629      	mov	r1, r5
 80083bc:	bd30      	pop	{r4, r5, pc}
 80083be:	fa21 f004 	lsr.w	r0, r1, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	bd30      	pop	{r4, r5, pc}
 80083c6:	f094 0f00 	teq	r4, #0
 80083ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80083ce:	bf06      	itte	eq
 80083d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80083d4:	3401      	addeq	r4, #1
 80083d6:	3d01      	subne	r5, #1
 80083d8:	e74e      	b.n	8008278 <__adddf3+0x8c>
 80083da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083de:	bf18      	it	ne
 80083e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083e4:	d029      	beq.n	800843a <__adddf3+0x24e>
 80083e6:	ea94 0f05 	teq	r4, r5
 80083ea:	bf08      	it	eq
 80083ec:	ea90 0f02 	teqeq	r0, r2
 80083f0:	d005      	beq.n	80083fe <__adddf3+0x212>
 80083f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80083f6:	bf04      	itt	eq
 80083f8:	4619      	moveq	r1, r3
 80083fa:	4610      	moveq	r0, r2
 80083fc:	bd30      	pop	{r4, r5, pc}
 80083fe:	ea91 0f03 	teq	r1, r3
 8008402:	bf1e      	ittt	ne
 8008404:	2100      	movne	r1, #0
 8008406:	2000      	movne	r0, #0
 8008408:	bd30      	popne	{r4, r5, pc}
 800840a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800840e:	d105      	bne.n	800841c <__adddf3+0x230>
 8008410:	0040      	lsls	r0, r0, #1
 8008412:	4149      	adcs	r1, r1
 8008414:	bf28      	it	cs
 8008416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800841a:	bd30      	pop	{r4, r5, pc}
 800841c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008420:	bf3c      	itt	cc
 8008422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008426:	bd30      	popcc	{r4, r5, pc}
 8008428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800842c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	bd30      	pop	{r4, r5, pc}
 800843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800843e:	bf1a      	itte	ne
 8008440:	4619      	movne	r1, r3
 8008442:	4610      	movne	r0, r2
 8008444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008448:	bf1c      	itt	ne
 800844a:	460b      	movne	r3, r1
 800844c:	4602      	movne	r2, r0
 800844e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008452:	bf06      	itte	eq
 8008454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008458:	ea91 0f03 	teqeq	r1, r3
 800845c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008460:	bd30      	pop	{r4, r5, pc}
 8008462:	bf00      	nop

08008464 <__aeabi_ui2d>:
 8008464:	f090 0f00 	teq	r0, #0
 8008468:	bf04      	itt	eq
 800846a:	2100      	moveq	r1, #0
 800846c:	4770      	bxeq	lr
 800846e:	b530      	push	{r4, r5, lr}
 8008470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008478:	f04f 0500 	mov.w	r5, #0
 800847c:	f04f 0100 	mov.w	r1, #0
 8008480:	e750      	b.n	8008324 <__adddf3+0x138>
 8008482:	bf00      	nop

08008484 <__aeabi_i2d>:
 8008484:	f090 0f00 	teq	r0, #0
 8008488:	bf04      	itt	eq
 800848a:	2100      	moveq	r1, #0
 800848c:	4770      	bxeq	lr
 800848e:	b530      	push	{r4, r5, lr}
 8008490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800849c:	bf48      	it	mi
 800849e:	4240      	negmi	r0, r0
 80084a0:	f04f 0100 	mov.w	r1, #0
 80084a4:	e73e      	b.n	8008324 <__adddf3+0x138>
 80084a6:	bf00      	nop

080084a8 <__aeabi_f2d>:
 80084a8:	0042      	lsls	r2, r0, #1
 80084aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80084ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80084b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80084b6:	bf1f      	itttt	ne
 80084b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80084bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80084c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80084c4:	4770      	bxne	lr
 80084c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80084ca:	bf08      	it	eq
 80084cc:	4770      	bxeq	lr
 80084ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80084d2:	bf04      	itt	eq
 80084d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80084d8:	4770      	bxeq	lr
 80084da:	b530      	push	{r4, r5, lr}
 80084dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80084e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084e8:	e71c      	b.n	8008324 <__adddf3+0x138>
 80084ea:	bf00      	nop

080084ec <__aeabi_ul2d>:
 80084ec:	ea50 0201 	orrs.w	r2, r0, r1
 80084f0:	bf08      	it	eq
 80084f2:	4770      	bxeq	lr
 80084f4:	b530      	push	{r4, r5, lr}
 80084f6:	f04f 0500 	mov.w	r5, #0
 80084fa:	e00a      	b.n	8008512 <__aeabi_l2d+0x16>

080084fc <__aeabi_l2d>:
 80084fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008500:	bf08      	it	eq
 8008502:	4770      	bxeq	lr
 8008504:	b530      	push	{r4, r5, lr}
 8008506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800850a:	d502      	bpl.n	8008512 <__aeabi_l2d+0x16>
 800850c:	4240      	negs	r0, r0
 800850e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800851a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800851e:	f43f aed8 	beq.w	80082d2 <__adddf3+0xe6>
 8008522:	f04f 0203 	mov.w	r2, #3
 8008526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800852a:	bf18      	it	ne
 800852c:	3203      	addne	r2, #3
 800852e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008532:	bf18      	it	ne
 8008534:	3203      	addne	r2, #3
 8008536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800853a:	f1c2 0320 	rsb	r3, r2, #32
 800853e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008542:	fa20 f002 	lsr.w	r0, r0, r2
 8008546:	fa01 fe03 	lsl.w	lr, r1, r3
 800854a:	ea40 000e 	orr.w	r0, r0, lr
 800854e:	fa21 f102 	lsr.w	r1, r1, r2
 8008552:	4414      	add	r4, r2
 8008554:	e6bd      	b.n	80082d2 <__adddf3+0xe6>
 8008556:	bf00      	nop

08008558 <__aeabi_dmul>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800855e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008566:	bf1d      	ittte	ne
 8008568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800856c:	ea94 0f0c 	teqne	r4, ip
 8008570:	ea95 0f0c 	teqne	r5, ip
 8008574:	f000 f8de 	bleq	8008734 <__aeabi_dmul+0x1dc>
 8008578:	442c      	add	r4, r5
 800857a:	ea81 0603 	eor.w	r6, r1, r3
 800857e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800858a:	bf18      	it	ne
 800858c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008598:	d038      	beq.n	800860c <__aeabi_dmul+0xb4>
 800859a:	fba0 ce02 	umull	ip, lr, r0, r2
 800859e:	f04f 0500 	mov.w	r5, #0
 80085a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80085a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80085aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80085ae:	f04f 0600 	mov.w	r6, #0
 80085b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80085b6:	f09c 0f00 	teq	ip, #0
 80085ba:	bf18      	it	ne
 80085bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80085c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80085c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80085c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80085cc:	d204      	bcs.n	80085d8 <__aeabi_dmul+0x80>
 80085ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80085d2:	416d      	adcs	r5, r5
 80085d4:	eb46 0606 	adc.w	r6, r6, r6
 80085d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80085dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80085e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80085e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80085e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80085ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80085f0:	bf88      	it	hi
 80085f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80085f6:	d81e      	bhi.n	8008636 <__aeabi_dmul+0xde>
 80085f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80085fc:	bf08      	it	eq
 80085fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008602:	f150 0000 	adcs.w	r0, r0, #0
 8008606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008610:	ea46 0101 	orr.w	r1, r6, r1
 8008614:	ea40 0002 	orr.w	r0, r0, r2
 8008618:	ea81 0103 	eor.w	r1, r1, r3
 800861c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008620:	bfc2      	ittt	gt
 8008622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800862a:	bd70      	popgt	{r4, r5, r6, pc}
 800862c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008630:	f04f 0e00 	mov.w	lr, #0
 8008634:	3c01      	subs	r4, #1
 8008636:	f300 80ab 	bgt.w	8008790 <__aeabi_dmul+0x238>
 800863a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800863e:	bfde      	ittt	le
 8008640:	2000      	movle	r0, #0
 8008642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008646:	bd70      	pople	{r4, r5, r6, pc}
 8008648:	f1c4 0400 	rsb	r4, r4, #0
 800864c:	3c20      	subs	r4, #32
 800864e:	da35      	bge.n	80086bc <__aeabi_dmul+0x164>
 8008650:	340c      	adds	r4, #12
 8008652:	dc1b      	bgt.n	800868c <__aeabi_dmul+0x134>
 8008654:	f104 0414 	add.w	r4, r4, #20
 8008658:	f1c4 0520 	rsb	r5, r4, #32
 800865c:	fa00 f305 	lsl.w	r3, r0, r5
 8008660:	fa20 f004 	lsr.w	r0, r0, r4
 8008664:	fa01 f205 	lsl.w	r2, r1, r5
 8008668:	ea40 0002 	orr.w	r0, r0, r2
 800866c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008678:	fa21 f604 	lsr.w	r6, r1, r4
 800867c:	eb42 0106 	adc.w	r1, r2, r6
 8008680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008684:	bf08      	it	eq
 8008686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	f1c4 040c 	rsb	r4, r4, #12
 8008690:	f1c4 0520 	rsb	r5, r4, #32
 8008694:	fa00 f304 	lsl.w	r3, r0, r4
 8008698:	fa20 f005 	lsr.w	r0, r0, r5
 800869c:	fa01 f204 	lsl.w	r2, r1, r4
 80086a0:	ea40 0002 	orr.w	r0, r0, r2
 80086a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80086ac:	f141 0100 	adc.w	r1, r1, #0
 80086b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086b4:	bf08      	it	eq
 80086b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	f1c4 0520 	rsb	r5, r4, #32
 80086c0:	fa00 f205 	lsl.w	r2, r0, r5
 80086c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80086c8:	fa20 f304 	lsr.w	r3, r0, r4
 80086cc:	fa01 f205 	lsl.w	r2, r1, r5
 80086d0:	ea43 0302 	orr.w	r3, r3, r2
 80086d4:	fa21 f004 	lsr.w	r0, r1, r4
 80086d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086dc:	fa21 f204 	lsr.w	r2, r1, r4
 80086e0:	ea20 0002 	bic.w	r0, r0, r2
 80086e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80086e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086ec:	bf08      	it	eq
 80086ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086f2:	bd70      	pop	{r4, r5, r6, pc}
 80086f4:	f094 0f00 	teq	r4, #0
 80086f8:	d10f      	bne.n	800871a <__aeabi_dmul+0x1c2>
 80086fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80086fe:	0040      	lsls	r0, r0, #1
 8008700:	eb41 0101 	adc.w	r1, r1, r1
 8008704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008708:	bf08      	it	eq
 800870a:	3c01      	subeq	r4, #1
 800870c:	d0f7      	beq.n	80086fe <__aeabi_dmul+0x1a6>
 800870e:	ea41 0106 	orr.w	r1, r1, r6
 8008712:	f095 0f00 	teq	r5, #0
 8008716:	bf18      	it	ne
 8008718:	4770      	bxne	lr
 800871a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800871e:	0052      	lsls	r2, r2, #1
 8008720:	eb43 0303 	adc.w	r3, r3, r3
 8008724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008728:	bf08      	it	eq
 800872a:	3d01      	subeq	r5, #1
 800872c:	d0f7      	beq.n	800871e <__aeabi_dmul+0x1c6>
 800872e:	ea43 0306 	orr.w	r3, r3, r6
 8008732:	4770      	bx	lr
 8008734:	ea94 0f0c 	teq	r4, ip
 8008738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800873c:	bf18      	it	ne
 800873e:	ea95 0f0c 	teqne	r5, ip
 8008742:	d00c      	beq.n	800875e <__aeabi_dmul+0x206>
 8008744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008748:	bf18      	it	ne
 800874a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800874e:	d1d1      	bne.n	80086f4 <__aeabi_dmul+0x19c>
 8008750:	ea81 0103 	eor.w	r1, r1, r3
 8008754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008762:	bf06      	itte	eq
 8008764:	4610      	moveq	r0, r2
 8008766:	4619      	moveq	r1, r3
 8008768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800876c:	d019      	beq.n	80087a2 <__aeabi_dmul+0x24a>
 800876e:	ea94 0f0c 	teq	r4, ip
 8008772:	d102      	bne.n	800877a <__aeabi_dmul+0x222>
 8008774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008778:	d113      	bne.n	80087a2 <__aeabi_dmul+0x24a>
 800877a:	ea95 0f0c 	teq	r5, ip
 800877e:	d105      	bne.n	800878c <__aeabi_dmul+0x234>
 8008780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008784:	bf1c      	itt	ne
 8008786:	4610      	movne	r0, r2
 8008788:	4619      	movne	r1, r3
 800878a:	d10a      	bne.n	80087a2 <__aeabi_dmul+0x24a>
 800878c:	ea81 0103 	eor.w	r1, r1, r3
 8008790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800879c:	f04f 0000 	mov.w	r0, #0
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80087a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80087aa:	bd70      	pop	{r4, r5, r6, pc}

080087ac <__aeabi_ddiv>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80087b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80087b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80087ba:	bf1d      	ittte	ne
 80087bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80087c0:	ea94 0f0c 	teqne	r4, ip
 80087c4:	ea95 0f0c 	teqne	r5, ip
 80087c8:	f000 f8a7 	bleq	800891a <__aeabi_ddiv+0x16e>
 80087cc:	eba4 0405 	sub.w	r4, r4, r5
 80087d0:	ea81 0e03 	eor.w	lr, r1, r3
 80087d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80087d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80087dc:	f000 8088 	beq.w	80088f0 <__aeabi_ddiv+0x144>
 80087e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80087e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80087e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80087ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80087f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80087f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80087f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80087fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008804:	429d      	cmp	r5, r3
 8008806:	bf08      	it	eq
 8008808:	4296      	cmpeq	r6, r2
 800880a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800880e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008812:	d202      	bcs.n	800881a <__aeabi_ddiv+0x6e>
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	ea4f 0232 	mov.w	r2, r2, rrx
 800881a:	1ab6      	subs	r6, r6, r2
 800881c:	eb65 0503 	sbc.w	r5, r5, r3
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	ea4f 0232 	mov.w	r2, r2, rrx
 8008826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800882a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800882e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008836:	bf22      	ittt	cs
 8008838:	1ab6      	subcs	r6, r6, r2
 800883a:	4675      	movcs	r5, lr
 800883c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	ea4f 0232 	mov.w	r2, r2, rrx
 8008846:	ebb6 0e02 	subs.w	lr, r6, r2
 800884a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800884e:	bf22      	ittt	cs
 8008850:	1ab6      	subcs	r6, r6, r2
 8008852:	4675      	movcs	r5, lr
 8008854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	ea4f 0232 	mov.w	r2, r2, rrx
 800885e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008866:	bf22      	ittt	cs
 8008868:	1ab6      	subcs	r6, r6, r2
 800886a:	4675      	movcs	r5, lr
 800886c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008870:	085b      	lsrs	r3, r3, #1
 8008872:	ea4f 0232 	mov.w	r2, r2, rrx
 8008876:	ebb6 0e02 	subs.w	lr, r6, r2
 800887a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800887e:	bf22      	ittt	cs
 8008880:	1ab6      	subcs	r6, r6, r2
 8008882:	4675      	movcs	r5, lr
 8008884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008888:	ea55 0e06 	orrs.w	lr, r5, r6
 800888c:	d018      	beq.n	80088c0 <__aeabi_ddiv+0x114>
 800888e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800889a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800889e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80088a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80088a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80088aa:	d1c0      	bne.n	800882e <__aeabi_ddiv+0x82>
 80088ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80088b0:	d10b      	bne.n	80088ca <__aeabi_ddiv+0x11e>
 80088b2:	ea41 0100 	orr.w	r1, r1, r0
 80088b6:	f04f 0000 	mov.w	r0, #0
 80088ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80088be:	e7b6      	b.n	800882e <__aeabi_ddiv+0x82>
 80088c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80088c4:	bf04      	itt	eq
 80088c6:	4301      	orreq	r1, r0
 80088c8:	2000      	moveq	r0, #0
 80088ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80088ce:	bf88      	it	hi
 80088d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80088d4:	f63f aeaf 	bhi.w	8008636 <__aeabi_dmul+0xde>
 80088d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80088dc:	bf04      	itt	eq
 80088de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80088e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80088e6:	f150 0000 	adcs.w	r0, r0, #0
 80088ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80088f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80088f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80088fc:	bfc2      	ittt	gt
 80088fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008906:	bd70      	popgt	{r4, r5, r6, pc}
 8008908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800890c:	f04f 0e00 	mov.w	lr, #0
 8008910:	3c01      	subs	r4, #1
 8008912:	e690      	b.n	8008636 <__aeabi_dmul+0xde>
 8008914:	ea45 0e06 	orr.w	lr, r5, r6
 8008918:	e68d      	b.n	8008636 <__aeabi_dmul+0xde>
 800891a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800891e:	ea94 0f0c 	teq	r4, ip
 8008922:	bf08      	it	eq
 8008924:	ea95 0f0c 	teqeq	r5, ip
 8008928:	f43f af3b 	beq.w	80087a2 <__aeabi_dmul+0x24a>
 800892c:	ea94 0f0c 	teq	r4, ip
 8008930:	d10a      	bne.n	8008948 <__aeabi_ddiv+0x19c>
 8008932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008936:	f47f af34 	bne.w	80087a2 <__aeabi_dmul+0x24a>
 800893a:	ea95 0f0c 	teq	r5, ip
 800893e:	f47f af25 	bne.w	800878c <__aeabi_dmul+0x234>
 8008942:	4610      	mov	r0, r2
 8008944:	4619      	mov	r1, r3
 8008946:	e72c      	b.n	80087a2 <__aeabi_dmul+0x24a>
 8008948:	ea95 0f0c 	teq	r5, ip
 800894c:	d106      	bne.n	800895c <__aeabi_ddiv+0x1b0>
 800894e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008952:	f43f aefd 	beq.w	8008750 <__aeabi_dmul+0x1f8>
 8008956:	4610      	mov	r0, r2
 8008958:	4619      	mov	r1, r3
 800895a:	e722      	b.n	80087a2 <__aeabi_dmul+0x24a>
 800895c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008960:	bf18      	it	ne
 8008962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008966:	f47f aec5 	bne.w	80086f4 <__aeabi_dmul+0x19c>
 800896a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800896e:	f47f af0d 	bne.w	800878c <__aeabi_dmul+0x234>
 8008972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008976:	f47f aeeb 	bne.w	8008750 <__aeabi_dmul+0x1f8>
 800897a:	e712      	b.n	80087a2 <__aeabi_dmul+0x24a>

0800897c <__aeabi_d2uiz>:
 800897c:	004a      	lsls	r2, r1, #1
 800897e:	d211      	bcs.n	80089a4 <__aeabi_d2uiz+0x28>
 8008980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008984:	d211      	bcs.n	80089aa <__aeabi_d2uiz+0x2e>
 8008986:	d50d      	bpl.n	80089a4 <__aeabi_d2uiz+0x28>
 8008988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800898c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008990:	d40e      	bmi.n	80089b0 <__aeabi_d2uiz+0x34>
 8008992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800899a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800899e:	fa23 f002 	lsr.w	r0, r3, r2
 80089a2:	4770      	bx	lr
 80089a4:	f04f 0000 	mov.w	r0, #0
 80089a8:	4770      	bx	lr
 80089aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80089ae:	d102      	bne.n	80089b6 <__aeabi_d2uiz+0x3a>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	4770      	bx	lr
 80089b6:	f04f 0000 	mov.w	r0, #0
 80089ba:	4770      	bx	lr

080089bc <__aeabi_uldivmod>:
 80089bc:	b953      	cbnz	r3, 80089d4 <__aeabi_uldivmod+0x18>
 80089be:	b94a      	cbnz	r2, 80089d4 <__aeabi_uldivmod+0x18>
 80089c0:	2900      	cmp	r1, #0
 80089c2:	bf08      	it	eq
 80089c4:	2800      	cmpeq	r0, #0
 80089c6:	bf1c      	itt	ne
 80089c8:	f04f 31ff 	movne.w	r1, #4294967295
 80089cc:	f04f 30ff 	movne.w	r0, #4294967295
 80089d0:	f000 b970 	b.w	8008cb4 <__aeabi_idiv0>
 80089d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80089d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80089dc:	f000 f806 	bl	80089ec <__udivmoddi4>
 80089e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80089e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089e8:	b004      	add	sp, #16
 80089ea:	4770      	bx	lr

080089ec <__udivmoddi4>:
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	9e08      	ldr	r6, [sp, #32]
 80089f2:	460d      	mov	r5, r1
 80089f4:	4604      	mov	r4, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d14a      	bne.n	8008a92 <__udivmoddi4+0xa6>
 80089fc:	428a      	cmp	r2, r1
 80089fe:	4694      	mov	ip, r2
 8008a00:	d965      	bls.n	8008ace <__udivmoddi4+0xe2>
 8008a02:	fab2 f382 	clz	r3, r2
 8008a06:	b143      	cbz	r3, 8008a1a <__udivmoddi4+0x2e>
 8008a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8008a0c:	f1c3 0220 	rsb	r2, r3, #32
 8008a10:	409f      	lsls	r7, r3
 8008a12:	fa20 f202 	lsr.w	r2, r0, r2
 8008a16:	4317      	orrs	r7, r2
 8008a18:	409c      	lsls	r4, r3
 8008a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008a1e:	fa1f f58c 	uxth.w	r5, ip
 8008a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8008a26:	0c22      	lsrs	r2, r4, #16
 8008a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8008a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008a30:	fb01 f005 	mul.w	r0, r1, r5
 8008a34:	4290      	cmp	r0, r2
 8008a36:	d90a      	bls.n	8008a4e <__udivmoddi4+0x62>
 8008a38:	eb1c 0202 	adds.w	r2, ip, r2
 8008a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8008a40:	f080 811c 	bcs.w	8008c7c <__udivmoddi4+0x290>
 8008a44:	4290      	cmp	r0, r2
 8008a46:	f240 8119 	bls.w	8008c7c <__udivmoddi4+0x290>
 8008a4a:	3902      	subs	r1, #2
 8008a4c:	4462      	add	r2, ip
 8008a4e:	1a12      	subs	r2, r2, r0
 8008a50:	b2a4      	uxth	r4, r4
 8008a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8008a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8008a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008a5e:	fb00 f505 	mul.w	r5, r0, r5
 8008a62:	42a5      	cmp	r5, r4
 8008a64:	d90a      	bls.n	8008a7c <__udivmoddi4+0x90>
 8008a66:	eb1c 0404 	adds.w	r4, ip, r4
 8008a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8008a6e:	f080 8107 	bcs.w	8008c80 <__udivmoddi4+0x294>
 8008a72:	42a5      	cmp	r5, r4
 8008a74:	f240 8104 	bls.w	8008c80 <__udivmoddi4+0x294>
 8008a78:	4464      	add	r4, ip
 8008a7a:	3802      	subs	r0, #2
 8008a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008a80:	1b64      	subs	r4, r4, r5
 8008a82:	2100      	movs	r1, #0
 8008a84:	b11e      	cbz	r6, 8008a8e <__udivmoddi4+0xa2>
 8008a86:	40dc      	lsrs	r4, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8008a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a92:	428b      	cmp	r3, r1
 8008a94:	d908      	bls.n	8008aa8 <__udivmoddi4+0xbc>
 8008a96:	2e00      	cmp	r6, #0
 8008a98:	f000 80ed 	beq.w	8008c76 <__udivmoddi4+0x28a>
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa8:	fab3 f183 	clz	r1, r3
 8008aac:	2900      	cmp	r1, #0
 8008aae:	d149      	bne.n	8008b44 <__udivmoddi4+0x158>
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	d302      	bcc.n	8008aba <__udivmoddi4+0xce>
 8008ab4:	4282      	cmp	r2, r0
 8008ab6:	f200 80f8 	bhi.w	8008caa <__udivmoddi4+0x2be>
 8008aba:	1a84      	subs	r4, r0, r2
 8008abc:	eb65 0203 	sbc.w	r2, r5, r3
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	4617      	mov	r7, r2
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	d0e2      	beq.n	8008a8e <__udivmoddi4+0xa2>
 8008ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8008acc:	e7df      	b.n	8008a8e <__udivmoddi4+0xa2>
 8008ace:	b902      	cbnz	r2, 8008ad2 <__udivmoddi4+0xe6>
 8008ad0:	deff      	udf	#255	; 0xff
 8008ad2:	fab2 f382 	clz	r3, r2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f040 8090 	bne.w	8008bfc <__udivmoddi4+0x210>
 8008adc:	1a8a      	subs	r2, r1, r2
 8008ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008ae2:	fa1f fe8c 	uxth.w	lr, ip
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8008aec:	fb07 2015 	mls	r0, r7, r5, r2
 8008af0:	0c22      	lsrs	r2, r4, #16
 8008af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008af6:	fb0e f005 	mul.w	r0, lr, r5
 8008afa:	4290      	cmp	r0, r2
 8008afc:	d908      	bls.n	8008b10 <__udivmoddi4+0x124>
 8008afe:	eb1c 0202 	adds.w	r2, ip, r2
 8008b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8008b06:	d202      	bcs.n	8008b0e <__udivmoddi4+0x122>
 8008b08:	4290      	cmp	r0, r2
 8008b0a:	f200 80cb 	bhi.w	8008ca4 <__udivmoddi4+0x2b8>
 8008b0e:	4645      	mov	r5, r8
 8008b10:	1a12      	subs	r2, r2, r0
 8008b12:	b2a4      	uxth	r4, r4
 8008b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8008b18:	fb07 2210 	mls	r2, r7, r0, r2
 8008b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b20:	fb0e fe00 	mul.w	lr, lr, r0
 8008b24:	45a6      	cmp	lr, r4
 8008b26:	d908      	bls.n	8008b3a <__udivmoddi4+0x14e>
 8008b28:	eb1c 0404 	adds.w	r4, ip, r4
 8008b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8008b30:	d202      	bcs.n	8008b38 <__udivmoddi4+0x14c>
 8008b32:	45a6      	cmp	lr, r4
 8008b34:	f200 80bb 	bhi.w	8008cae <__udivmoddi4+0x2c2>
 8008b38:	4610      	mov	r0, r2
 8008b3a:	eba4 040e 	sub.w	r4, r4, lr
 8008b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8008b42:	e79f      	b.n	8008a84 <__udivmoddi4+0x98>
 8008b44:	f1c1 0720 	rsb	r7, r1, #32
 8008b48:	408b      	lsls	r3, r1
 8008b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8008b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8008b52:	fa05 f401 	lsl.w	r4, r5, r1
 8008b56:	fa20 f307 	lsr.w	r3, r0, r7
 8008b5a:	40fd      	lsrs	r5, r7
 8008b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008b60:	4323      	orrs	r3, r4
 8008b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8008b66:	fa1f fe8c 	uxth.w	lr, ip
 8008b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8008b6e:	0c1c      	lsrs	r4, r3, #16
 8008b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008b74:	fb08 f50e 	mul.w	r5, r8, lr
 8008b78:	42a5      	cmp	r5, r4
 8008b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8008b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8008b82:	d90b      	bls.n	8008b9c <__udivmoddi4+0x1b0>
 8008b84:	eb1c 0404 	adds.w	r4, ip, r4
 8008b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8008b8c:	f080 8088 	bcs.w	8008ca0 <__udivmoddi4+0x2b4>
 8008b90:	42a5      	cmp	r5, r4
 8008b92:	f240 8085 	bls.w	8008ca0 <__udivmoddi4+0x2b4>
 8008b96:	f1a8 0802 	sub.w	r8, r8, #2
 8008b9a:	4464      	add	r4, ip
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	b29d      	uxth	r5, r3
 8008ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8008ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8008ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8008bb0:	45a6      	cmp	lr, r4
 8008bb2:	d908      	bls.n	8008bc6 <__udivmoddi4+0x1da>
 8008bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8008bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8008bbc:	d26c      	bcs.n	8008c98 <__udivmoddi4+0x2ac>
 8008bbe:	45a6      	cmp	lr, r4
 8008bc0:	d96a      	bls.n	8008c98 <__udivmoddi4+0x2ac>
 8008bc2:	3b02      	subs	r3, #2
 8008bc4:	4464      	add	r4, ip
 8008bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008bca:	fba3 9502 	umull	r9, r5, r3, r2
 8008bce:	eba4 040e 	sub.w	r4, r4, lr
 8008bd2:	42ac      	cmp	r4, r5
 8008bd4:	46c8      	mov	r8, r9
 8008bd6:	46ae      	mov	lr, r5
 8008bd8:	d356      	bcc.n	8008c88 <__udivmoddi4+0x29c>
 8008bda:	d053      	beq.n	8008c84 <__udivmoddi4+0x298>
 8008bdc:	b156      	cbz	r6, 8008bf4 <__udivmoddi4+0x208>
 8008bde:	ebb0 0208 	subs.w	r2, r0, r8
 8008be2:	eb64 040e 	sbc.w	r4, r4, lr
 8008be6:	fa04 f707 	lsl.w	r7, r4, r7
 8008bea:	40ca      	lsrs	r2, r1
 8008bec:	40cc      	lsrs	r4, r1
 8008bee:	4317      	orrs	r7, r2
 8008bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bfc:	f1c3 0120 	rsb	r1, r3, #32
 8008c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8008c04:	fa20 f201 	lsr.w	r2, r0, r1
 8008c08:	fa25 f101 	lsr.w	r1, r5, r1
 8008c0c:	409d      	lsls	r5, r3
 8008c0e:	432a      	orrs	r2, r5
 8008c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008c14:	fa1f fe8c 	uxth.w	lr, ip
 8008c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8008c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8008c20:	0c11      	lsrs	r1, r2, #16
 8008c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008c26:	fb00 f50e 	mul.w	r5, r0, lr
 8008c2a:	428d      	cmp	r5, r1
 8008c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8008c30:	d908      	bls.n	8008c44 <__udivmoddi4+0x258>
 8008c32:	eb1c 0101 	adds.w	r1, ip, r1
 8008c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8008c3a:	d22f      	bcs.n	8008c9c <__udivmoddi4+0x2b0>
 8008c3c:	428d      	cmp	r5, r1
 8008c3e:	d92d      	bls.n	8008c9c <__udivmoddi4+0x2b0>
 8008c40:	3802      	subs	r0, #2
 8008c42:	4461      	add	r1, ip
 8008c44:	1b49      	subs	r1, r1, r5
 8008c46:	b292      	uxth	r2, r2
 8008c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8008c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8008c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008c54:	fb05 f10e 	mul.w	r1, r5, lr
 8008c58:	4291      	cmp	r1, r2
 8008c5a:	d908      	bls.n	8008c6e <__udivmoddi4+0x282>
 8008c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8008c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8008c64:	d216      	bcs.n	8008c94 <__udivmoddi4+0x2a8>
 8008c66:	4291      	cmp	r1, r2
 8008c68:	d914      	bls.n	8008c94 <__udivmoddi4+0x2a8>
 8008c6a:	3d02      	subs	r5, #2
 8008c6c:	4462      	add	r2, ip
 8008c6e:	1a52      	subs	r2, r2, r1
 8008c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8008c74:	e738      	b.n	8008ae8 <__udivmoddi4+0xfc>
 8008c76:	4631      	mov	r1, r6
 8008c78:	4630      	mov	r0, r6
 8008c7a:	e708      	b.n	8008a8e <__udivmoddi4+0xa2>
 8008c7c:	4639      	mov	r1, r7
 8008c7e:	e6e6      	b.n	8008a4e <__udivmoddi4+0x62>
 8008c80:	4610      	mov	r0, r2
 8008c82:	e6fb      	b.n	8008a7c <__udivmoddi4+0x90>
 8008c84:	4548      	cmp	r0, r9
 8008c86:	d2a9      	bcs.n	8008bdc <__udivmoddi4+0x1f0>
 8008c88:	ebb9 0802 	subs.w	r8, r9, r2
 8008c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008c90:	3b01      	subs	r3, #1
 8008c92:	e7a3      	b.n	8008bdc <__udivmoddi4+0x1f0>
 8008c94:	4645      	mov	r5, r8
 8008c96:	e7ea      	b.n	8008c6e <__udivmoddi4+0x282>
 8008c98:	462b      	mov	r3, r5
 8008c9a:	e794      	b.n	8008bc6 <__udivmoddi4+0x1da>
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	e7d1      	b.n	8008c44 <__udivmoddi4+0x258>
 8008ca0:	46d0      	mov	r8, sl
 8008ca2:	e77b      	b.n	8008b9c <__udivmoddi4+0x1b0>
 8008ca4:	3d02      	subs	r5, #2
 8008ca6:	4462      	add	r2, ip
 8008ca8:	e732      	b.n	8008b10 <__udivmoddi4+0x124>
 8008caa:	4608      	mov	r0, r1
 8008cac:	e70a      	b.n	8008ac4 <__udivmoddi4+0xd8>
 8008cae:	4464      	add	r4, ip
 8008cb0:	3802      	subs	r0, #2
 8008cb2:	e742      	b.n	8008b3a <__udivmoddi4+0x14e>

08008cb4 <__aeabi_idiv0>:
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop

08008cb8 <LDR_u8GetValue>:
  * @brief  Get the Value measured by LDR sensor.
  * @param  None
  * @retval The LDR value
  */
uint8_t LDR_u8GetValue(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
		temp = HAL_ADC_GetValue(&hadc1);	//read ADC value
		value = (temp/4096.0)*100.0;
		flag=0;

	}*/
	uint32_t temp = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	607b      	str	r3, [r7, #4]
	uint8_t value = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	70fb      	strb	r3, [r7, #3]
	HAL_ADC_Start(&hadc1);
 8008cc6:	4814      	ldr	r0, [pc, #80]	; (8008d18 <LDR_u8GetValue+0x60>)
 8008cc8:	f001 f9c2 	bl	800a050 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8008ccc:	2164      	movs	r1, #100	; 0x64
 8008cce:	4812      	ldr	r0, [pc, #72]	; (8008d18 <LDR_u8GetValue+0x60>)
 8008cd0:	f001 fa72 	bl	800a1b8 <HAL_ADC_PollForConversion>
	temp = HAL_ADC_GetValue(&hadc1);
 8008cd4:	4810      	ldr	r0, [pc, #64]	; (8008d18 <LDR_u8GetValue+0x60>)
 8008cd6:	f001 fafa 	bl	800a2ce <HAL_ADC_GetValue>
 8008cda:	6078      	str	r0, [r7, #4]
	value = (temp/4096.0)*100.0;
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fbc1 	bl	8008464 <__aeabi_ui2d>
 8008ce2:	f04f 0200 	mov.w	r2, #0
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	; (8008d1c <LDR_u8GetValue+0x64>)
 8008ce8:	f7ff fd60 	bl	80087ac <__aeabi_ddiv>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <LDR_u8GetValue+0x68>)
 8008cfa:	f7ff fc2d 	bl	8008558 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7ff fe39 	bl	800897c <__aeabi_d2uiz>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	70fb      	strb	r3, [r7, #3]
	return value;
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3708      	adds	r7, #8
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	2000002c 	.word	0x2000002c
 8008d1c:	40b00000 	.word	0x40b00000
 8008d20:	40590000 	.word	0x40590000

08008d24 <MotorDriver_voidInit>:
#include "gpio.h"
#include "Motor.h"


void MotorDriver_voidInit(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);	/* Motor1 + Motor2 */
 8008d28:	2100      	movs	r1, #0
 8008d2a:	4804      	ldr	r0, [pc, #16]	; (8008d3c <MotorDriver_voidInit+0x18>)
 8008d2c:	f002 fd44 	bl	800b7b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   /* Motor3 + Motor4 */
 8008d30:	2104      	movs	r1, #4
 8008d32:	4802      	ldr	r0, [pc, #8]	; (8008d3c <MotorDriver_voidInit+0x18>)
 8008d34:	f002 fd40 	bl	800b7b8 <HAL_TIM_PWM_Start>
}
 8008d38:	bf00      	nop
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	2000012c 	.word	0x2000012c

08008d40 <MotorDriver_voidControlSpeed>:

void MotorDriver_voidControlSpeed(uint8_t DutyCycle)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	71fb      	strb	r3, [r7, #7]
	htim3.Instance->CCR1 = 99-DutyCycle;		/* Motor1 + Motor2 */
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <MotorDriver_voidControlSpeed+0x30>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 99-DutyCycle;		/* Motor3 + Motor4 */
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <MotorDriver_voidControlSpeed+0x30>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	639a      	str	r2, [r3, #56]	; 0x38

	//htim3.Instance->CCR1 = DutyCycle;
	//htim3.Instance->CCR2 = DutyCycle;
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	2000012c 	.word	0x2000012c

08008d74 <MotorDriver_voidStop>:

void MotorDriver_voidStop(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // Motor 1
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008d7e:	480b      	ldr	r0, [pc, #44]	; (8008dac <MotorDriver_voidStop+0x38>)
 8008d80:	f001 ff6a 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Motor 2
 8008d84:	2200      	movs	r2, #0
 8008d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <MotorDriver_voidStop+0x38>)
 8008d8c:	f001 ff64 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Motor 3
 8008d90:	2200      	movs	r2, #0
 8008d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d96:	4805      	ldr	r0, [pc, #20]	; (8008dac <MotorDriver_voidStop+0x38>)
 8008d98:	f001 ff5e 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Motor 4
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008da2:	4802      	ldr	r0, [pc, #8]	; (8008dac <MotorDriver_voidStop+0x38>)
 8008da4:	f001 ff58 	bl	800ac58 <HAL_GPIO_WritePin>
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	40020400 	.word	0x40020400

08008db0 <MotorDriver_voidMoveForward>:

void MotorDriver_voidMoveForward(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);    // Motor 1
 8008db4:	2201      	movs	r2, #1
 8008db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008dba:	480b      	ldr	r0, [pc, #44]	; (8008de8 <MotorDriver_voidMoveForward+0x38>)
 8008dbc:	f001 ff4c 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);  // Motor 2
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008dc6:	4808      	ldr	r0, [pc, #32]	; (8008de8 <MotorDriver_voidMoveForward+0x38>)
 8008dc8:	f001 ff46 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);    // Motor 3
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008dd2:	4805      	ldr	r0, [pc, #20]	; (8008de8 <MotorDriver_voidMoveForward+0x38>)
 8008dd4:	f001 ff40 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);  // Motor 4
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dde:	4802      	ldr	r0, [pc, #8]	; (8008de8 <MotorDriver_voidMoveForward+0x38>)
 8008de0:	f001 ff3a 	bl	800ac58 <HAL_GPIO_WritePin>
}
 8008de4:	bf00      	nop
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	40020400 	.word	0x40020400

08008dec <MotorDriver_voidMoveRight>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);   // Motor 3
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);     // Motor 4
}

void MotorDriver_voidMoveRight(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);   // Motor 1
 8008df0:	2200      	movs	r2, #0
 8008df2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008df6:	480b      	ldr	r0, [pc, #44]	; (8008e24 <MotorDriver_voidMoveRight+0x38>)
 8008df8:	f001 ff2e 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // Motor 2
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e02:	4808      	ldr	r0, [pc, #32]	; (8008e24 <MotorDriver_voidMoveRight+0x38>)
 8008e04:	f001 ff28 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);     // Motor 3
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e0e:	4805      	ldr	r0, [pc, #20]	; (8008e24 <MotorDriver_voidMoveRight+0x38>)
 8008e10:	f001 ff22 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);   // Motor 4
 8008e14:	2200      	movs	r2, #0
 8008e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e1a:	4802      	ldr	r0, [pc, #8]	; (8008e24 <MotorDriver_voidMoveRight+0x38>)
 8008e1c:	f001 ff1c 	bl	800ac58 <HAL_GPIO_WritePin>
}
 8008e20:	bf00      	nop
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	40020400 	.word	0x40020400

08008e28 <MotorDriver_voidMoveLeft>:

void MotorDriver_voidMoveLeft(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);     // Motor 1
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008e32:	480b      	ldr	r0, [pc, #44]	; (8008e60 <MotorDriver_voidMoveLeft+0x38>)
 8008e34:	f001 ff10 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);   // Motor 2
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008e3e:	4808      	ldr	r0, [pc, #32]	; (8008e60 <MotorDriver_voidMoveLeft+0x38>)
 8008e40:	f001 ff0a 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);   // Motor 3
 8008e44:	2200      	movs	r2, #0
 8008e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e4a:	4805      	ldr	r0, [pc, #20]	; (8008e60 <MotorDriver_voidMoveLeft+0x38>)
 8008e4c:	f001 ff04 	bl	800ac58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   // Motor 4
 8008e50:	2201      	movs	r2, #1
 8008e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e56:	4802      	ldr	r0, [pc, #8]	; (8008e60 <MotorDriver_voidMoveLeft+0x38>)
 8008e58:	f001 fefe 	bl	800ac58 <HAL_GPIO_WritePin>
}
 8008e5c:	bf00      	nop
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40020400 	.word	0x40020400

08008e64 <Ultrasonic_u16GetDistance>:
  * @brief  Get the distance measured by the HC-SR401 ultrasonic sensor.
  * @param  None
  * @retval The distance value
  */
uint16_t Ultrasonic_u16GetDistance(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef Status1 = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	753b      	strb	r3, [r7, #20]

	uint16_t Distance=0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	82fb      	strh	r3, [r7, #22]
	uint8_t temp[2]={0};
 8008e72:	2300      	movs	r3, #0
 8008e74:	813b      	strh	r3, [r7, #8]
	uint8_t *ptr1=&temp[0];
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	613b      	str	r3, [r7, #16]
	const uint8_t u= 0x55;
 8008e7c:	2355      	movs	r3, #85	; 0x55
 8008e7e:	71fb      	strb	r3, [r7, #7]
	const uint8_t *ptr = &u;
 8008e80:	1dfb      	adds	r3, r7, #7
 8008e82:	60fb      	str	r3, [r7, #12]

	/*transmit 0x55 to ultrasonic to get distance */
	Status1 = HAL_UART_Transmit(&huart2, ptr, 2, 100);
 8008e84:	2364      	movs	r3, #100	; 0x64
 8008e86:	2202      	movs	r2, #2
 8008e88:	68f9      	ldr	r1, [r7, #12]
 8008e8a:	4817      	ldr	r0, [pc, #92]	; (8008ee8 <Ultrasonic_u16GetDistance+0x84>)
 8008e8c:	f003 fb90 	bl	800c5b0 <HAL_UART_Transmit>
 8008e90:	4603      	mov	r3, r0
 8008e92:	753b      	strb	r3, [r7, #20]

	if (HAL_OK == Status1)
 8008e94:	7d3b      	ldrb	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d11f      	bne.n	8008eda <Ultrasonic_u16GetDistance+0x76>
	{
		for(uint8_t i =0 ; i<2 ;i++)
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	757b      	strb	r3, [r7, #21]
 8008e9e:	e00a      	b.n	8008eb6 <Ultrasonic_u16GetDistance+0x52>
		{
			/* get 2 bytes of data */
			HAL_UART_Receive(&huart2, ptr1+i, sizeof(uint8_t), 100);
 8008ea0:	7d7b      	ldrb	r3, [r7, #21]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	18d1      	adds	r1, r2, r3
 8008ea6:	2364      	movs	r3, #100	; 0x64
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	480f      	ldr	r0, [pc, #60]	; (8008ee8 <Ultrasonic_u16GetDistance+0x84>)
 8008eac:	f003 fc0b 	bl	800c6c6 <HAL_UART_Receive>
		for(uint8_t i =0 ; i<2 ;i++)
 8008eb0:	7d7b      	ldrb	r3, [r7, #21]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	757b      	strb	r3, [r7, #21]
 8008eb6:	7d7b      	ldrb	r3, [r7, #21]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d9f1      	bls.n	8008ea0 <Ultrasonic_u16GetDistance+0x3c>
		}
			/*distance = uint16_t data in mm */
			Distance=(uint16_t)temp[1] | ((uint16_t)temp[0])<<8;
 8008ebc:	7a7b      	ldrb	r3, [r7, #9]
 8008ebe:	b21a      	sxth	r2, r3
 8008ec0:	7a3b      	ldrb	r3, [r7, #8]
 8008ec2:	021b      	lsls	r3, r3, #8
 8008ec4:	b21b      	sxth	r3, r3
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	82fb      	strh	r3, [r7, #22]
			Distance /=10;		/* Distance in CM */
 8008ecc:	8afb      	ldrh	r3, [r7, #22]
 8008ece:	4a07      	ldr	r2, [pc, #28]	; (8008eec <Ultrasonic_u16GetDistance+0x88>)
 8008ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed4:	08db      	lsrs	r3, r3, #3
 8008ed6:	82fb      	strh	r3, [r7, #22]
 8008ed8:	e001      	b.n	8008ede <Ultrasonic_u16GetDistance+0x7a>
	}
	else
	{
		Status1 = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	753b      	strb	r3, [r7, #20]
	}

	return Distance;
 8008ede:	8afb      	ldrh	r3, [r7, #22]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3718      	adds	r7, #24
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	20000204 	.word	0x20000204
 8008eec:	cccccccd 	.word	0xcccccccd

08008ef0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	605a      	str	r2, [r3, #4]
 8008efe:	609a      	str	r2, [r3, #8]
 8008f00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8008f02:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f04:	4a21      	ldr	r2, [pc, #132]	; (8008f8c <MX_ADC1_Init+0x9c>)
 8008f06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008f08:	4b1f      	ldr	r3, [pc, #124]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008f0e:	4b1e      	ldr	r3, [pc, #120]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8008f14:	4b1c      	ldr	r3, [pc, #112]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008f1a:	4b1b      	ldr	r3, [pc, #108]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008f20:	4b19      	ldr	r3, [pc, #100]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008f28:	4b17      	ldr	r3, [pc, #92]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008f2e:	4b16      	ldr	r3, [pc, #88]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f30:	4a17      	ldr	r2, [pc, #92]	; (8008f90 <MX_ADC1_Init+0xa0>)
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008f34:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f36:	2200      	movs	r2, #0
 8008f38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008f40:	4b11      	ldr	r3, [pc, #68]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008f4e:	480e      	ldr	r0, [pc, #56]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f50:	f001 f83a 	bl	8009fc8 <HAL_ADC_Init>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008f5a:	f000 fbb8 	bl	80096ce <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008f62:	2301      	movs	r3, #1
 8008f64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4806      	ldr	r0, [pc, #24]	; (8008f88 <MX_ADC1_Init+0x98>)
 8008f70:	f001 f9ba 	bl	800a2e8 <HAL_ADC_ConfigChannel>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8008f7a:	f000 fba8 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000002c 	.word	0x2000002c
 8008f8c:	40012000 	.word	0x40012000
 8008f90:	0f000001 	.word	0x0f000001

08008f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08a      	sub	sp, #40	; 0x28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	605a      	str	r2, [r3, #4]
 8008fa6:	609a      	str	r2, [r3, #8]
 8008fa8:	60da      	str	r2, [r3, #12]
 8008faa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a17      	ldr	r2, [pc, #92]	; (8009010 <HAL_ADC_MspInit+0x7c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d127      	bne.n	8009006 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	4b16      	ldr	r3, [pc, #88]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fbe:	4a15      	ldr	r2, [pc, #84]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	613b      	str	r3, [r7, #16]
 8008fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60fb      	str	r3, [r7, #12]
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	4a0e      	ldr	r2, [pc, #56]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fe2:	4b0c      	ldr	r3, [pc, #48]	; (8009014 <HAL_ADC_MspInit+0x80>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = LDR_Sensor_Pin;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LDR_Sensor_GPIO_Port, &GPIO_InitStruct);
 8008ffa:	f107 0314 	add.w	r3, r7, #20
 8008ffe:	4619      	mov	r1, r3
 8009000:	4805      	ldr	r0, [pc, #20]	; (8009018 <HAL_ADC_MspInit+0x84>)
 8009002:	f001 fc8d 	bl	800a920 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8009006:	bf00      	nop
 8009008:	3728      	adds	r7, #40	; 0x28
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	40012000 	.word	0x40012000
 8009014:	40023800 	.word	0x40023800
 8009018:	40020000 	.word	0x40020000

0800901c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of TASK_1 */
	TASK_1Handle = osThreadNew(ACC_TASK, NULL, &TASK_1_attributes);
 8009020:	4a18      	ldr	r2, [pc, #96]	; (8009084 <MX_FREERTOS_Init+0x68>)
 8009022:	2100      	movs	r1, #0
 8009024:	4818      	ldr	r0, [pc, #96]	; (8009088 <MX_FREERTOS_Init+0x6c>)
 8009026:	f003 ffa3 	bl	800cf70 <osThreadNew>
 800902a:	4603      	mov	r3, r0
 800902c:	4a17      	ldr	r2, [pc, #92]	; (800908c <MX_FREERTOS_Init+0x70>)
 800902e:	6013      	str	r3, [r2, #0]

	/* creation of TASK_2 */
	TASK_2Handle = osThreadNew(AEB_TASK, NULL, &TASK_2_attributes);
 8009030:	4a17      	ldr	r2, [pc, #92]	; (8009090 <MX_FREERTOS_Init+0x74>)
 8009032:	2100      	movs	r1, #0
 8009034:	4817      	ldr	r0, [pc, #92]	; (8009094 <MX_FREERTOS_Init+0x78>)
 8009036:	f003 ff9b 	bl	800cf70 <osThreadNew>
 800903a:	4603      	mov	r3, r0
 800903c:	4a16      	ldr	r2, [pc, #88]	; (8009098 <MX_FREERTOS_Init+0x7c>)
 800903e:	6013      	str	r3, [r2, #0]

	/* creation of TASK_3 */
	TASK_3Handle = osThreadNew(LKS_Task, NULL, &TASK_3_attributes);
 8009040:	4a16      	ldr	r2, [pc, #88]	; (800909c <MX_FREERTOS_Init+0x80>)
 8009042:	2100      	movs	r1, #0
 8009044:	4816      	ldr	r0, [pc, #88]	; (80090a0 <MX_FREERTOS_Init+0x84>)
 8009046:	f003 ff93 	bl	800cf70 <osThreadNew>
 800904a:	4603      	mov	r3, r0
 800904c:	4a15      	ldr	r2, [pc, #84]	; (80090a4 <MX_FREERTOS_Init+0x88>)
 800904e:	6013      	str	r3, [r2, #0]

	/* creation of TASK_4 */
	TASK_4Handle = osThreadNew(ALC_TASK, NULL, &TASK_4_attributes);
 8009050:	4a15      	ldr	r2, [pc, #84]	; (80090a8 <MX_FREERTOS_Init+0x8c>)
 8009052:	2100      	movs	r1, #0
 8009054:	4815      	ldr	r0, [pc, #84]	; (80090ac <MX_FREERTOS_Init+0x90>)
 8009056:	f003 ff8b 	bl	800cf70 <osThreadNew>
 800905a:	4603      	mov	r3, r0
 800905c:	4a14      	ldr	r2, [pc, #80]	; (80090b0 <MX_FREERTOS_Init+0x94>)
 800905e:	6013      	str	r3, [r2, #0]

	/* creation of TASK_5 */
	TASK_5Handle = osThreadNew(Bluetooth_Task, NULL, &TASK_5_attributes);
 8009060:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <MX_FREERTOS_Init+0x98>)
 8009062:	2100      	movs	r1, #0
 8009064:	4814      	ldr	r0, [pc, #80]	; (80090b8 <MX_FREERTOS_Init+0x9c>)
 8009066:	f003 ff83 	bl	800cf70 <osThreadNew>
 800906a:	4603      	mov	r3, r0
 800906c:	4a13      	ldr	r2, [pc, #76]	; (80090bc <MX_FREERTOS_Init+0xa0>)
 800906e:	6013      	str	r3, [r2, #0]

	/* creation of TASK_6 */
	TASK_6Handle = osThreadNew(FOTA_Task, NULL, &TASK_6_attributes);
 8009070:	4a13      	ldr	r2, [pc, #76]	; (80090c0 <MX_FREERTOS_Init+0xa4>)
 8009072:	2100      	movs	r1, #0
 8009074:	4813      	ldr	r0, [pc, #76]	; (80090c4 <MX_FREERTOS_Init+0xa8>)
 8009076:	f003 ff7b 	bl	800cf70 <osThreadNew>
 800907a:	4603      	mov	r3, r0
 800907c:	4a12      	ldr	r2, [pc, #72]	; (80090c8 <MX_FREERTOS_Init+0xac>)
 800907e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8009080:	bf00      	nop
 8009082:	bd80      	pop	{r7, pc}
 8009084:	0800fa50 	.word	0x0800fa50
 8009088:	080090cd 	.word	0x080090cd
 800908c:	20000080 	.word	0x20000080
 8009090:	0800fa74 	.word	0x0800fa74
 8009094:	0800914d 	.word	0x0800914d
 8009098:	20000084 	.word	0x20000084
 800909c:	0800fa98 	.word	0x0800fa98
 80090a0:	08009201 	.word	0x08009201
 80090a4:	20000088 	.word	0x20000088
 80090a8:	0800fabc 	.word	0x0800fabc
 80090ac:	08009289 	.word	0x08009289
 80090b0:	2000008c 	.word	0x2000008c
 80090b4:	0800fae0 	.word	0x0800fae0
 80090b8:	080092f1 	.word	0x080092f1
 80090bc:	20000090 	.word	0x20000090
 80090c0:	0800fb04 	.word	0x0800fb04
 80090c4:	0800943d 	.word	0x0800943d
 80090c8:	20000094 	.word	0x20000094

080090cc <ACC_TASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_ACC_TASK */
void ACC_TASK(void *argument)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	static uint8_t speed = 0;

	/* Infinite loop */
	for(;;)
	{
		if((!AEB_Flag) && (!LKS_Flag) && (ACC_Flag))
 80090d4:	4b18      	ldr	r3, [pc, #96]	; (8009138 <ACC_TASK+0x6c>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d129      	bne.n	8009130 <ACC_TASK+0x64>
 80090dc:	4b17      	ldr	r3, [pc, #92]	; (800913c <ACC_TASK+0x70>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d125      	bne.n	8009130 <ACC_TASK+0x64>
 80090e4:	4b16      	ldr	r3, [pc, #88]	; (8009140 <ACC_TASK+0x74>)
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d021      	beq.n	8009130 <ACC_TASK+0x64>
		{

			//Current_Distance = Ultrasonic_u16GetDistance();
			/* Reset speed for safty*/
			speed = 0 ;
 80090ec:	4b15      	ldr	r3, [pc, #84]	; (8009144 <ACC_TASK+0x78>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
			/* Set motor direction */
			MotorDriver_voidMoveForward();
 80090f2:	f7ff fe5d 	bl	8008db0 <MotorDriver_voidMoveForward>

			if ((Current_Distance < DEFAULT_DISTANCE) && (Current_Distance > MIN_DISTANCE))
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <ACC_TASK+0x7c>)
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	2b31      	cmp	r3, #49	; 0x31
 80090fc:	d80c      	bhi.n	8009118 <ACC_TASK+0x4c>
 80090fe:	4b12      	ldr	r3, [pc, #72]	; (8009148 <ACC_TASK+0x7c>)
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	2b0a      	cmp	r3, #10
 8009104:	d908      	bls.n	8009118 <ACC_TASK+0x4c>
			{
				/* Calculate Adaptive Speed */
				speed = MAX_SPEED - 2*(DEFAULT_DISTANCE - Current_Distance) ;
 8009106:	4b10      	ldr	r3, [pc, #64]	; (8009148 <ACC_TASK+0x7c>)
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	3b01      	subs	r3, #1
 800910c:	b2db      	uxtb	r3, r3
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <ACC_TASK+0x78>)
 8009114:	701a      	strb	r2, [r3, #0]
 8009116:	e006      	b.n	8009126 <ACC_TASK+0x5a>
			}
			else if (Current_Distance >= DEFAULT_DISTANCE)
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <ACC_TASK+0x7c>)
 800911a:	881b      	ldrh	r3, [r3, #0]
 800911c:	2b31      	cmp	r3, #49	; 0x31
 800911e:	d902      	bls.n	8009126 <ACC_TASK+0x5a>
			{
				speed = MAX_SPEED ;
 8009120:	4b08      	ldr	r3, [pc, #32]	; (8009144 <ACC_TASK+0x78>)
 8009122:	2262      	movs	r2, #98	; 0x62
 8009124:	701a      	strb	r2, [r3, #0]
			}
			else{/* nothing */}
			/* Update speed based on Ultrasonic reading */
			MotorDriver_voidControlSpeed(speed);
 8009126:	4b07      	ldr	r3, [pc, #28]	; (8009144 <ACC_TASK+0x78>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fe08 	bl	8008d40 <MotorDriver_voidControlSpeed>

		}
		else{/* Nothing */}

		osDelay(1);
 8009130:	2001      	movs	r0, #1
 8009132:	f003 ffaf 	bl	800d094 <osDelay>
		if((!AEB_Flag) && (!LKS_Flag) && (ACC_Flag))
 8009136:	e7cd      	b.n	80090d4 <ACC_TASK+0x8>
 8009138:	20000079 	.word	0x20000079
 800913c:	2000007a 	.word	0x2000007a
 8009140:	20000077 	.word	0x20000077
 8009144:	20000098 	.word	0x20000098
 8009148:	20000074 	.word	0x20000074

0800914c <AEB_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AEB_TASK */
void AEB_TASK(void *argument)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AEB_TASK */
	/* Infinite loop */
	for(;;)
	{
		/* Measure distance */
		Current_Distance = Ultrasonic_u16GetDistance();
 8009154:	f7ff fe86 	bl	8008e64 <Ultrasonic_u16GetDistance>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	4b22      	ldr	r3, [pc, #136]	; (80091e8 <AEB_TASK+0x9c>)
 800915e:	801a      	strh	r2, [r3, #0]
		/* Read Left IR Value (BLACK/WHITE) */
		Left_IR = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8009160:	2102      	movs	r1, #2
 8009162:	4822      	ldr	r0, [pc, #136]	; (80091ec <AEB_TASK+0xa0>)
 8009164:	f001 fd60 	bl	800ac28 <HAL_GPIO_ReadPin>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <AEB_TASK+0xa4>)
 800916e:	701a      	strb	r2, [r3, #0]
		/* Read Right IR Value (BLACK/WHITE) */
		Right_IR = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8009170:	2101      	movs	r1, #1
 8009172:	481e      	ldr	r0, [pc, #120]	; (80091ec <AEB_TASK+0xa0>)
 8009174:	f001 fd58 	bl	800ac28 <HAL_GPIO_ReadPin>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <AEB_TASK+0xa8>)
 800917e:	701a      	strb	r2, [r3, #0]

		if ((Current_Distance <= MIN_DISTANCE)||(Left_IR == WHITE && Right_IR == WHITE))
 8009180:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <AEB_TASK+0x9c>)
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	2b0a      	cmp	r3, #10
 8009186:	d907      	bls.n	8009198 <AEB_TASK+0x4c>
 8009188:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <AEB_TASK+0xa4>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d124      	bne.n	80091da <AEB_TASK+0x8e>
 8009190:	4b18      	ldr	r3, [pc, #96]	; (80091f4 <AEB_TASK+0xa8>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d120      	bne.n	80091da <AEB_TASK+0x8e>
		{
			/* very low distance < 10 --> car stop */
			MotorDriver_voidStop();
 8009198:	f7ff fdec 	bl	8008d74 <MotorDriver_voidStop>
			/* Set (Automatic Emergency Braking) Flag */
			AEB_Flag = 1;
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <AEB_TASK+0xac>)
 800919e:	2201      	movs	r2, #1
 80091a0:	701a      	strb	r2, [r3, #0]
			/* Stop the car */
			MotorDriver_voidControlSpeed(0);
 80091a2:	2000      	movs	r0, #0
 80091a4:	f7ff fdcc 	bl	8008d40 <MotorDriver_voidControlSpeed>
			/* Turn On Back Leds  */
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80091a8:	2201      	movs	r2, #1
 80091aa:	2104      	movs	r1, #4
 80091ac:	480f      	ldr	r0, [pc, #60]	; (80091ec <AEB_TASK+0xa0>)
 80091ae:	f001 fd53 	bl	800ac58 <HAL_GPIO_WritePin>
			/* Turn On Buzzer */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80091b2:	2201      	movs	r2, #1
 80091b4:	2102      	movs	r1, #2
 80091b6:	4811      	ldr	r0, [pc, #68]	; (80091fc <AEB_TASK+0xb0>)
 80091b8:	f001 fd4e 	bl	800ac58 <HAL_GPIO_WritePin>
			/* Wait Task for 3 Sec*/
			vTaskDelay(3000);
 80091bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80091c0:	f004 fefa 	bl	800dfb8 <vTaskDelay>
			/* Turn On Buzzer  */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80091c4:	2200      	movs	r2, #0
 80091c6:	2102      	movs	r1, #2
 80091c8:	480c      	ldr	r0, [pc, #48]	; (80091fc <AEB_TASK+0xb0>)
 80091ca:	f001 fd45 	bl	800ac58 <HAL_GPIO_WritePin>
			/* Turn On Back Leds  */
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80091ce:	2200      	movs	r2, #0
 80091d0:	2104      	movs	r1, #4
 80091d2:	4806      	ldr	r0, [pc, #24]	; (80091ec <AEB_TASK+0xa0>)
 80091d4:	f001 fd40 	bl	800ac58 <HAL_GPIO_WritePin>
 80091d8:	e002      	b.n	80091e0 <AEB_TASK+0x94>
		}
		else
		{
			AEB_Flag = 0;
 80091da:	4b07      	ldr	r3, [pc, #28]	; (80091f8 <AEB_TASK+0xac>)
 80091dc:	2200      	movs	r2, #0
 80091de:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1);
 80091e0:	2001      	movs	r0, #1
 80091e2:	f003 ff57 	bl	800d094 <osDelay>
		Current_Distance = Ultrasonic_u16GetDistance();
 80091e6:	e7b5      	b.n	8009154 <AEB_TASK+0x8>
 80091e8:	20000074 	.word	0x20000074
 80091ec:	40020400 	.word	0x40020400
 80091f0:	2000007b 	.word	0x2000007b
 80091f4:	2000007c 	.word	0x2000007c
 80091f8:	20000079 	.word	0x20000079
 80091fc:	40020000 	.word	0x40020000

08009200 <LKS_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LKS_Task */
void LKS_Task(void *argument)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN LKS_Task */

	/* Infinite loop */
	for(;;)
	{
		if(!AEB_Flag)
 8009208:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <LKS_Task+0x74>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d12c      	bne.n	800926a <LKS_Task+0x6a>
		{
			/* If the car is inside the lane / No lane markings are detected on both sides */
			if ((Left_IR == BLACK) && (Right_IR == BLACK) && (ACC_Flag))
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <LKS_Task+0x78>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d10d      	bne.n	8009234 <LKS_Task+0x34>
 8009218:	4b18      	ldr	r3, [pc, #96]	; (800927c <LKS_Task+0x7c>)
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d109      	bne.n	8009234 <LKS_Task+0x34>
 8009220:	4b17      	ldr	r3, [pc, #92]	; (8009280 <LKS_Task+0x80>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <LKS_Task+0x34>
			{

				/* Move the car forward  */
				MotorDriver_voidMoveForward();
 8009228:	f7ff fdc2 	bl	8008db0 <MotorDriver_voidMoveForward>
				/* Reset (Lane Keeping Status) Flag */
				LKS_Flag = 0;
 800922c:	4b15      	ldr	r3, [pc, #84]	; (8009284 <LKS_Task+0x84>)
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]
 8009232:	e01a      	b.n	800926a <LKS_Task+0x6a>
			}
			/* If the car drifts to the right / Lane markings are detected on the right side */
			else if (Left_IR == BLACK && Right_IR == WHITE)
 8009234:	4b10      	ldr	r3, [pc, #64]	; (8009278 <LKS_Task+0x78>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d109      	bne.n	8009250 <LKS_Task+0x50>
 800923c:	4b0f      	ldr	r3, [pc, #60]	; (800927c <LKS_Task+0x7c>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d105      	bne.n	8009250 <LKS_Task+0x50>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8009244:	4b0f      	ldr	r3, [pc, #60]	; (8009284 <LKS_Task+0x84>)
 8009246:	2201      	movs	r2, #1
 8009248:	701a      	strb	r2, [r3, #0]
				// Steer the car to the left
				MotorDriver_voidMoveLeft();
 800924a:	f7ff fded 	bl	8008e28 <MotorDriver_voidMoveLeft>
 800924e:	e00c      	b.n	800926a <LKS_Task+0x6a>
			}
			/* If the car drifts to the left / Lane markings are detected on the left side */
			else if (Left_IR == WHITE && Right_IR == BLACK)
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <LKS_Task+0x78>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d108      	bne.n	800926a <LKS_Task+0x6a>
 8009258:	4b08      	ldr	r3, [pc, #32]	; (800927c <LKS_Task+0x7c>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d104      	bne.n	800926a <LKS_Task+0x6a>
			{
				/* Set (Lane Keeping Status) Flag */
				LKS_Flag = 1;
 8009260:	4b08      	ldr	r3, [pc, #32]	; (8009284 <LKS_Task+0x84>)
 8009262:	2201      	movs	r2, #1
 8009264:	701a      	strb	r2, [r3, #0]
				// Steer the car to the right
				MotorDriver_voidMoveRight();
 8009266:	f7ff fdc1 	bl	8008dec <MotorDriver_voidMoveRight>
			else
			{/* Nothing */}

		}
		else {/* Nothing */}
		osDelay(1);
 800926a:	2001      	movs	r0, #1
 800926c:	f003 ff12 	bl	800d094 <osDelay>
		if(!AEB_Flag)
 8009270:	e7ca      	b.n	8009208 <LKS_Task+0x8>
 8009272:	bf00      	nop
 8009274:	20000079 	.word	0x20000079
 8009278:	2000007b 	.word	0x2000007b
 800927c:	2000007c 	.word	0x2000007c
 8009280:	20000077 	.word	0x20000077
 8009284:	2000007a 	.word	0x2000007a

08009288 <ALC_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ALC_TASK */
void ALC_TASK(void *argument)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ALC_TASK */
	uint8_t LDR_Value = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{

		/* Read LDR Value */
		LDR_Value = LDR_u8GetValue();
 8009294:	f7ff fd10 	bl	8008cb8 <LDR_u8GetValue>
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]
		if(LDR_Value >= 93)
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b5c      	cmp	r3, #92	; 0x5c
 80092a0:	d904      	bls.n	80092ac <ALC_TASK+0x24>
		{
			/* Head Lead with Max lighting */
			htim4.Instance->CCR1 = 98 ;
 80092a2:	4b12      	ldr	r3, [pc, #72]	; (80092ec <ALC_TASK+0x64>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2262      	movs	r2, #98	; 0x62
 80092a8:	635a      	str	r2, [r3, #52]	; 0x34
 80092aa:	e01b      	b.n	80092e4 <ALC_TASK+0x5c>
		}
		else if(LDR_Value < 93 || LDR_Value >= 80)
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
 80092ae:	2b5c      	cmp	r3, #92	; 0x5c
 80092b0:	d902      	bls.n	80092b8 <ALC_TASK+0x30>
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	2b4f      	cmp	r3, #79	; 0x4f
 80092b6:	d904      	bls.n	80092c2 <ALC_TASK+0x3a>
		{
			/* Head Led with adaptive lighting*/
			htim4.Instance->CCR1 =  (LDR_Value )  ;
 80092b8:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <ALC_TASK+0x64>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	7bfa      	ldrb	r2, [r7, #15]
 80092be:	635a      	str	r2, [r3, #52]	; 0x34
 80092c0:	e010      	b.n	80092e4 <ALC_TASK+0x5c>
		}
		else if(LDR_Value < 80 || LDR_Value > 10)
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	2b4f      	cmp	r3, #79	; 0x4f
 80092c6:	d902      	bls.n	80092ce <ALC_TASK+0x46>
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	2b0a      	cmp	r3, #10
 80092cc:	d906      	bls.n	80092dc <ALC_TASK+0x54>
		{
			/* Head Led with Low lighting */
			htim4.Instance->CCR1 =  (LDR_Value ) / 2 ;
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	085b      	lsrs	r3, r3, #1
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	4b05      	ldr	r3, [pc, #20]	; (80092ec <ALC_TASK+0x64>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	635a      	str	r2, [r3, #52]	; 0x34
 80092da:	e003      	b.n	80092e4 <ALC_TASK+0x5c>
		}
		else
		{
			/* Head Led Off*/
			htim4.Instance->CCR1 =  0 ;
 80092dc:	4b03      	ldr	r3, [pc, #12]	; (80092ec <ALC_TASK+0x64>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2200      	movs	r2, #0
 80092e2:	635a      	str	r2, [r3, #52]	; 0x34
		}
		/* Task will come in every 1 msec */
		osDelay(1);
 80092e4:	2001      	movs	r0, #1
 80092e6:	f003 fed5 	bl	800d094 <osDelay>
		LDR_Value = LDR_u8GetValue();
 80092ea:	e7d3      	b.n	8009294 <ALC_TASK+0xc>
 80092ec:	20000174 	.word	0x20000174

080092f0 <Bluetooth_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Bluetooth_Task */
void Bluetooth_Task(void *argument)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Bluetooth_Task */
	uint8_t Speed = 0 ;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		if(!AEB_Flag && !LKS_Flag)
 80092fc:	4b48      	ldr	r3, [pc, #288]	; (8009420 <Bluetooth_Task+0x130>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 8089 	bne.w	8009418 <Bluetooth_Task+0x128>
 8009306:	4b47      	ldr	r3, [pc, #284]	; (8009424 <Bluetooth_Task+0x134>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f040 8084 	bne.w	8009418 <Bluetooth_Task+0x128>
		{
			if(Current_Distance < 100)
 8009310:	4b45      	ldr	r3, [pc, #276]	; (8009428 <Bluetooth_Task+0x138>)
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	2b63      	cmp	r3, #99	; 0x63
 8009316:	d803      	bhi.n	8009320 <Bluetooth_Task+0x30>
			{
				Speed = (uint8_t)Current_Distance;
 8009318:	4b43      	ldr	r3, [pc, #268]	; (8009428 <Bluetooth_Task+0x138>)
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	73fb      	strb	r3, [r7, #15]
 800931e:	e001      	b.n	8009324 <Bluetooth_Task+0x34>
			}
			else
			{
				Speed = 90 ;
 8009320:	235a      	movs	r3, #90	; 0x5a
 8009322:	73fb      	strb	r3, [r7, #15]
			}
			HAL_StatusTypeDef Status = HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	73bb      	strb	r3, [r7, #14]
			/* Receive from Bluetooth*/
			Status = HAL_UART_Receive(&huart6, &Bluetooth_Value, sizeof(uint8_t), 50);
 8009328:	2332      	movs	r3, #50	; 0x32
 800932a:	2201      	movs	r2, #1
 800932c:	493f      	ldr	r1, [pc, #252]	; (800942c <Bluetooth_Task+0x13c>)
 800932e:	4840      	ldr	r0, [pc, #256]	; (8009430 <Bluetooth_Task+0x140>)
 8009330:	f003 f9c9 	bl	800c6c6 <HAL_UART_Receive>
 8009334:	4603      	mov	r3, r0
 8009336:	73bb      	strb	r3, [r7, #14]
			if(HAL_OK == Status)
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d16c      	bne.n	8009418 <Bluetooth_Task+0x128>
			{
				if(!ACC_Flag)
 800933e:	4b3d      	ldr	r3, [pc, #244]	; (8009434 <Bluetooth_Task+0x144>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d15e      	bne.n	8009404 <Bluetooth_Task+0x114>
				{
					switch(Bluetooth_Value)
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <Bluetooth_Task+0x13c>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	3b42      	subs	r3, #66	; 0x42
 800934c:	2b11      	cmp	r3, #17
 800934e:	d856      	bhi.n	80093fe <Bluetooth_Task+0x10e>
 8009350:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <Bluetooth_Task+0x68>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	080093f7 	.word	0x080093f7
 800935c:	080093ff 	.word	0x080093ff
 8009360:	080093ff 	.word	0x080093ff
 8009364:	080093ff 	.word	0x080093ff
 8009368:	080093af 	.word	0x080093af
 800936c:	080093ff 	.word	0x080093ff
 8009370:	080093ff 	.word	0x080093ff
 8009374:	080093ff 	.word	0x080093ff
 8009378:	080093a1 	.word	0x080093a1
 800937c:	080093ff 	.word	0x080093ff
 8009380:	080093c3 	.word	0x080093c3
 8009384:	080093ff 	.word	0x080093ff
 8009388:	080093ff 	.word	0x080093ff
 800938c:	080093ff 	.word	0x080093ff
 8009390:	080093ff 	.word	0x080093ff
 8009394:	080093ff 	.word	0x080093ff
 8009398:	080093d7 	.word	0x080093d7
 800939c:	080093eb 	.word	0x080093eb
					{
					case 'J' :	/* Bluetooth send 'J' */
						ACC_Flag = 1;
 80093a0:	4b24      	ldr	r3, [pc, #144]	; (8009434 <Bluetooth_Task+0x144>)
 80093a2:	2201      	movs	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]
						Bootloader_Flag = 0;
 80093a6:	4b24      	ldr	r3, [pc, #144]	; (8009438 <Bluetooth_Task+0x148>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	701a      	strb	r2, [r3, #0]
						break;
 80093ac:	e034      	b.n	8009418 <Bluetooth_Task+0x128>
					case 'F' :	/* Bluetooth send 'F' */
						MotorDriver_voidMoveForward();
 80093ae:	f7ff fcff 	bl	8008db0 <MotorDriver_voidMoveForward>
						MotorDriver_voidControlSpeed(Speed);
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fcc3 	bl	8008d40 <MotorDriver_voidControlSpeed>
						Bootloader_Flag = 0;
 80093ba:	4b1f      	ldr	r3, [pc, #124]	; (8009438 <Bluetooth_Task+0x148>)
 80093bc:	2200      	movs	r2, #0
 80093be:	701a      	strb	r2, [r3, #0]
						break;
 80093c0:	e02a      	b.n	8009418 <Bluetooth_Task+0x128>
					case 'L' :	/* Bluetooth send 'L' */
						MotorDriver_voidMoveLeft();
 80093c2:	f7ff fd31 	bl	8008e28 <MotorDriver_voidMoveLeft>
						MotorDriver_voidControlSpeed(Speed);
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fcb9 	bl	8008d40 <MotorDriver_voidControlSpeed>
						Bootloader_Flag = 0;
 80093ce:	4b1a      	ldr	r3, [pc, #104]	; (8009438 <Bluetooth_Task+0x148>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
						break;
 80093d4:	e020      	b.n	8009418 <Bluetooth_Task+0x128>
					case 'R' :	/* Bluetooth send 'R' */
						MotorDriver_voidMoveRight();
 80093d6:	f7ff fd09 	bl	8008dec <MotorDriver_voidMoveRight>
						MotorDriver_voidControlSpeed(Speed);
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fcaf 	bl	8008d40 <MotorDriver_voidControlSpeed>
						Bootloader_Flag = 0;
 80093e2:	4b15      	ldr	r3, [pc, #84]	; (8009438 <Bluetooth_Task+0x148>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	701a      	strb	r2, [r3, #0]
						break;
 80093e8:	e016      	b.n	8009418 <Bluetooth_Task+0x128>
					case 'S' :	/* Bluetooth send 'S' */
						MotorDriver_voidStop();
 80093ea:	f7ff fcc3 	bl	8008d74 <MotorDriver_voidStop>
						Bootloader_Flag = 0;
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <Bluetooth_Task+0x148>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
						break;
 80093f4:	e010      	b.n	8009418 <Bluetooth_Task+0x128>
					case 'B' :	/* Bluetooth send 'B' */
						Bootloader_Flag = 1;
 80093f6:	4b10      	ldr	r3, [pc, #64]	; (8009438 <Bluetooth_Task+0x148>)
 80093f8:	2201      	movs	r2, #1
 80093fa:	701a      	strb	r2, [r3, #0]
						break;
 80093fc:	e00c      	b.n	8009418 <Bluetooth_Task+0x128>
					default :
						Status = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	73bb      	strb	r3, [r7, #14]
						break;
 8009402:	e009      	b.n	8009418 <Bluetooth_Task+0x128>
					}
				}
				else
				{
					/* Bluetooth send 'H' */
					if(Bluetooth_Value == 'H')
 8009404:	4b09      	ldr	r3, [pc, #36]	; (800942c <Bluetooth_Task+0x13c>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b48      	cmp	r3, #72	; 0x48
 800940a:	d105      	bne.n	8009418 <Bluetooth_Task+0x128>
					{
						ACC_Flag = 0;
 800940c:	4b09      	ldr	r3, [pc, #36]	; (8009434 <Bluetooth_Task+0x144>)
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
						Bootloader_Flag = 0;
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <Bluetooth_Task+0x148>)
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]

				}
			}
		}
		/* Task will come in every 1 msec */
		osDelay(1);
 8009418:	2001      	movs	r0, #1
 800941a:	f003 fe3b 	bl	800d094 <osDelay>
		if(!AEB_Flag && !LKS_Flag)
 800941e:	e76d      	b.n	80092fc <Bluetooth_Task+0xc>
 8009420:	20000079 	.word	0x20000079
 8009424:	2000007a 	.word	0x2000007a
 8009428:	20000074 	.word	0x20000074
 800942c:	20000076 	.word	0x20000076
 8009430:	2000024c 	.word	0x2000024c
 8009434:	20000077 	.word	0x20000077
 8009438:	20000078 	.word	0x20000078

0800943c <FOTA_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FOTA_Task */
void FOTA_Task(void *argument)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FOTA_Task */
	uint8_t Fota_Value = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	73fb      	strb	r3, [r7, #15]
	uint8_t RaspberrySendValue = 7;
 8009448:	2307      	movs	r3, #7
 800944a:	73bb      	strb	r3, [r7, #14]
	/* Infinite loop */
	for(;;)
	{
		/* Receive from Raspberry PI*/
		HAL_UART_Receive(&huart1, &Fota_Value, sizeof(uint8_t), 100);
 800944c:	f107 010f 	add.w	r1, r7, #15
 8009450:	2364      	movs	r3, #100	; 0x64
 8009452:	2201      	movs	r2, #1
 8009454:	480f      	ldr	r0, [pc, #60]	; (8009494 <FOTA_Task+0x58>)
 8009456:	f003 f936 	bl	800c6c6 <HAL_UART_Receive>
		//if((Fota_Value == 55) || (Fota_Value == '55') || (Fota_Value == 0x55) || (Fota_Value == '0x55') || (Fota_Value == '7') || (Fota_Value == 7))
		if((Fota_Value == '7') || (Fota_Value == 55))
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	2b37      	cmp	r3, #55	; 0x37
 800945e:	d002      	beq.n	8009466 <FOTA_Task+0x2a>
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b37      	cmp	r3, #55	; 0x37
 8009464:	d112      	bne.n	800948c <FOTA_Task+0x50>
		{
			/* Set the update led */
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8009466:	2201      	movs	r2, #1
 8009468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800946c:	480a      	ldr	r0, [pc, #40]	; (8009498 <FOTA_Task+0x5c>)
 800946e:	f001 fbf3 	bl	800ac58 <HAL_GPIO_WritePin>
			if(1 == Bootloader_Flag)
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <FOTA_Task+0x60>)
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d108      	bne.n	800948c <FOTA_Task+0x50>
			{
				/* Send By Bluetooth (7) to raspberry pi */
				HAL_UART_Transmit(&huart1, &RaspberrySendValue, sizeof(uint8_t), 100);
 800947a:	f107 010e 	add.w	r1, r7, #14
 800947e:	2364      	movs	r3, #100	; 0x64
 8009480:	2201      	movs	r2, #1
 8009482:	4804      	ldr	r0, [pc, #16]	; (8009494 <FOTA_Task+0x58>)
 8009484:	f003 f894 	bl	800c5b0 <HAL_UART_Transmit>
				/* Software Reset to starting the update */
				HAL_NVIC_SystemReset();
 8009488:	f001 fa45 	bl	800a916 <HAL_NVIC_SystemReset>
			}
			else{/*Nothing*/}
		}
		osDelay(1);
 800948c:	2001      	movs	r0, #1
 800948e:	f003 fe01 	bl	800d094 <osDelay>
		HAL_UART_Receive(&huart1, &Fota_Value, sizeof(uint8_t), 100);
 8009492:	e7db      	b.n	800944c <FOTA_Task+0x10>
 8009494:	200001bc 	.word	0x200001bc
 8009498:	40020400 	.word	0x40020400
 800949c:	20000078 	.word	0x20000078

080094a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	605a      	str	r2, [r3, #4]
 80094b0:	609a      	str	r2, [r3, #8]
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60bb      	str	r3, [r7, #8]
 80094ba:	4b30      	ldr	r3, [pc, #192]	; (800957c <MX_GPIO_Init+0xdc>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a2f      	ldr	r2, [pc, #188]	; (800957c <MX_GPIO_Init+0xdc>)
 80094c0:	f043 0301 	orr.w	r3, r3, #1
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b2d      	ldr	r3, [pc, #180]	; (800957c <MX_GPIO_Init+0xdc>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	60bb      	str	r3, [r7, #8]
 80094d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d2:	2300      	movs	r3, #0
 80094d4:	607b      	str	r3, [r7, #4]
 80094d6:	4b29      	ldr	r3, [pc, #164]	; (800957c <MX_GPIO_Init+0xdc>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	4a28      	ldr	r2, [pc, #160]	; (800957c <MX_GPIO_Init+0xdc>)
 80094dc:	f043 0302 	orr.w	r3, r3, #2
 80094e0:	6313      	str	r3, [r2, #48]	; 0x30
 80094e2:	4b26      	ldr	r3, [pc, #152]	; (800957c <MX_GPIO_Init+0xdc>)
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	607b      	str	r3, [r7, #4]
 80094ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80094ee:	2200      	movs	r2, #0
 80094f0:	2102      	movs	r1, #2
 80094f2:	4823      	ldr	r0, [pc, #140]	; (8009580 <MX_GPIO_Init+0xe0>)
 80094f4:	f001 fbb0 	bl	800ac58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Red_Led_Pin|Motor1_2_PIN1_Pin|Motor1_2_PIN2_Pin|Motor3_4_PIN1_Pin
 80094f8:	2200      	movs	r2, #0
 80094fa:	f24f 1104 	movw	r1, #61700	; 0xf104
 80094fe:	4821      	ldr	r0, [pc, #132]	; (8009584 <MX_GPIO_Init+0xe4>)
 8009500:	f001 fbaa 	bl	800ac58 <HAL_GPIO_WritePin>
                          |Motor3_4_PIN2_Pin|Update_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8009504:	2302      	movs	r3, #2
 8009506:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009508:	2301      	movs	r3, #1
 800950a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009510:	2301      	movs	r3, #1
 8009512:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8009514:	f107 030c 	add.w	r3, r7, #12
 8009518:	4619      	mov	r1, r3
 800951a:	4819      	ldr	r0, [pc, #100]	; (8009580 <MX_GPIO_Init+0xe0>)
 800951c:	f001 fa00 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Right_IR_Pin|Left_IR_Pin;
 8009520:	2303      	movs	r3, #3
 8009522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009524:	2300      	movs	r3, #0
 8009526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800952c:	f107 030c 	add.w	r3, r7, #12
 8009530:	4619      	mov	r1, r3
 8009532:	4814      	ldr	r0, [pc, #80]	; (8009584 <MX_GPIO_Init+0xe4>)
 8009534:	f001 f9f4 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Red_Led_Pin|Motor1_2_PIN1_Pin|Motor1_2_PIN2_Pin|Motor3_4_PIN1_Pin
 8009538:	f24f 0304 	movw	r3, #61444	; 0xf004
 800953c:	60fb      	str	r3, [r7, #12]
                          |Motor3_4_PIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800953e:	2301      	movs	r3, #1
 8009540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009542:	2300      	movs	r3, #0
 8009544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009546:	2301      	movs	r3, #1
 8009548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800954a:	f107 030c 	add.w	r3, r7, #12
 800954e:	4619      	mov	r1, r3
 8009550:	480c      	ldr	r0, [pc, #48]	; (8009584 <MX_GPIO_Init+0xe4>)
 8009552:	f001 f9e5 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Update_LED_Pin;
 8009556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800955a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800955c:	2301      	movs	r3, #1
 800955e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009560:	2302      	movs	r3, #2
 8009562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009564:	2301      	movs	r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Update_LED_GPIO_Port, &GPIO_InitStruct);
 8009568:	f107 030c 	add.w	r3, r7, #12
 800956c:	4619      	mov	r1, r3
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <MX_GPIO_Init+0xe4>)
 8009570:	f001 f9d6 	bl	800a920 <HAL_GPIO_Init>

}
 8009574:	bf00      	nop
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	40023800 	.word	0x40023800
 8009580:	40020000 	.word	0x40020000
 8009584:	40020400 	.word	0x40020400

08009588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800958c:	f000 fcda 	bl	8009f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009590:	f000 f824 	bl	80095dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();		/* Gpio Pins Initialize */
 8009594:	f7ff ff84 	bl	80094a0 <MX_GPIO_Init>
  MX_TIM3_Init();		/* Timer3 Pins Initialize */
 8009598:	f000 f9d2 	bl	8009940 <MX_TIM3_Init>
  MX_TIM4_Init();		/* Timer4 Pins Initialize */
 800959c:	f000 fa52 	bl	8009a44 <MX_TIM4_Init>
  MX_USART2_UART_Init();/* UART2 Pins Initialize */
 80095a0:	f000 fba0 	bl	8009ce4 <MX_USART2_UART_Init>
  MX_TIM1_Init();		/* Timer1 Pins Initialize */
 80095a4:	f000 f97c 	bl	80098a0 <MX_TIM1_Init>
  MX_ADC1_Init();		/* ADC1 Pins Initialize */
 80095a8:	f7ff fca2 	bl	8008ef0 <MX_ADC1_Init>
  MX_USART1_UART_Init();/* UART1 Pins Initialize */
 80095ac:	f000 fb70 	bl	8009c90 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();/* UART6 Pins Initialize */
 80095b0:	f000 fbc2 	bl	8009d38 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  MotorDriver_voidInit();	// initialize motors
 80095b4:	f7ff fbb6 	bl	8008d24 <MotorDriver_voidInit>

  /* Start PWM signal on timer 4 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80095b8:	2100      	movs	r1, #0
 80095ba:	4806      	ldr	r0, [pc, #24]	; (80095d4 <main+0x4c>)
 80095bc:	f002 f8fc 	bl	800b7b8 <HAL_TIM_PWM_Start>
  HAL_ADC_MspInit(&hadc1);	//ADC Configurations
 80095c0:	4805      	ldr	r0, [pc, #20]	; (80095d8 <main+0x50>)
 80095c2:	f7ff fce7 	bl	8008f94 <HAL_ADC_MspInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80095c6:	f003 fc89 	bl	800cedc <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80095ca:	f7ff fd27 	bl	800901c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80095ce:	f003 fca9 	bl	800cf24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80095d2:	e7fe      	b.n	80095d2 <main+0x4a>
 80095d4:	20000174 	.word	0x20000174
 80095d8:	2000002c 	.word	0x2000002c

080095dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b094      	sub	sp, #80	; 0x50
 80095e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80095e2:	f107 0320 	add.w	r3, r7, #32
 80095e6:	2230      	movs	r2, #48	; 0x30
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f006 f9c6 	bl	800f97c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80095f0:	f107 030c 	add.w	r3, r7, #12
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	609a      	str	r2, [r3, #8]
 80095fc:	60da      	str	r2, [r3, #12]
 80095fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009600:	2300      	movs	r3, #0
 8009602:	60bb      	str	r3, [r7, #8]
 8009604:	4b28      	ldr	r3, [pc, #160]	; (80096a8 <SystemClock_Config+0xcc>)
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	4a27      	ldr	r2, [pc, #156]	; (80096a8 <SystemClock_Config+0xcc>)
 800960a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800960e:	6413      	str	r3, [r2, #64]	; 0x40
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <SystemClock_Config+0xcc>)
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009618:	60bb      	str	r3, [r7, #8]
 800961a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800961c:	2300      	movs	r3, #0
 800961e:	607b      	str	r3, [r7, #4]
 8009620:	4b22      	ldr	r3, [pc, #136]	; (80096ac <SystemClock_Config+0xd0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009628:	4a20      	ldr	r2, [pc, #128]	; (80096ac <SystemClock_Config+0xd0>)
 800962a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962e:	6013      	str	r3, [r2, #0]
 8009630:	4b1e      	ldr	r3, [pc, #120]	; (80096ac <SystemClock_Config+0xd0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009638:	607b      	str	r3, [r7, #4]
 800963a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800963c:	2302      	movs	r3, #2
 800963e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009640:	2301      	movs	r3, #1
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8009644:	2310      	movs	r3, #16
 8009646:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009648:	2302      	movs	r3, #2
 800964a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800964c:	2300      	movs	r3, #0
 800964e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8009650:	2308      	movs	r3, #8
 8009652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8009654:	2340      	movs	r3, #64	; 0x40
 8009656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009658:	2302      	movs	r3, #2
 800965a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800965c:	2304      	movs	r3, #4
 800965e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009660:	f107 0320 	add.w	r3, r7, #32
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fb11 	bl	800ac8c <HAL_RCC_OscConfig>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009670:	f000 f82d 	bl	80096ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009674:	230f      	movs	r3, #15
 8009676:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009678:	2302      	movs	r3, #2
 800967a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800967c:	2380      	movs	r3, #128	; 0x80
 800967e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009686:	2300      	movs	r3, #0
 8009688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800968a:	f107 030c 	add.w	r3, r7, #12
 800968e:	2101      	movs	r1, #1
 8009690:	4618      	mov	r0, r3
 8009692:	f001 fd73 	bl	800b17c <HAL_RCC_ClockConfig>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800969c:	f000 f817 	bl	80096ce <Error_Handler>
  }
}
 80096a0:	bf00      	nop
 80096a2:	3750      	adds	r7, #80	; 0x50
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	40023800 	.word	0x40023800
 80096ac:	40007000 	.word	0x40007000

080096b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c0:	d101      	bne.n	80096c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80096c2:	f000 fc61 	bl	8009f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80096ce:	b480      	push	{r7}
 80096d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80096d2:	b672      	cpsid	i
}
 80096d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80096d6:	e7fe      	b.n	80096d6 <Error_Handler+0x8>

080096d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <HAL_MspInit+0x60>)
 80096e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096e6:	4a14      	ldr	r2, [pc, #80]	; (8009738 <HAL_MspInit+0x60>)
 80096e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096ec:	6453      	str	r3, [r2, #68]	; 0x44
 80096ee:	4b12      	ldr	r3, [pc, #72]	; (8009738 <HAL_MspInit+0x60>)
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80096fa:	2300      	movs	r3, #0
 80096fc:	603b      	str	r3, [r7, #0]
 80096fe:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <HAL_MspInit+0x60>)
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	4a0d      	ldr	r2, [pc, #52]	; (8009738 <HAL_MspInit+0x60>)
 8009704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009708:	6413      	str	r3, [r2, #64]	; 0x40
 800970a:	4b0b      	ldr	r3, [pc, #44]	; (8009738 <HAL_MspInit+0x60>)
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 5, 0);
 8009716:	2200      	movs	r2, #0
 8009718:	2105      	movs	r1, #5
 800971a:	f06f 0004 	mvn.w	r0, #4
 800971e:	f001 f8d0 	bl	800a8c2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009722:	2200      	movs	r2, #0
 8009724:	210f      	movs	r1, #15
 8009726:	f06f 0001 	mvn.w	r0, #1
 800972a:	f001 f8ca 	bl	800a8c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40023800 	.word	0x40023800

0800973c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08e      	sub	sp, #56	; 0x38
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800974c:	2300      	movs	r3, #0
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	4b34      	ldr	r3, [pc, #208]	; (8009824 <HAL_InitTick+0xe8>)
 8009752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009754:	4a33      	ldr	r2, [pc, #204]	; (8009824 <HAL_InitTick+0xe8>)
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	6413      	str	r3, [r2, #64]	; 0x40
 800975c:	4b31      	ldr	r3, [pc, #196]	; (8009824 <HAL_InitTick+0xe8>)
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009768:	f107 0210 	add.w	r2, r7, #16
 800976c:	f107 0314 	add.w	r3, r7, #20
 8009770:	4611      	mov	r1, r2
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fee2 	bl	800b53c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977e:	2b00      	cmp	r3, #0
 8009780:	d103      	bne.n	800978a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8009782:	f001 feb3 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 8009786:	6378      	str	r0, [r7, #52]	; 0x34
 8009788:	e004      	b.n	8009794 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800978a:	f001 feaf 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 800978e:	4603      	mov	r3, r0
 8009790:	005b      	lsls	r3, r3, #1
 8009792:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009796:	4a24      	ldr	r2, [pc, #144]	; (8009828 <HAL_InitTick+0xec>)
 8009798:	fba2 2303 	umull	r2, r3, r2, r3
 800979c:	0c9b      	lsrs	r3, r3, #18
 800979e:	3b01      	subs	r3, #1
 80097a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80097a2:	4b22      	ldr	r3, [pc, #136]	; (800982c <HAL_InitTick+0xf0>)
 80097a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80097a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80097aa:	4b20      	ldr	r3, [pc, #128]	; (800982c <HAL_InitTick+0xf0>)
 80097ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80097b0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80097b2:	4a1e      	ldr	r2, [pc, #120]	; (800982c <HAL_InitTick+0xf0>)
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80097b8:	4b1c      	ldr	r3, [pc, #112]	; (800982c <HAL_InitTick+0xf0>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097be:	4b1b      	ldr	r3, [pc, #108]	; (800982c <HAL_InitTick+0xf0>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097c4:	4b19      	ldr	r3, [pc, #100]	; (800982c <HAL_InitTick+0xf0>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80097ca:	4818      	ldr	r0, [pc, #96]	; (800982c <HAL_InitTick+0xf0>)
 80097cc:	f001 fee8 	bl	800b5a0 <HAL_TIM_Base_Init>
 80097d0:	4603      	mov	r3, r0
 80097d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80097d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d11b      	bne.n	8009816 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80097de:	4813      	ldr	r0, [pc, #76]	; (800982c <HAL_InitTick+0xf0>)
 80097e0:	f001 ff2e 	bl	800b640 <HAL_TIM_Base_Start_IT>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80097ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d111      	bne.n	8009816 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80097f2:	201c      	movs	r0, #28
 80097f4:	f001 f881 	bl	800a8fa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b0f      	cmp	r3, #15
 80097fc:	d808      	bhi.n	8009810 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80097fe:	2200      	movs	r2, #0
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	201c      	movs	r0, #28
 8009804:	f001 f85d 	bl	800a8c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009808:	4a09      	ldr	r2, [pc, #36]	; (8009830 <HAL_InitTick+0xf4>)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	e002      	b.n	8009816 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8009816:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800981a:	4618      	mov	r0, r3
 800981c:	3738      	adds	r7, #56	; 0x38
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800
 8009828:	431bde83 	.word	0x431bde83
 800982c:	2000009c 	.word	0x2000009c
 8009830:	20000004 	.word	0x20000004

08009834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009838:	e7fe      	b.n	8009838 <NMI_Handler+0x4>

0800983a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800983a:	b480      	push	{r7}
 800983c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800983e:	e7fe      	b.n	800983e <HardFault_Handler+0x4>

08009840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009840:	b480      	push	{r7}
 8009842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009844:	e7fe      	b.n	8009844 <MemManage_Handler+0x4>

08009846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009846:	b480      	push	{r7}
 8009848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800984a:	e7fe      	b.n	800984a <BusFault_Handler+0x4>

0800984c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009850:	e7fe      	b.n	8009850 <UsageFault_Handler+0x4>

08009852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009852:	b480      	push	{r7}
 8009854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009856:	bf00      	nop
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009864:	4802      	ldr	r0, [pc, #8]	; (8009870 <TIM2_IRQHandler+0x10>)
 8009866:	f002 f857 	bl	800b918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800986a:	bf00      	nop
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	2000009c 	.word	0x2000009c

08009874 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009878:	4b07      	ldr	r3, [pc, #28]	; (8009898 <SystemInit+0x24>)
 800987a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987e:	4a06      	ldr	r2, [pc, #24]	; (8009898 <SystemInit+0x24>)
 8009880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | 0x8000 ; /* Vector Table Relocation in Internal FLASH */
 8009888:	4b03      	ldr	r3, [pc, #12]	; (8009898 <SystemInit+0x24>)
 800988a:	4a04      	ldr	r2, [pc, #16]	; (800989c <SystemInit+0x28>)
 800988c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800988e:	bf00      	nop
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	e000ed00 	.word	0xe000ed00
 800989c:	08008000 	.word	0x08008000

080098a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	605a      	str	r2, [r3, #4]
 80098b0:	609a      	str	r2, [r3, #8]
 80098b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098b4:	463b      	mov	r3, r7
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <MX_TIM1_Init+0x98>)
 80098be:	4a1f      	ldr	r2, [pc, #124]	; (800993c <MX_TIM1_Init+0x9c>)
 80098c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6399;
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <MX_TIM1_Init+0x98>)
 80098c4:	f641 02ff 	movw	r2, #6399	; 0x18ff
 80098c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098ca:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <MX_TIM1_Init+0x98>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80098d0:	4b19      	ldr	r3, [pc, #100]	; (8009938 <MX_TIM1_Init+0x98>)
 80098d2:	2263      	movs	r2, #99	; 0x63
 80098d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098d6:	4b18      	ldr	r3, [pc, #96]	; (8009938 <MX_TIM1_Init+0x98>)
 80098d8:	2200      	movs	r2, #0
 80098da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80098dc:	4b16      	ldr	r3, [pc, #88]	; (8009938 <MX_TIM1_Init+0x98>)
 80098de:	2200      	movs	r2, #0
 80098e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098e2:	4b15      	ldr	r3, [pc, #84]	; (8009938 <MX_TIM1_Init+0x98>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80098e8:	4813      	ldr	r0, [pc, #76]	; (8009938 <MX_TIM1_Init+0x98>)
 80098ea:	f001 fe59 	bl	800b5a0 <HAL_TIM_Base_Init>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80098f4:	f7ff feeb 	bl	80096ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80098fe:	f107 0308 	add.w	r3, r7, #8
 8009902:	4619      	mov	r1, r3
 8009904:	480c      	ldr	r0, [pc, #48]	; (8009938 <MX_TIM1_Init+0x98>)
 8009906:	f002 f9b9 	bl	800bc7c <HAL_TIM_ConfigClockSource>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8009910:	f7ff fedd 	bl	80096ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009918:	2300      	movs	r3, #0
 800991a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800991c:	463b      	mov	r3, r7
 800991e:	4619      	mov	r1, r3
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <MX_TIM1_Init+0x98>)
 8009922:	f002 fd73 	bl	800c40c <HAL_TIMEx_MasterConfigSynchronization>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800992c:	f7ff fecf 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009930:	bf00      	nop
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	200000e4 	.word	0x200000e4
 800993c:	40010000 	.word	0x40010000

08009940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800994a:	2200      	movs	r2, #0
 800994c:	601a      	str	r2, [r3, #0]
 800994e:	605a      	str	r2, [r3, #4]
 8009950:	609a      	str	r2, [r3, #8]
 8009952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009954:	f107 0320 	add.w	r3, r7, #32
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800995e:	1d3b      	adds	r3, r7, #4
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	605a      	str	r2, [r3, #4]
 8009966:	609a      	str	r2, [r3, #8]
 8009968:	60da      	str	r2, [r3, #12]
 800996a:	611a      	str	r2, [r3, #16]
 800996c:	615a      	str	r2, [r3, #20]
 800996e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009970:	4b32      	ldr	r3, [pc, #200]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009972:	4a33      	ldr	r2, [pc, #204]	; (8009a40 <MX_TIM3_Init+0x100>)
 8009974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6399;
 8009976:	4b31      	ldr	r3, [pc, #196]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009978:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800997c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800997e:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009980:	2200      	movs	r2, #0
 8009982:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8009984:	4b2d      	ldr	r3, [pc, #180]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009986:	2263      	movs	r2, #99	; 0x63
 8009988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800998a:	4b2c      	ldr	r3, [pc, #176]	; (8009a3c <MX_TIM3_Init+0xfc>)
 800998c:	2200      	movs	r2, #0
 800998e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009990:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009992:	2200      	movs	r2, #0
 8009994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009996:	4829      	ldr	r0, [pc, #164]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009998:	f001 fe02 	bl	800b5a0 <HAL_TIM_Base_Init>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80099a2:	f7ff fe94 	bl	80096ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80099ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80099b0:	4619      	mov	r1, r3
 80099b2:	4822      	ldr	r0, [pc, #136]	; (8009a3c <MX_TIM3_Init+0xfc>)
 80099b4:	f002 f962 	bl	800bc7c <HAL_TIM_ConfigClockSource>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80099be:	f7ff fe86 	bl	80096ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80099c2:	481e      	ldr	r0, [pc, #120]	; (8009a3c <MX_TIM3_Init+0xfc>)
 80099c4:	f001 fe9e 	bl	800b704 <HAL_TIM_PWM_Init>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80099ce:	f7ff fe7e 	bl	80096ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099d2:	2300      	movs	r3, #0
 80099d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80099da:	f107 0320 	add.w	r3, r7, #32
 80099de:	4619      	mov	r1, r3
 80099e0:	4816      	ldr	r0, [pc, #88]	; (8009a3c <MX_TIM3_Init+0xfc>)
 80099e2:	f002 fd13 	bl	800c40c <HAL_TIMEx_MasterConfigSynchronization>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80099ec:	f7ff fe6f 	bl	80096ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80099f0:	2360      	movs	r3, #96	; 0x60
 80099f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80099f8:	2302      	movs	r3, #2
 80099fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a00:	1d3b      	adds	r3, r7, #4
 8009a02:	2200      	movs	r2, #0
 8009a04:	4619      	mov	r1, r3
 8009a06:	480d      	ldr	r0, [pc, #52]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009a08:	f002 f876 	bl	800baf8 <HAL_TIM_PWM_ConfigChannel>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8009a12:	f7ff fe5c 	bl	80096ce <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a16:	1d3b      	adds	r3, r7, #4
 8009a18:	2204      	movs	r2, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4807      	ldr	r0, [pc, #28]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009a1e:	f002 f86b 	bl	800baf8 <HAL_TIM_PWM_ConfigChannel>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8009a28:	f7ff fe51 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009a2c:	4803      	ldr	r0, [pc, #12]	; (8009a3c <MX_TIM3_Init+0xfc>)
 8009a2e:	f000 f8cd 	bl	8009bcc <HAL_TIM_MspPostInit>

}
 8009a32:	bf00      	nop
 8009a34:	3738      	adds	r7, #56	; 0x38
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000012c 	.word	0x2000012c
 8009a40:	40000400 	.word	0x40000400

08009a44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08e      	sub	sp, #56	; 0x38
 8009a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a4e:	2200      	movs	r2, #0
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	605a      	str	r2, [r3, #4]
 8009a54:	609a      	str	r2, [r3, #8]
 8009a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a58:	f107 0320 	add.w	r3, r7, #32
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a62:	1d3b      	adds	r3, r7, #4
 8009a64:	2200      	movs	r2, #0
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	609a      	str	r2, [r3, #8]
 8009a6c:	60da      	str	r2, [r3, #12]
 8009a6e:	611a      	str	r2, [r3, #16]
 8009a70:	615a      	str	r2, [r3, #20]
 8009a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009a74:	4b2c      	ldr	r3, [pc, #176]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a76:	4a2d      	ldr	r2, [pc, #180]	; (8009b2c <MX_TIM4_Init+0xe8>)
 8009a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6399;
 8009a7a:	4b2b      	ldr	r3, [pc, #172]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a7c:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8009a80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a82:	4b29      	ldr	r3, [pc, #164]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8009a88:	4b27      	ldr	r3, [pc, #156]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a8a:	2263      	movs	r2, #99	; 0x63
 8009a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a8e:	4b26      	ldr	r3, [pc, #152]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a90:	2200      	movs	r2, #0
 8009a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a94:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009a9a:	4823      	ldr	r0, [pc, #140]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009a9c:	f001 fd80 	bl	800b5a0 <HAL_TIM_Base_Init>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8009aa6:	f7ff fe12 	bl	80096ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009ab0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	481c      	ldr	r0, [pc, #112]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009ab8:	f002 f8e0 	bl	800bc7c <HAL_TIM_ConfigClockSource>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8009ac2:	f7ff fe04 	bl	80096ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009ac6:	4818      	ldr	r0, [pc, #96]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009ac8:	f001 fe1c 	bl	800b704 <HAL_TIM_PWM_Init>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8009ad2:	f7ff fdfc 	bl	80096ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ada:	2300      	movs	r3, #0
 8009adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009ade:	f107 0320 	add.w	r3, r7, #32
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4810      	ldr	r0, [pc, #64]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009ae6:	f002 fc91 	bl	800c40c <HAL_TIMEx_MasterConfigSynchronization>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8009af0:	f7ff fded 	bl	80096ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009af4:	2360      	movs	r3, #96	; 0x60
 8009af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8009afc:	2302      	movs	r3, #2
 8009afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b04:	1d3b      	adds	r3, r7, #4
 8009b06:	2200      	movs	r2, #0
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4807      	ldr	r0, [pc, #28]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009b0c:	f001 fff4 	bl	800baf8 <HAL_TIM_PWM_ConfigChannel>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8009b16:	f7ff fdda 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009b1a:	4803      	ldr	r0, [pc, #12]	; (8009b28 <MX_TIM4_Init+0xe4>)
 8009b1c:	f000 f856 	bl	8009bcc <HAL_TIM_MspPostInit>

}
 8009b20:	bf00      	nop
 8009b22:	3738      	adds	r7, #56	; 0x38
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20000174 	.word	0x20000174
 8009b2c:	40000800 	.word	0x40000800

08009b30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a1f      	ldr	r2, [pc, #124]	; (8009bbc <HAL_TIM_Base_MspInit+0x8c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d10e      	bne.n	8009b60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	4b1e      	ldr	r3, [pc, #120]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	6453      	str	r3, [r2, #68]	; 0x44
 8009b52:	4b1b      	ldr	r3, [pc, #108]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009b5e:	e026      	b.n	8009bae <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a17      	ldr	r2, [pc, #92]	; (8009bc4 <HAL_TIM_Base_MspInit+0x94>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d10e      	bne.n	8009b88 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	4b14      	ldr	r3, [pc, #80]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	4a13      	ldr	r2, [pc, #76]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b74:	f043 0302 	orr.w	r3, r3, #2
 8009b78:	6413      	str	r3, [r2, #64]	; 0x40
 8009b7a:	4b11      	ldr	r3, [pc, #68]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	613b      	str	r3, [r7, #16]
 8009b84:	693b      	ldr	r3, [r7, #16]
}
 8009b86:	e012      	b.n	8009bae <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a0e      	ldr	r2, [pc, #56]	; (8009bc8 <HAL_TIM_Base_MspInit+0x98>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10d      	bne.n	8009bae <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009b9c:	f043 0304 	orr.w	r3, r3, #4
 8009ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <HAL_TIM_Base_MspInit+0x90>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f003 0304 	and.w	r3, r3, #4
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	40010000 	.word	0x40010000
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	40000400 	.word	0x40000400
 8009bc8:	40000800 	.word	0x40000800

08009bcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08a      	sub	sp, #40	; 0x28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009bd4:	f107 0314 	add.w	r3, r7, #20
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	609a      	str	r2, [r3, #8]
 8009be0:	60da      	str	r2, [r3, #12]
 8009be2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a24      	ldr	r2, [pc, #144]	; (8009c7c <HAL_TIM_MspPostInit+0xb0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d11e      	bne.n	8009c2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bee:	2300      	movs	r3, #0
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	4b23      	ldr	r3, [pc, #140]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	4a22      	ldr	r2, [pc, #136]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8009bfe:	4b20      	ldr	r3, [pc, #128]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Motor_PWM1_Pin|Motor_PWM2_Pin;
 8009c0a:	23c0      	movs	r3, #192	; 0xc0
 8009c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c12:	2300      	movs	r3, #0
 8009c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c16:	2300      	movs	r3, #0
 8009c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c1e:	f107 0314 	add.w	r3, r7, #20
 8009c22:	4619      	mov	r1, r3
 8009c24:	4817      	ldr	r0, [pc, #92]	; (8009c84 <HAL_TIM_MspPostInit+0xb8>)
 8009c26:	f000 fe7b 	bl	800a920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8009c2a:	e022      	b.n	8009c72 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM4)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <HAL_TIM_MspPostInit+0xbc>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d11d      	bne.n	8009c72 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c36:	2300      	movs	r3, #0
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	4b11      	ldr	r3, [pc, #68]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c3e:	4a10      	ldr	r2, [pc, #64]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009c40:	f043 0302 	orr.w	r3, r3, #2
 8009c44:	6313      	str	r3, [r2, #48]	; 0x30
 8009c46:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <HAL_TIM_MspPostInit+0xb4>)
 8009c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Head_Led_Pin;
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c56:	2302      	movs	r3, #2
 8009c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009c62:	2302      	movs	r3, #2
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Head_Led_GPIO_Port, &GPIO_InitStruct);
 8009c66:	f107 0314 	add.w	r3, r7, #20
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4807      	ldr	r0, [pc, #28]	; (8009c8c <HAL_TIM_MspPostInit+0xc0>)
 8009c6e:	f000 fe57 	bl	800a920 <HAL_GPIO_Init>
}
 8009c72:	bf00      	nop
 8009c74:	3728      	adds	r7, #40	; 0x28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	40000400 	.word	0x40000400
 8009c80:	40023800 	.word	0x40023800
 8009c84:	40020000 	.word	0x40020000
 8009c88:	40000800 	.word	0x40000800
 8009c8c:	40020400 	.word	0x40020400

08009c90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009c94:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009c96:	4a12      	ldr	r2, [pc, #72]	; (8009ce0 <MX_USART1_UART_Init+0x50>)
 8009c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009c9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009cae:	4b0b      	ldr	r3, [pc, #44]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009cb4:	4b09      	ldr	r3, [pc, #36]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009cb6:	220c      	movs	r2, #12
 8009cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009cba:	4b08      	ldr	r3, [pc, #32]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009cc6:	4805      	ldr	r0, [pc, #20]	; (8009cdc <MX_USART1_UART_Init+0x4c>)
 8009cc8:	f002 fc22 	bl	800c510 <HAL_UART_Init>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009cd2:	f7ff fcfc 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009cd6:	bf00      	nop
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200001bc 	.word	0x200001bc
 8009ce0:	40011000 	.word	0x40011000

08009ce4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009cea:	4a12      	ldr	r2, [pc, #72]	; (8009d34 <MX_USART2_UART_Init+0x50>)
 8009cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009cf0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009cfc:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009d02:	4b0b      	ldr	r3, [pc, #44]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009d08:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009d0a:	220c      	movs	r2, #12
 8009d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d0e:	4b08      	ldr	r3, [pc, #32]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009d1a:	4805      	ldr	r0, [pc, #20]	; (8009d30 <MX_USART2_UART_Init+0x4c>)
 8009d1c:	f002 fbf8 	bl	800c510 <HAL_UART_Init>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009d26:	f7ff fcd2 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009d2a:	bf00      	nop
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000204 	.word	0x20000204
 8009d34:	40004400 	.word	0x40004400

08009d38 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009d3c:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d3e:	4a12      	ldr	r2, [pc, #72]	; (8009d88 <MX_USART6_UART_Init+0x50>)
 8009d40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d44:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009d48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009d4a:	4b0e      	ldr	r3, [pc, #56]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009d50:	4b0c      	ldr	r3, [pc, #48]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d5e:	220c      	movs	r2, #12
 8009d60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d68:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009d6e:	4805      	ldr	r0, [pc, #20]	; (8009d84 <MX_USART6_UART_Init+0x4c>)
 8009d70:	f002 fbce 	bl	800c510 <HAL_UART_Init>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8009d7a:	f7ff fca8 	bl	80096ce <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009d7e:	bf00      	nop
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	2000024c 	.word	0x2000024c
 8009d88:	40011400 	.word	0x40011400

08009d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08e      	sub	sp, #56	; 0x38
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	605a      	str	r2, [r3, #4]
 8009d9e:	609a      	str	r2, [r3, #8]
 8009da0:	60da      	str	r2, [r3, #12]
 8009da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a4c      	ldr	r2, [pc, #304]	; (8009edc <HAL_UART_MspInit+0x150>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d12d      	bne.n	8009e0a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009dae:	2300      	movs	r3, #0
 8009db0:	623b      	str	r3, [r7, #32]
 8009db2:	4b4b      	ldr	r3, [pc, #300]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db6:	4a4a      	ldr	r2, [pc, #296]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009db8:	f043 0310 	orr.w	r3, r3, #16
 8009dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8009dbe:	4b48      	ldr	r3, [pc, #288]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc2:	f003 0310 	and.w	r3, r3, #16
 8009dc6:	623b      	str	r3, [r7, #32]
 8009dc8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61fb      	str	r3, [r7, #28]
 8009dce:	4b44      	ldr	r3, [pc, #272]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd2:	4a43      	ldr	r2, [pc, #268]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009dd4:	f043 0301 	orr.w	r3, r3, #1
 8009dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dda:	4b41      	ldr	r3, [pc, #260]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	61fb      	str	r3, [r7, #28]
 8009de4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Raspberry_TX_Pin|Raspberry_RX_Pin;
 8009de6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dec:	2302      	movs	r3, #2
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df0:	2300      	movs	r3, #0
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009df4:	2303      	movs	r3, #3
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009df8:	2307      	movs	r3, #7
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e00:	4619      	mov	r1, r3
 8009e02:	4838      	ldr	r0, [pc, #224]	; (8009ee4 <HAL_UART_MspInit+0x158>)
 8009e04:	f000 fd8c 	bl	800a920 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8009e08:	e063      	b.n	8009ed2 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a36      	ldr	r2, [pc, #216]	; (8009ee8 <HAL_UART_MspInit+0x15c>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d12c      	bne.n	8009e6e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009e14:	2300      	movs	r3, #0
 8009e16:	61bb      	str	r3, [r7, #24]
 8009e18:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	4a30      	ldr	r2, [pc, #192]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e22:	6413      	str	r3, [r2, #64]	; 0x40
 8009e24:	4b2e      	ldr	r3, [pc, #184]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e2c:	61bb      	str	r3, [r7, #24]
 8009e2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	4b2a      	ldr	r3, [pc, #168]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e38:	4a29      	ldr	r2, [pc, #164]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e3a:	f043 0301 	orr.w	r3, r3, #1
 8009e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8009e40:	4b27      	ldr	r3, [pc, #156]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Ultrasonic_TX_Pin|Ultrasonix_RX_Pin;
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e50:	2302      	movs	r3, #2
 8009e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009e5c:	2307      	movs	r3, #7
 8009e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e64:	4619      	mov	r1, r3
 8009e66:	481f      	ldr	r0, [pc, #124]	; (8009ee4 <HAL_UART_MspInit+0x158>)
 8009e68:	f000 fd5a 	bl	800a920 <HAL_GPIO_Init>
}
 8009e6c:	e031      	b.n	8009ed2 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART6)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1e      	ldr	r2, [pc, #120]	; (8009eec <HAL_UART_MspInit+0x160>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d12c      	bne.n	8009ed2 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	4b18      	ldr	r3, [pc, #96]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e80:	4a17      	ldr	r2, [pc, #92]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e82:	f043 0320 	orr.w	r3, r3, #32
 8009e86:	6453      	str	r3, [r2, #68]	; 0x44
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	613b      	str	r3, [r7, #16]
 8009e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	4b11      	ldr	r3, [pc, #68]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9c:	4a10      	ldr	r2, [pc, #64]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009e9e:	f043 0301 	orr.w	r3, r3, #1
 8009ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	; (8009ee0 <HAL_UART_MspInit+0x154>)
 8009ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea8:	f003 0301 	and.w	r3, r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8009eb0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4805      	ldr	r0, [pc, #20]	; (8009ee4 <HAL_UART_MspInit+0x158>)
 8009ece:	f000 fd27 	bl	800a920 <HAL_GPIO_Init>
}
 8009ed2:	bf00      	nop
 8009ed4:	3738      	adds	r7, #56	; 0x38
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	40011000 	.word	0x40011000
 8009ee0:	40023800 	.word	0x40023800
 8009ee4:	40020000 	.word	0x40020000
 8009ee8:	40004400 	.word	0x40004400
 8009eec:	40011400 	.word	0x40011400

08009ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009ef0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009f28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8009ef4:	f7ff fcbe 	bl	8009874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009ef8:	480c      	ldr	r0, [pc, #48]	; (8009f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009efa:	490d      	ldr	r1, [pc, #52]	; (8009f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009efc:	4a0d      	ldr	r2, [pc, #52]	; (8009f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009f00:	e002      	b.n	8009f08 <LoopCopyDataInit>

08009f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009f06:	3304      	adds	r3, #4

08009f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009f0c:	d3f9      	bcc.n	8009f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009f0e:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009f10:	4c0a      	ldr	r4, [pc, #40]	; (8009f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8009f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009f14:	e001      	b.n	8009f1a <LoopFillZerobss>

08009f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009f18:	3204      	adds	r2, #4

08009f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009f1c:	d3fb      	bcc.n	8009f16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009f1e:	f005 fd35 	bl	800f98c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009f22:	f7ff fb31 	bl	8009588 <main>
  bx  lr    
 8009f26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009f28:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009f30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8009f34:	0800fb50 	.word	0x0800fb50
  ldr r2, =_sbss
 8009f38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8009f3c:	20004be8 	.word	0x20004be8

08009f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009f40:	e7fe      	b.n	8009f40 <ADC_IRQHandler>
	...

08009f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009f48:	4b0e      	ldr	r3, [pc, #56]	; (8009f84 <HAL_Init+0x40>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a0d      	ldr	r2, [pc, #52]	; (8009f84 <HAL_Init+0x40>)
 8009f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009f54:	4b0b      	ldr	r3, [pc, #44]	; (8009f84 <HAL_Init+0x40>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a0a      	ldr	r2, [pc, #40]	; (8009f84 <HAL_Init+0x40>)
 8009f5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009f60:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <HAL_Init+0x40>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a07      	ldr	r2, [pc, #28]	; (8009f84 <HAL_Init+0x40>)
 8009f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009f6c:	2003      	movs	r0, #3
 8009f6e:	f000 fc9d 	bl	800a8ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009f72:	200f      	movs	r0, #15
 8009f74:	f7ff fbe2 	bl	800973c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009f78:	f7ff fbae 	bl	80096d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	40023c00 	.word	0x40023c00

08009f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <HAL_IncTick+0x20>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	4b06      	ldr	r3, [pc, #24]	; (8009fac <HAL_IncTick+0x24>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	4a04      	ldr	r2, [pc, #16]	; (8009fac <HAL_IncTick+0x24>)
 8009f9a:	6013      	str	r3, [r2, #0]
}
 8009f9c:	bf00      	nop
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20000008 	.word	0x20000008
 8009fac:	20000294 	.word	0x20000294

08009fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8009fb4:	4b03      	ldr	r3, [pc, #12]	; (8009fc4 <HAL_GetTick+0x14>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000294 	.word	0x20000294

08009fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e033      	b.n	800a046 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d109      	bne.n	8009ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7fe ffd4 	bl	8008f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	f003 0310 	and.w	r3, r3, #16
 800a002:	2b00      	cmp	r3, #0
 800a004:	d118      	bne.n	800a038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a00e:	f023 0302 	bic.w	r3, r3, #2
 800a012:	f043 0202 	orr.w	r2, r3, #2
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa86 	bl	800a52c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	f043 0201 	orr.w	r2, r3, #1
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	641a      	str	r2, [r3, #64]	; 0x40
 800a036:	e001      	b.n	800a03c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a062:	2b01      	cmp	r3, #1
 800a064:	d101      	bne.n	800a06a <HAL_ADC_Start+0x1a>
 800a066:	2302      	movs	r3, #2
 800a068:	e097      	b.n	800a19a <HAL_ADC_Start+0x14a>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d018      	beq.n	800a0b2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a090:	4b45      	ldr	r3, [pc, #276]	; (800a1a8 <HAL_ADC_Start+0x158>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a45      	ldr	r2, [pc, #276]	; (800a1ac <HAL_ADC_Start+0x15c>)
 800a096:	fba2 2303 	umull	r2, r3, r2, r3
 800a09a:	0c9a      	lsrs	r2, r3, #18
 800a09c:	4613      	mov	r3, r2
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a0a4:	e002      	b.n	800a0ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3b01      	subs	r3, #1
 800a0aa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f9      	bne.n	800a0a6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d15f      	bne.n	800a180 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a0c8:	f023 0301 	bic.w	r3, r3, #1
 800a0cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a0ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0fe:	d106      	bne.n	800a10e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a104:	f023 0206 	bic.w	r2, r3, #6
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	645a      	str	r2, [r3, #68]	; 0x44
 800a10c:	e002      	b.n	800a114 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a11c:	4b24      	ldr	r3, [pc, #144]	; (800a1b0 <HAL_ADC_Start+0x160>)
 800a11e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a128:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10f      	bne.n	800a156 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d129      	bne.n	800a198 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a152:	609a      	str	r2, [r3, #8]
 800a154:	e020      	b.n	800a198 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a16      	ldr	r2, [pc, #88]	; (800a1b4 <HAL_ADC_Start+0x164>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d11b      	bne.n	800a198 <HAL_ADC_Start+0x148>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d114      	bne.n	800a198 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689a      	ldr	r2, [r3, #8]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a17c:	609a      	str	r2, [r3, #8]
 800a17e:	e00b      	b.n	800a198 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a184:	f043 0210 	orr.w	r2, r3, #16
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a190:	f043 0201 	orr.w	r2, r3, #1
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000000 	.word	0x20000000
 800a1ac:	431bde83 	.word	0x431bde83
 800a1b0:	40012300 	.word	0x40012300
 800a1b4:	40012000 	.word	0x40012000

0800a1b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1d4:	d113      	bne.n	800a1fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800a1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1e4:	d10b      	bne.n	800a1fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	f043 0220 	orr.w	r2, r3, #32
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e063      	b.n	800a2c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800a1fe:	f7ff fed7 	bl	8009fb0 <HAL_GetTick>
 800a202:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a204:	e021      	b.n	800a24a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20c:	d01d      	beq.n	800a24a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_ADC_PollForConversion+0x6c>
 800a214:	f7ff fecc 	bl	8009fb0 <HAL_GetTick>
 800a218:	4602      	mov	r2, r0
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d212      	bcs.n	800a24a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0302 	and.w	r3, r3, #2
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d00b      	beq.n	800a24a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a236:	f043 0204 	orr.w	r2, r3, #4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e03d      	b.n	800a2c6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 0302 	and.w	r3, r3, #2
 800a254:	2b02      	cmp	r3, #2
 800a256:	d1d6      	bne.n	800a206 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f06f 0212 	mvn.w	r2, #18
 800a260:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d123      	bne.n	800a2c4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11f      	bne.n	800a2c4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d006      	beq.n	800a2a0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d111      	bne.n	800a2c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d105      	bne.n	800a2c4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2bc:	f043 0201 	orr.w	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <HAL_ADC_ConfigChannel+0x1c>
 800a300:	2302      	movs	r3, #2
 800a302:	e105      	b.n	800a510 <HAL_ADC_ConfigChannel+0x228>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b09      	cmp	r3, #9
 800a312:	d925      	bls.n	800a360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68d9      	ldr	r1, [r3, #12]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	461a      	mov	r2, r3
 800a322:	4613      	mov	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	4413      	add	r3, r2
 800a328:	3b1e      	subs	r3, #30
 800a32a:	2207      	movs	r2, #7
 800a32c:	fa02 f303 	lsl.w	r3, r2, r3
 800a330:	43da      	mvns	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	400a      	ands	r2, r1
 800a338:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68d9      	ldr	r1, [r3, #12]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4618      	mov	r0, r3
 800a34c:	4603      	mov	r3, r0
 800a34e:	005b      	lsls	r3, r3, #1
 800a350:	4403      	add	r3, r0
 800a352:	3b1e      	subs	r3, #30
 800a354:	409a      	lsls	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	60da      	str	r2, [r3, #12]
 800a35e:	e022      	b.n	800a3a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6919      	ldr	r1, [r3, #16]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	461a      	mov	r2, r3
 800a36e:	4613      	mov	r3, r2
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	4413      	add	r3, r2
 800a374:	2207      	movs	r2, #7
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	43da      	mvns	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	400a      	ands	r2, r1
 800a382:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6919      	ldr	r1, [r3, #16]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	689a      	ldr	r2, [r3, #8]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	4618      	mov	r0, r3
 800a396:	4603      	mov	r3, r0
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	4403      	add	r3, r0
 800a39c:	409a      	lsls	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	430a      	orrs	r2, r1
 800a3a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	2b06      	cmp	r3, #6
 800a3ac:	d824      	bhi.n	800a3f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	4413      	add	r3, r2
 800a3be:	3b05      	subs	r3, #5
 800a3c0:	221f      	movs	r2, #31
 800a3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c6:	43da      	mvns	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	400a      	ands	r2, r1
 800a3ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	4618      	mov	r0, r3
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3b05      	subs	r3, #5
 800a3ea:	fa00 f203 	lsl.w	r2, r0, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	635a      	str	r2, [r3, #52]	; 0x34
 800a3f6:	e04c      	b.n	800a492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b0c      	cmp	r3, #12
 800a3fe:	d824      	bhi.n	800a44a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	4613      	mov	r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	4413      	add	r3, r2
 800a410:	3b23      	subs	r3, #35	; 0x23
 800a412:	221f      	movs	r2, #31
 800a414:	fa02 f303 	lsl.w	r3, r2, r3
 800a418:	43da      	mvns	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	400a      	ands	r2, r1
 800a420:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4618      	mov	r0, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	685a      	ldr	r2, [r3, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	009b      	lsls	r3, r3, #2
 800a438:	4413      	add	r3, r2
 800a43a:	3b23      	subs	r3, #35	; 0x23
 800a43c:	fa00 f203 	lsl.w	r2, r0, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	631a      	str	r2, [r3, #48]	; 0x30
 800a448:	e023      	b.n	800a492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	3b41      	subs	r3, #65	; 0x41
 800a45c:	221f      	movs	r2, #31
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	43da      	mvns	r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	400a      	ands	r2, r1
 800a46a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	b29b      	uxth	r3, r3
 800a478:	4618      	mov	r0, r3
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685a      	ldr	r2, [r3, #4]
 800a47e:	4613      	mov	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4413      	add	r3, r2
 800a484:	3b41      	subs	r3, #65	; 0x41
 800a486:	fa00 f203 	lsl.w	r2, r0, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a492:	4b22      	ldr	r3, [pc, #136]	; (800a51c <HAL_ADC_ConfigChannel+0x234>)
 800a494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a21      	ldr	r2, [pc, #132]	; (800a520 <HAL_ADC_ConfigChannel+0x238>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d109      	bne.n	800a4b4 <HAL_ADC_ConfigChannel+0x1cc>
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b12      	cmp	r3, #18
 800a4a6:	d105      	bne.n	800a4b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a19      	ldr	r2, [pc, #100]	; (800a520 <HAL_ADC_ConfigChannel+0x238>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d123      	bne.n	800a506 <HAL_ADC_ConfigChannel+0x21e>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b10      	cmp	r3, #16
 800a4c4:	d003      	beq.n	800a4ce <HAL_ADC_ConfigChannel+0x1e6>
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b11      	cmp	r3, #17
 800a4cc:	d11b      	bne.n	800a506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2b10      	cmp	r3, #16
 800a4e0:	d111      	bne.n	800a506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a4e2:	4b10      	ldr	r3, [pc, #64]	; (800a524 <HAL_ADC_ConfigChannel+0x23c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a10      	ldr	r2, [pc, #64]	; (800a528 <HAL_ADC_ConfigChannel+0x240>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	0c9a      	lsrs	r2, r3, #18
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a4f8:	e002      	b.n	800a500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f9      	bne.n	800a4fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3714      	adds	r7, #20
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	40012300 	.word	0x40012300
 800a520:	40012000 	.word	0x40012000
 800a524:	20000000 	.word	0x20000000
 800a528:	431bde83 	.word	0x431bde83

0800a52c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a534:	4b79      	ldr	r3, [pc, #484]	; (800a71c <ADC_Init+0x1f0>)
 800a536:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	431a      	orrs	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6859      	ldr	r1, [r3, #4]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	021a      	lsls	r2, r3, #8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6859      	ldr	r1, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	6899      	ldr	r1, [r3, #8]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	4a58      	ldr	r2, [pc, #352]	; (800a720 <ADC_Init+0x1f4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d022      	beq.n	800a60a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689a      	ldr	r2, [r3, #8]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a5d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6899      	ldr	r1, [r3, #8]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	430a      	orrs	r2, r1
 800a5e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a5f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6899      	ldr	r1, [r3, #8]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	609a      	str	r2, [r3, #8]
 800a608:	e00f      	b.n	800a62a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a628:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	689a      	ldr	r2, [r3, #8]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0202 	bic.w	r2, r2, #2
 800a638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6899      	ldr	r1, [r3, #8]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	7e1b      	ldrb	r3, [r3, #24]
 800a644:	005a      	lsls	r2, r3, #1
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d01b      	beq.n	800a690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a666:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6859      	ldr	r1, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	3b01      	subs	r3, #1
 800a684:	035a      	lsls	r2, r3, #13
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
 800a68e:	e007      	b.n	800a6a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a69e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	051a      	lsls	r2, r3, #20
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a6d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6899      	ldr	r1, [r3, #8]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a6e2:	025a      	lsls	r2, r3, #9
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6899      	ldr	r1, [r3, #8]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	029a      	lsls	r2, r3, #10
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	430a      	orrs	r2, r1
 800a70e:	609a      	str	r2, [r3, #8]
}
 800a710:	bf00      	nop
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40012300 	.word	0x40012300
 800a720:	0f000001 	.word	0x0f000001

0800a724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a734:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <__NVIC_SetPriorityGrouping+0x44>)
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a740:	4013      	ands	r3, r2
 800a742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a74c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a756:	4a04      	ldr	r2, [pc, #16]	; (800a768 <__NVIC_SetPriorityGrouping+0x44>)
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	60d3      	str	r3, [r2, #12]
}
 800a75c:	bf00      	nop
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	e000ed00 	.word	0xe000ed00

0800a76c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a770:	4b04      	ldr	r3, [pc, #16]	; (800a784 <__NVIC_GetPriorityGrouping+0x18>)
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	0a1b      	lsrs	r3, r3, #8
 800a776:	f003 0307 	and.w	r3, r3, #7
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	e000ed00 	.word	0xe000ed00

0800a788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a796:	2b00      	cmp	r3, #0
 800a798:	db0b      	blt.n	800a7b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a79a:	79fb      	ldrb	r3, [r7, #7]
 800a79c:	f003 021f 	and.w	r2, r3, #31
 800a7a0:	4907      	ldr	r1, [pc, #28]	; (800a7c0 <__NVIC_EnableIRQ+0x38>)
 800a7a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7a6:	095b      	lsrs	r3, r3, #5
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	fa00 f202 	lsl.w	r2, r0, r2
 800a7ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	e000e100 	.word	0xe000e100

0800a7c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6039      	str	r1, [r7, #0]
 800a7ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	db0a      	blt.n	800a7ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	490c      	ldr	r1, [pc, #48]	; (800a810 <__NVIC_SetPriority+0x4c>)
 800a7de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7e2:	0112      	lsls	r2, r2, #4
 800a7e4:	b2d2      	uxtb	r2, r2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a7ec:	e00a      	b.n	800a804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	4908      	ldr	r1, [pc, #32]	; (800a814 <__NVIC_SetPriority+0x50>)
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	3b04      	subs	r3, #4
 800a7fc:	0112      	lsls	r2, r2, #4
 800a7fe:	b2d2      	uxtb	r2, r2
 800a800:	440b      	add	r3, r1
 800a802:	761a      	strb	r2, [r3, #24]
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr
 800a810:	e000e100 	.word	0xe000e100
 800a814:	e000ed00 	.word	0xe000ed00

0800a818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a818:	b480      	push	{r7}
 800a81a:	b089      	sub	sp, #36	; 0x24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f1c3 0307 	rsb	r3, r3, #7
 800a832:	2b04      	cmp	r3, #4
 800a834:	bf28      	it	cs
 800a836:	2304      	movcs	r3, #4
 800a838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	3304      	adds	r3, #4
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d902      	bls.n	800a848 <NVIC_EncodePriority+0x30>
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	3b03      	subs	r3, #3
 800a846:	e000      	b.n	800a84a <NVIC_EncodePriority+0x32>
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a84c:	f04f 32ff 	mov.w	r2, #4294967295
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	43da      	mvns	r2, r3
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	401a      	ands	r2, r3
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a860:	f04f 31ff 	mov.w	r1, #4294967295
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	fa01 f303 	lsl.w	r3, r1, r3
 800a86a:	43d9      	mvns	r1, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a870:	4313      	orrs	r3, r2
         );
}
 800a872:	4618      	mov	r0, r3
 800a874:	3724      	adds	r7, #36	; 0x24
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
	...

0800a880 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a884:	f3bf 8f4f 	dsb	sy
}
 800a888:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a88a:	4b06      	ldr	r3, [pc, #24]	; (800a8a4 <__NVIC_SystemReset+0x24>)
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a892:	4904      	ldr	r1, [pc, #16]	; (800a8a4 <__NVIC_SystemReset+0x24>)
 800a894:	4b04      	ldr	r3, [pc, #16]	; (800a8a8 <__NVIC_SystemReset+0x28>)
 800a896:	4313      	orrs	r3, r2
 800a898:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a89a:	f3bf 8f4f 	dsb	sy
}
 800a89e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a8a0:	bf00      	nop
 800a8a2:	e7fd      	b.n	800a8a0 <__NVIC_SystemReset+0x20>
 800a8a4:	e000ed00 	.word	0xe000ed00
 800a8a8:	05fa0004 	.word	0x05fa0004

0800a8ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ff35 	bl	800a724 <__NVIC_SetPriorityGrouping>
}
 800a8ba:	bf00      	nop
 800a8bc:	3708      	adds	r7, #8
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b086      	sub	sp, #24
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	60b9      	str	r1, [r7, #8]
 800a8cc:	607a      	str	r2, [r7, #4]
 800a8ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a8d4:	f7ff ff4a 	bl	800a76c <__NVIC_GetPriorityGrouping>
 800a8d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	6978      	ldr	r0, [r7, #20]
 800a8e0:	f7ff ff9a 	bl	800a818 <NVIC_EncodePriority>
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8ea:	4611      	mov	r1, r2
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff ff69 	bl	800a7c4 <__NVIC_SetPriority>
}
 800a8f2:	bf00      	nop
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b082      	sub	sp, #8
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	4603      	mov	r3, r0
 800a902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff ff3d 	bl	800a788 <__NVIC_EnableIRQ>
}
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a91a:	f7ff ffb1 	bl	800a880 <__NVIC_SystemReset>
	...

0800a920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a920:	b480      	push	{r7}
 800a922:	b089      	sub	sp, #36	; 0x24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a932:	2300      	movs	r3, #0
 800a934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a936:	2300      	movs	r3, #0
 800a938:	61fb      	str	r3, [r7, #28]
 800a93a:	e159      	b.n	800abf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a93c:	2201      	movs	r2, #1
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	fa02 f303 	lsl.w	r3, r2, r3
 800a944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4013      	ands	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	429a      	cmp	r2, r3
 800a956:	f040 8148 	bne.w	800abea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	2b01      	cmp	r3, #1
 800a964:	d005      	beq.n	800a972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d130      	bne.n	800a9d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	2203      	movs	r2, #3
 800a97e:	fa02 f303 	lsl.w	r3, r2, r3
 800a982:	43db      	mvns	r3, r3
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	4013      	ands	r3, r2
 800a988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	69fb      	ldr	r3, [r7, #28]
 800a990:	005b      	lsls	r3, r3, #1
 800a992:	fa02 f303 	lsl.w	r3, r2, r3
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	4313      	orrs	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b0:	43db      	mvns	r3, r3
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	091b      	lsrs	r3, r3, #4
 800a9be:	f003 0201 	and.w	r2, r3, #1
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d017      	beq.n	800aa10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	2203      	movs	r2, #3
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	689a      	ldr	r2, [r3, #8]
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	005b      	lsls	r3, r3, #1
 800aa00:	fa02 f303 	lsl.w	r3, r2, r3
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	2b02      	cmp	r3, #2
 800aa1a:	d123      	bne.n	800aa64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	08da      	lsrs	r2, r3, #3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3208      	adds	r2, #8
 800aa24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	220f      	movs	r2, #15
 800aa34:	fa02 f303 	lsl.w	r3, r2, r3
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	08da      	lsrs	r2, r3, #3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3208      	adds	r2, #8
 800aa5e:	69b9      	ldr	r1, [r7, #24]
 800aa60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	2203      	movs	r2, #3
 800aa70:	fa02 f303 	lsl.w	r3, r2, r3
 800aa74:	43db      	mvns	r3, r3
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f003 0203 	and.w	r2, r3, #3
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 80a2 	beq.w	800abea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	4b57      	ldr	r3, [pc, #348]	; (800ac08 <HAL_GPIO_Init+0x2e8>)
 800aaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaae:	4a56      	ldr	r2, [pc, #344]	; (800ac08 <HAL_GPIO_Init+0x2e8>)
 800aab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aab4:	6453      	str	r3, [r2, #68]	; 0x44
 800aab6:	4b54      	ldr	r3, [pc, #336]	; (800ac08 <HAL_GPIO_Init+0x2e8>)
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aac2:	4a52      	ldr	r2, [pc, #328]	; (800ac0c <HAL_GPIO_Init+0x2ec>)
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	3302      	adds	r3, #2
 800aaca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	220f      	movs	r2, #15
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	43db      	mvns	r3, r3
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	4013      	ands	r3, r2
 800aae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a49      	ldr	r2, [pc, #292]	; (800ac10 <HAL_GPIO_Init+0x2f0>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d019      	beq.n	800ab22 <HAL_GPIO_Init+0x202>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a48      	ldr	r2, [pc, #288]	; (800ac14 <HAL_GPIO_Init+0x2f4>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d013      	beq.n	800ab1e <HAL_GPIO_Init+0x1fe>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a47      	ldr	r2, [pc, #284]	; (800ac18 <HAL_GPIO_Init+0x2f8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d00d      	beq.n	800ab1a <HAL_GPIO_Init+0x1fa>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a46      	ldr	r2, [pc, #280]	; (800ac1c <HAL_GPIO_Init+0x2fc>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d007      	beq.n	800ab16 <HAL_GPIO_Init+0x1f6>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a45      	ldr	r2, [pc, #276]	; (800ac20 <HAL_GPIO_Init+0x300>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d101      	bne.n	800ab12 <HAL_GPIO_Init+0x1f2>
 800ab0e:	2304      	movs	r3, #4
 800ab10:	e008      	b.n	800ab24 <HAL_GPIO_Init+0x204>
 800ab12:	2307      	movs	r3, #7
 800ab14:	e006      	b.n	800ab24 <HAL_GPIO_Init+0x204>
 800ab16:	2303      	movs	r3, #3
 800ab18:	e004      	b.n	800ab24 <HAL_GPIO_Init+0x204>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	e002      	b.n	800ab24 <HAL_GPIO_Init+0x204>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <HAL_GPIO_Init+0x204>
 800ab22:	2300      	movs	r3, #0
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	f002 0203 	and.w	r2, r2, #3
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	4093      	lsls	r3, r2
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab34:	4935      	ldr	r1, [pc, #212]	; (800ac0c <HAL_GPIO_Init+0x2ec>)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	089b      	lsrs	r3, r3, #2
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab42:	4b38      	ldr	r3, [pc, #224]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	43db      	mvns	r3, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab66:	4a2f      	ldr	r2, [pc, #188]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab6c:	4b2d      	ldr	r3, [pc, #180]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	43db      	mvns	r3, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab90:	4a24      	ldr	r2, [pc, #144]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ab96:	4b23      	ldr	r3, [pc, #140]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	43db      	mvns	r3, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4013      	ands	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abba:	4a1a      	ldr	r2, [pc, #104]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800abc0:	4b18      	ldr	r3, [pc, #96]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	43db      	mvns	r3, r3
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	4013      	ands	r3, r2
 800abce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abe4:	4a0f      	ldr	r2, [pc, #60]	; (800ac24 <HAL_GPIO_Init+0x304>)
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	f67f aea2 	bls.w	800a93c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40023800 	.word	0x40023800
 800ac0c:	40013800 	.word	0x40013800
 800ac10:	40020000 	.word	0x40020000
 800ac14:	40020400 	.word	0x40020400
 800ac18:	40020800 	.word	0x40020800
 800ac1c:	40020c00 	.word	0x40020c00
 800ac20:	40021000 	.word	0x40021000
 800ac24:	40013c00 	.word	0x40013c00

0800ac28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691a      	ldr	r2, [r3, #16]
 800ac38:	887b      	ldrh	r3, [r7, #2]
 800ac3a:	4013      	ands	r3, r2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac40:	2301      	movs	r3, #1
 800ac42:	73fb      	strb	r3, [r7, #15]
 800ac44:	e001      	b.n	800ac4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
 800ac64:	4613      	mov	r3, r2
 800ac66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac68:	787b      	ldrb	r3, [r7, #1]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac6e:	887a      	ldrh	r2, [r7, #2]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac74:	e003      	b.n	800ac7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac76:	887b      	ldrh	r3, [r7, #2]
 800ac78:	041a      	lsls	r2, r3, #16
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	619a      	str	r2, [r3, #24]
}
 800ac7e:	bf00      	nop
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
	...

0800ac8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b086      	sub	sp, #24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d101      	bne.n	800ac9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e267      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d075      	beq.n	800ad96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800acaa:	4b88      	ldr	r3, [pc, #544]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	f003 030c 	and.w	r3, r3, #12
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	d00c      	beq.n	800acd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acb6:	4b85      	ldr	r3, [pc, #532]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d112      	bne.n	800ace8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acc2:	4b82      	ldr	r3, [pc, #520]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acce:	d10b      	bne.n	800ace8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acd0:	4b7e      	ldr	r3, [pc, #504]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d05b      	beq.n	800ad94 <HAL_RCC_OscConfig+0x108>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d157      	bne.n	800ad94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e242      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf0:	d106      	bne.n	800ad00 <HAL_RCC_OscConfig+0x74>
 800acf2:	4b76      	ldr	r3, [pc, #472]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a75      	ldr	r2, [pc, #468]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800acf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acfc:	6013      	str	r3, [r2, #0]
 800acfe:	e01d      	b.n	800ad3c <HAL_RCC_OscConfig+0xb0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad08:	d10c      	bne.n	800ad24 <HAL_RCC_OscConfig+0x98>
 800ad0a:	4b70      	ldr	r3, [pc, #448]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a6f      	ldr	r2, [pc, #444]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	4b6d      	ldr	r3, [pc, #436]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a6c      	ldr	r2, [pc, #432]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	e00b      	b.n	800ad3c <HAL_RCC_OscConfig+0xb0>
 800ad24:	4b69      	ldr	r3, [pc, #420]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a68      	ldr	r2, [pc, #416]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	4b66      	ldr	r3, [pc, #408]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a65      	ldr	r2, [pc, #404]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d013      	beq.n	800ad6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad44:	f7ff f934 	bl	8009fb0 <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad4c:	f7ff f930 	bl	8009fb0 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b64      	cmp	r3, #100	; 0x64
 800ad58:	d901      	bls.n	800ad5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e207      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	4b5b      	ldr	r3, [pc, #364]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0f0      	beq.n	800ad4c <HAL_RCC_OscConfig+0xc0>
 800ad6a:	e014      	b.n	800ad96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad6c:	f7ff f920 	bl	8009fb0 <HAL_GetTick>
 800ad70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad72:	e008      	b.n	800ad86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad74:	f7ff f91c 	bl	8009fb0 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b64      	cmp	r3, #100	; 0x64
 800ad80:	d901      	bls.n	800ad86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad82:	2303      	movs	r3, #3
 800ad84:	e1f3      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad86:	4b51      	ldr	r3, [pc, #324]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1f0      	bne.n	800ad74 <HAL_RCC_OscConfig+0xe8>
 800ad92:	e000      	b.n	800ad96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d063      	beq.n	800ae6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ada2:	4b4a      	ldr	r3, [pc, #296]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f003 030c 	and.w	r3, r3, #12
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00b      	beq.n	800adc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adae:	4b47      	ldr	r3, [pc, #284]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800adb6:	2b08      	cmp	r3, #8
 800adb8:	d11c      	bne.n	800adf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adba:	4b44      	ldr	r3, [pc, #272]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d116      	bne.n	800adf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adc6:	4b41      	ldr	r3, [pc, #260]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d005      	beq.n	800adde <HAL_RCC_OscConfig+0x152>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d001      	beq.n	800adde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e1c7      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adde:	4b3b      	ldr	r3, [pc, #236]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	4937      	ldr	r1, [pc, #220]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800adee:	4313      	orrs	r3, r2
 800adf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adf2:	e03a      	b.n	800ae6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d020      	beq.n	800ae3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adfc:	4b34      	ldr	r3, [pc, #208]	; (800aed0 <HAL_RCC_OscConfig+0x244>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae02:	f7ff f8d5 	bl	8009fb0 <HAL_GetTick>
 800ae06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae08:	e008      	b.n	800ae1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae0a:	f7ff f8d1 	bl	8009fb0 <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d901      	bls.n	800ae1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	e1a8      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0302 	and.w	r3, r3, #2
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0f0      	beq.n	800ae0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae28:	4b28      	ldr	r3, [pc, #160]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	4925      	ldr	r1, [pc, #148]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	600b      	str	r3, [r1, #0]
 800ae3c:	e015      	b.n	800ae6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae3e:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <HAL_RCC_OscConfig+0x244>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae44:	f7ff f8b4 	bl	8009fb0 <HAL_GetTick>
 800ae48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae4a:	e008      	b.n	800ae5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae4c:	f7ff f8b0 	bl	8009fb0 <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d901      	bls.n	800ae5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e187      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae5e:	4b1b      	ldr	r3, [pc, #108]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0302 	and.w	r3, r3, #2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1f0      	bne.n	800ae4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f003 0308 	and.w	r3, r3, #8
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d036      	beq.n	800aee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d016      	beq.n	800aeac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae7e:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <HAL_RCC_OscConfig+0x248>)
 800ae80:	2201      	movs	r2, #1
 800ae82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae84:	f7ff f894 	bl	8009fb0 <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae8c:	f7ff f890 	bl	8009fb0 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e167      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae9e:	4b0b      	ldr	r3, [pc, #44]	; (800aecc <HAL_RCC_OscConfig+0x240>)
 800aea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d0f0      	beq.n	800ae8c <HAL_RCC_OscConfig+0x200>
 800aeaa:	e01b      	b.n	800aee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aeac:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <HAL_RCC_OscConfig+0x248>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aeb2:	f7ff f87d 	bl	8009fb0 <HAL_GetTick>
 800aeb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeb8:	e00e      	b.n	800aed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aeba:	f7ff f879 	bl	8009fb0 <HAL_GetTick>
 800aebe:	4602      	mov	r2, r0
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	1ad3      	subs	r3, r2, r3
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d907      	bls.n	800aed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e150      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
 800aecc:	40023800 	.word	0x40023800
 800aed0:	42470000 	.word	0x42470000
 800aed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aed8:	4b88      	ldr	r3, [pc, #544]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800aeda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1ea      	bne.n	800aeba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 8097 	beq.w	800b020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aef2:	2300      	movs	r3, #0
 800aef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aef6:	4b81      	ldr	r3, [pc, #516]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d10f      	bne.n	800af22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af02:	2300      	movs	r3, #0
 800af04:	60bb      	str	r3, [r7, #8]
 800af06:	4b7d      	ldr	r3, [pc, #500]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0a:	4a7c      	ldr	r2, [pc, #496]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af10:	6413      	str	r3, [r2, #64]	; 0x40
 800af12:	4b7a      	ldr	r3, [pc, #488]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1a:	60bb      	str	r3, [r7, #8]
 800af1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af22:	4b77      	ldr	r3, [pc, #476]	; (800b100 <HAL_RCC_OscConfig+0x474>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d118      	bne.n	800af60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af2e:	4b74      	ldr	r3, [pc, #464]	; (800b100 <HAL_RCC_OscConfig+0x474>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a73      	ldr	r2, [pc, #460]	; (800b100 <HAL_RCC_OscConfig+0x474>)
 800af34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af3a:	f7ff f839 	bl	8009fb0 <HAL_GetTick>
 800af3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af40:	e008      	b.n	800af54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af42:	f7ff f835 	bl	8009fb0 <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d901      	bls.n	800af54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e10c      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af54:	4b6a      	ldr	r3, [pc, #424]	; (800b100 <HAL_RCC_OscConfig+0x474>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d0f0      	beq.n	800af42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d106      	bne.n	800af76 <HAL_RCC_OscConfig+0x2ea>
 800af68:	4b64      	ldr	r3, [pc, #400]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6c:	4a63      	ldr	r2, [pc, #396]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	6713      	str	r3, [r2, #112]	; 0x70
 800af74:	e01c      	b.n	800afb0 <HAL_RCC_OscConfig+0x324>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d10c      	bne.n	800af98 <HAL_RCC_OscConfig+0x30c>
 800af7e:	4b5f      	ldr	r3, [pc, #380]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af82:	4a5e      	ldr	r2, [pc, #376]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af84:	f043 0304 	orr.w	r3, r3, #4
 800af88:	6713      	str	r3, [r2, #112]	; 0x70
 800af8a:	4b5c      	ldr	r3, [pc, #368]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	4a5b      	ldr	r2, [pc, #364]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af90:	f043 0301 	orr.w	r3, r3, #1
 800af94:	6713      	str	r3, [r2, #112]	; 0x70
 800af96:	e00b      	b.n	800afb0 <HAL_RCC_OscConfig+0x324>
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af9c:	4a57      	ldr	r2, [pc, #348]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800af9e:	f023 0301 	bic.w	r3, r3, #1
 800afa2:	6713      	str	r3, [r2, #112]	; 0x70
 800afa4:	4b55      	ldr	r3, [pc, #340]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa8:	4a54      	ldr	r2, [pc, #336]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800afaa:	f023 0304 	bic.w	r3, r3, #4
 800afae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d015      	beq.n	800afe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afb8:	f7fe fffa 	bl	8009fb0 <HAL_GetTick>
 800afbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afbe:	e00a      	b.n	800afd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afc0:	f7fe fff6 	bl	8009fb0 <HAL_GetTick>
 800afc4:	4602      	mov	r2, r0
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	1ad3      	subs	r3, r2, r3
 800afca:	f241 3288 	movw	r2, #5000	; 0x1388
 800afce:	4293      	cmp	r3, r2
 800afd0:	d901      	bls.n	800afd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800afd2:	2303      	movs	r3, #3
 800afd4:	e0cb      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afd6:	4b49      	ldr	r3, [pc, #292]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800afd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0ee      	beq.n	800afc0 <HAL_RCC_OscConfig+0x334>
 800afe2:	e014      	b.n	800b00e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afe4:	f7fe ffe4 	bl	8009fb0 <HAL_GetTick>
 800afe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afea:	e00a      	b.n	800b002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afec:	f7fe ffe0 	bl	8009fb0 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800affa:	4293      	cmp	r3, r2
 800affc:	d901      	bls.n	800b002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e0b5      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b002:	4b3e      	ldr	r3, [pc, #248]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1ee      	bne.n	800afec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b00e:	7dfb      	ldrb	r3, [r7, #23]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d105      	bne.n	800b020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b014:	4b39      	ldr	r3, [pc, #228]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	4a38      	ldr	r2, [pc, #224]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b01a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b01e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	699b      	ldr	r3, [r3, #24]
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80a1 	beq.w	800b16c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b02a:	4b34      	ldr	r3, [pc, #208]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	f003 030c 	and.w	r3, r3, #12
 800b032:	2b08      	cmp	r3, #8
 800b034:	d05c      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d141      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b03e:	4b31      	ldr	r3, [pc, #196]	; (800b104 <HAL_RCC_OscConfig+0x478>)
 800b040:	2200      	movs	r2, #0
 800b042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b044:	f7fe ffb4 	bl	8009fb0 <HAL_GetTick>
 800b048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b04a:	e008      	b.n	800b05e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b04c:	f7fe ffb0 	bl	8009fb0 <HAL_GetTick>
 800b050:	4602      	mov	r2, r0
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	2b02      	cmp	r3, #2
 800b058:	d901      	bls.n	800b05e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e087      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b05e:	4b27      	ldr	r3, [pc, #156]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1f0      	bne.n	800b04c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	431a      	orrs	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	019b      	lsls	r3, r3, #6
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	3b01      	subs	r3, #1
 800b084:	041b      	lsls	r3, r3, #16
 800b086:	431a      	orrs	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	061b      	lsls	r3, r3, #24
 800b08e:	491b      	ldr	r1, [pc, #108]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b090:	4313      	orrs	r3, r2
 800b092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b094:	4b1b      	ldr	r3, [pc, #108]	; (800b104 <HAL_RCC_OscConfig+0x478>)
 800b096:	2201      	movs	r2, #1
 800b098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b09a:	f7fe ff89 	bl	8009fb0 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0a2:	f7fe ff85 	bl	8009fb0 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e05c      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0b4:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d0f0      	beq.n	800b0a2 <HAL_RCC_OscConfig+0x416>
 800b0c0:	e054      	b.n	800b16c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0c2:	4b10      	ldr	r3, [pc, #64]	; (800b104 <HAL_RCC_OscConfig+0x478>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0c8:	f7fe ff72 	bl	8009fb0 <HAL_GetTick>
 800b0cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0d0:	f7fe ff6e 	bl	8009fb0 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e045      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0e2:	4b06      	ldr	r3, [pc, #24]	; (800b0fc <HAL_RCC_OscConfig+0x470>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1f0      	bne.n	800b0d0 <HAL_RCC_OscConfig+0x444>
 800b0ee:	e03d      	b.n	800b16c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	699b      	ldr	r3, [r3, #24]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d107      	bne.n	800b108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e038      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
 800b0fc:	40023800 	.word	0x40023800
 800b100:	40007000 	.word	0x40007000
 800b104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b108:	4b1b      	ldr	r3, [pc, #108]	; (800b178 <HAL_RCC_OscConfig+0x4ec>)
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d028      	beq.n	800b168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d121      	bne.n	800b168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b12e:	429a      	cmp	r2, r3
 800b130:	d11a      	bne.n	800b168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b138:	4013      	ands	r3, r2
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b13e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b140:	4293      	cmp	r3, r2
 800b142:	d111      	bne.n	800b168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14e:	085b      	lsrs	r3, r3, #1
 800b150:	3b01      	subs	r3, #1
 800b152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b154:	429a      	cmp	r2, r3
 800b156:	d107      	bne.n	800b168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b164:	429a      	cmp	r2, r3
 800b166:	d001      	beq.n	800b16c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e000      	b.n	800b16e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b16c:	2300      	movs	r3, #0
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3718      	adds	r7, #24
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	40023800 	.word	0x40023800

0800b17c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e0cc      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b190:	4b68      	ldr	r3, [pc, #416]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 0307 	and.w	r3, r3, #7
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d90c      	bls.n	800b1b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b19e:	4b65      	ldr	r3, [pc, #404]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b1a0:	683a      	ldr	r2, [r7, #0]
 800b1a2:	b2d2      	uxtb	r2, r2
 800b1a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1a6:	4b63      	ldr	r3, [pc, #396]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d001      	beq.n	800b1b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e0b8      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 0302 	and.w	r3, r3, #2
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d020      	beq.n	800b206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d005      	beq.n	800b1dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1d0:	4b59      	ldr	r3, [pc, #356]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	4a58      	ldr	r2, [pc, #352]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b1d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b1da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 0308 	and.w	r3, r3, #8
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d005      	beq.n	800b1f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1e8:	4b53      	ldr	r3, [pc, #332]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	4a52      	ldr	r2, [pc, #328]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b1ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1f4:	4b50      	ldr	r3, [pc, #320]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	494d      	ldr	r1, [pc, #308]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b202:	4313      	orrs	r3, r2
 800b204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d044      	beq.n	800b29c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d107      	bne.n	800b22a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b21a:	4b47      	ldr	r3, [pc, #284]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d119      	bne.n	800b25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e07f      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d003      	beq.n	800b23a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b236:	2b03      	cmp	r3, #3
 800b238:	d107      	bne.n	800b24a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b23a:	4b3f      	ldr	r3, [pc, #252]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d109      	bne.n	800b25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e06f      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b24a:	4b3b      	ldr	r3, [pc, #236]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e067      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b25a:	4b37      	ldr	r3, [pc, #220]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f023 0203 	bic.w	r2, r3, #3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4934      	ldr	r1, [pc, #208]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b26c:	f7fe fea0 	bl	8009fb0 <HAL_GetTick>
 800b270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b272:	e00a      	b.n	800b28a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b274:	f7fe fe9c 	bl	8009fb0 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b282:	4293      	cmp	r3, r2
 800b284:	d901      	bls.n	800b28a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e04f      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b28a:	4b2b      	ldr	r3, [pc, #172]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 020c 	and.w	r2, r3, #12
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	429a      	cmp	r2, r3
 800b29a:	d1eb      	bne.n	800b274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b29c:	4b25      	ldr	r3, [pc, #148]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0307 	and.w	r3, r3, #7
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d20c      	bcs.n	800b2c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2aa:	4b22      	ldr	r3, [pc, #136]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	b2d2      	uxtb	r2, r2
 800b2b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b2:	4b20      	ldr	r3, [pc, #128]	; (800b334 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d001      	beq.n	800b2c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e032      	b.n	800b32a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0304 	and.w	r3, r3, #4
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d008      	beq.n	800b2e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2d0:	4b19      	ldr	r3, [pc, #100]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	4916      	ldr	r1, [pc, #88]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0308 	and.w	r3, r3, #8
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d009      	beq.n	800b302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	00db      	lsls	r3, r3, #3
 800b2fc:	490e      	ldr	r1, [pc, #56]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b302:	f000 f821 	bl	800b348 <HAL_RCC_GetSysClockFreq>
 800b306:	4602      	mov	r2, r0
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <HAL_RCC_ClockConfig+0x1bc>)
 800b30a:	689b      	ldr	r3, [r3, #8]
 800b30c:	091b      	lsrs	r3, r3, #4
 800b30e:	f003 030f 	and.w	r3, r3, #15
 800b312:	490a      	ldr	r1, [pc, #40]	; (800b33c <HAL_RCC_ClockConfig+0x1c0>)
 800b314:	5ccb      	ldrb	r3, [r1, r3]
 800b316:	fa22 f303 	lsr.w	r3, r2, r3
 800b31a:	4a09      	ldr	r2, [pc, #36]	; (800b340 <HAL_RCC_ClockConfig+0x1c4>)
 800b31c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <HAL_RCC_ClockConfig+0x1c8>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4618      	mov	r0, r3
 800b324:	f7fe fa0a 	bl	800973c <HAL_InitTick>

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	40023c00 	.word	0x40023c00
 800b338:	40023800 	.word	0x40023800
 800b33c:	0800fb28 	.word	0x0800fb28
 800b340:	20000000 	.word	0x20000000
 800b344:	20000004 	.word	0x20000004

0800b348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b34c:	b090      	sub	sp, #64	; 0x40
 800b34e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b350:	2300      	movs	r3, #0
 800b352:	637b      	str	r3, [r7, #52]	; 0x34
 800b354:	2300      	movs	r3, #0
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b358:	2300      	movs	r3, #0
 800b35a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b360:	4b59      	ldr	r3, [pc, #356]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 030c 	and.w	r3, r3, #12
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d00d      	beq.n	800b388 <HAL_RCC_GetSysClockFreq+0x40>
 800b36c:	2b08      	cmp	r3, #8
 800b36e:	f200 80a1 	bhi.w	800b4b4 <HAL_RCC_GetSysClockFreq+0x16c>
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_RCC_GetSysClockFreq+0x34>
 800b376:	2b04      	cmp	r3, #4
 800b378:	d003      	beq.n	800b382 <HAL_RCC_GetSysClockFreq+0x3a>
 800b37a:	e09b      	b.n	800b4b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b37c:	4b53      	ldr	r3, [pc, #332]	; (800b4cc <HAL_RCC_GetSysClockFreq+0x184>)
 800b37e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800b380:	e09b      	b.n	800b4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b382:	4b53      	ldr	r3, [pc, #332]	; (800b4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b386:	e098      	b.n	800b4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b388:	4b4f      	ldr	r3, [pc, #316]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b390:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b392:	4b4d      	ldr	r3, [pc, #308]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d028      	beq.n	800b3f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b39e:	4b4a      	ldr	r3, [pc, #296]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	099b      	lsrs	r3, r3, #6
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	623b      	str	r3, [r7, #32]
 800b3a8:	627a      	str	r2, [r7, #36]	; 0x24
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	4b47      	ldr	r3, [pc, #284]	; (800b4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3b4:	fb03 f201 	mul.w	r2, r3, r1
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	fb00 f303 	mul.w	r3, r0, r3
 800b3be:	4413      	add	r3, r2
 800b3c0:	4a43      	ldr	r2, [pc, #268]	; (800b4d0 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3c2:	fba0 1202 	umull	r1, r2, r0, r2
 800b3c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c8:	460a      	mov	r2, r1
 800b3ca:	62ba      	str	r2, [r7, #40]	; 0x28
 800b3cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3ce:	4413      	add	r3, r2
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	61bb      	str	r3, [r7, #24]
 800b3d8:	61fa      	str	r2, [r7, #28]
 800b3da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800b3e2:	f7fd faeb 	bl	80089bc <__aeabi_uldivmod>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ee:	e053      	b.n	800b498 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3f0:	4b35      	ldr	r3, [pc, #212]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	099b      	lsrs	r3, r3, #6
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	613b      	str	r3, [r7, #16]
 800b3fa:	617a      	str	r2, [r7, #20]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b402:	f04f 0b00 	mov.w	fp, #0
 800b406:	4652      	mov	r2, sl
 800b408:	465b      	mov	r3, fp
 800b40a:	f04f 0000 	mov.w	r0, #0
 800b40e:	f04f 0100 	mov.w	r1, #0
 800b412:	0159      	lsls	r1, r3, #5
 800b414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b418:	0150      	lsls	r0, r2, #5
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	ebb2 080a 	subs.w	r8, r2, sl
 800b422:	eb63 090b 	sbc.w	r9, r3, fp
 800b426:	f04f 0200 	mov.w	r2, #0
 800b42a:	f04f 0300 	mov.w	r3, #0
 800b42e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b432:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b436:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b43a:	ebb2 0408 	subs.w	r4, r2, r8
 800b43e:	eb63 0509 	sbc.w	r5, r3, r9
 800b442:	f04f 0200 	mov.w	r2, #0
 800b446:	f04f 0300 	mov.w	r3, #0
 800b44a:	00eb      	lsls	r3, r5, #3
 800b44c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b450:	00e2      	lsls	r2, r4, #3
 800b452:	4614      	mov	r4, r2
 800b454:	461d      	mov	r5, r3
 800b456:	eb14 030a 	adds.w	r3, r4, sl
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	eb45 030b 	adc.w	r3, r5, fp
 800b460:	607b      	str	r3, [r7, #4]
 800b462:	f04f 0200 	mov.w	r2, #0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b46e:	4629      	mov	r1, r5
 800b470:	028b      	lsls	r3, r1, #10
 800b472:	4621      	mov	r1, r4
 800b474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b478:	4621      	mov	r1, r4
 800b47a:	028a      	lsls	r2, r1, #10
 800b47c:	4610      	mov	r0, r2
 800b47e:	4619      	mov	r1, r3
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	2200      	movs	r2, #0
 800b484:	60bb      	str	r3, [r7, #8]
 800b486:	60fa      	str	r2, [r7, #12]
 800b488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b48c:	f7fd fa96 	bl	80089bc <__aeabi_uldivmod>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	4613      	mov	r3, r2
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b498:	4b0b      	ldr	r3, [pc, #44]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	0c1b      	lsrs	r3, r3, #16
 800b49e:	f003 0303 	and.w	r3, r3, #3
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b4a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b4b2:	e002      	b.n	800b4ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <HAL_RCC_GetSysClockFreq+0x184>)
 800b4b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b4b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3740      	adds	r7, #64	; 0x40
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4c6:	bf00      	nop
 800b4c8:	40023800 	.word	0x40023800
 800b4cc:	00f42400 	.word	0x00f42400
 800b4d0:	017d7840 	.word	0x017d7840

0800b4d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4da:	681b      	ldr	r3, [r3, #0]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000000 	.word	0x20000000

0800b4ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b4f0:	f7ff fff0 	bl	800b4d4 <HAL_RCC_GetHCLKFreq>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	4b05      	ldr	r3, [pc, #20]	; (800b50c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	0a9b      	lsrs	r3, r3, #10
 800b4fc:	f003 0307 	and.w	r3, r3, #7
 800b500:	4903      	ldr	r1, [pc, #12]	; (800b510 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b502:	5ccb      	ldrb	r3, [r1, r3]
 800b504:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b508:	4618      	mov	r0, r3
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	40023800 	.word	0x40023800
 800b510:	0800fb38 	.word	0x0800fb38

0800b514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b518:	f7ff ffdc 	bl	800b4d4 <HAL_RCC_GetHCLKFreq>
 800b51c:	4602      	mov	r2, r0
 800b51e:	4b05      	ldr	r3, [pc, #20]	; (800b534 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	0b5b      	lsrs	r3, r3, #13
 800b524:	f003 0307 	and.w	r3, r3, #7
 800b528:	4903      	ldr	r1, [pc, #12]	; (800b538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b52a:	5ccb      	ldrb	r3, [r1, r3]
 800b52c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b530:	4618      	mov	r0, r3
 800b532:	bd80      	pop	{r7, pc}
 800b534:	40023800 	.word	0x40023800
 800b538:	0800fb38 	.word	0x0800fb38

0800b53c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	220f      	movs	r2, #15
 800b54a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b54c:	4b12      	ldr	r3, [pc, #72]	; (800b598 <HAL_RCC_GetClockConfig+0x5c>)
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	f003 0203 	and.w	r2, r3, #3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b558:	4b0f      	ldr	r3, [pc, #60]	; (800b598 <HAL_RCC_GetClockConfig+0x5c>)
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b564:	4b0c      	ldr	r3, [pc, #48]	; (800b598 <HAL_RCC_GetClockConfig+0x5c>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b570:	4b09      	ldr	r3, [pc, #36]	; (800b598 <HAL_RCC_GetClockConfig+0x5c>)
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	08db      	lsrs	r3, r3, #3
 800b576:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b57e:	4b07      	ldr	r3, [pc, #28]	; (800b59c <HAL_RCC_GetClockConfig+0x60>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0207 	and.w	r2, r3, #7
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	601a      	str	r2, [r3, #0]
}
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	40023800 	.word	0x40023800
 800b59c:	40023c00 	.word	0x40023c00

0800b5a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b082      	sub	sp, #8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e041      	b.n	800b636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7fe fab2 	bl	8009b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2202      	movs	r2, #2
 800b5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4619      	mov	r1, r3
 800b5de:	4610      	mov	r0, r2
 800b5e0:	f000 fc3c 	bl	800be5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2201      	movs	r2, #1
 800b628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
	...

0800b640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	2b01      	cmp	r3, #1
 800b652:	d001      	beq.n	800b658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e044      	b.n	800b6e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2202      	movs	r2, #2
 800b65c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0201 	orr.w	r2, r2, #1
 800b66e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a1e      	ldr	r2, [pc, #120]	; (800b6f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d018      	beq.n	800b6ac <HAL_TIM_Base_Start_IT+0x6c>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b682:	d013      	beq.n	800b6ac <HAL_TIM_Base_Start_IT+0x6c>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a1a      	ldr	r2, [pc, #104]	; (800b6f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d00e      	beq.n	800b6ac <HAL_TIM_Base_Start_IT+0x6c>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a19      	ldr	r2, [pc, #100]	; (800b6f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d009      	beq.n	800b6ac <HAL_TIM_Base_Start_IT+0x6c>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a17      	ldr	r2, [pc, #92]	; (800b6fc <HAL_TIM_Base_Start_IT+0xbc>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d004      	beq.n	800b6ac <HAL_TIM_Base_Start_IT+0x6c>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a16      	ldr	r2, [pc, #88]	; (800b700 <HAL_TIM_Base_Start_IT+0xc0>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d111      	bne.n	800b6d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f003 0307 	and.w	r3, r3, #7
 800b6b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b06      	cmp	r3, #6
 800b6bc:	d010      	beq.n	800b6e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f042 0201 	orr.w	r2, r2, #1
 800b6cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ce:	e007      	b.n	800b6e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f042 0201 	orr.w	r2, r2, #1
 800b6de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	40010000 	.word	0x40010000
 800b6f4:	40000400 	.word	0x40000400
 800b6f8:	40000800 	.word	0x40000800
 800b6fc:	40000c00 	.word	0x40000c00
 800b700:	40014000 	.word	0x40014000

0800b704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e041      	b.n	800b79a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f839 	bl	800b7a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3304      	adds	r3, #4
 800b740:	4619      	mov	r1, r3
 800b742:	4610      	mov	r0, r2
 800b744:	f000 fb8a 	bl	800be5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2201      	movs	r2, #1
 800b764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2201      	movs	r2, #1
 800b76c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2201      	movs	r2, #1
 800b77c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b7aa:	bf00      	nop
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d109      	bne.n	800b7dc <HAL_TIM_PWM_Start+0x24>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	bf14      	ite	ne
 800b7d4:	2301      	movne	r3, #1
 800b7d6:	2300      	moveq	r3, #0
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	e022      	b.n	800b822 <HAL_TIM_PWM_Start+0x6a>
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b04      	cmp	r3, #4
 800b7e0:	d109      	bne.n	800b7f6 <HAL_TIM_PWM_Start+0x3e>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	bf14      	ite	ne
 800b7ee:	2301      	movne	r3, #1
 800b7f0:	2300      	moveq	r3, #0
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	e015      	b.n	800b822 <HAL_TIM_PWM_Start+0x6a>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d109      	bne.n	800b810 <HAL_TIM_PWM_Start+0x58>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b01      	cmp	r3, #1
 800b806:	bf14      	ite	ne
 800b808:	2301      	movne	r3, #1
 800b80a:	2300      	moveq	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	e008      	b.n	800b822 <HAL_TIM_PWM_Start+0x6a>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b01      	cmp	r3, #1
 800b81a:	bf14      	ite	ne
 800b81c:	2301      	movne	r3, #1
 800b81e:	2300      	moveq	r3, #0
 800b820:	b2db      	uxtb	r3, r3
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e068      	b.n	800b8fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d104      	bne.n	800b83a <HAL_TIM_PWM_Start+0x82>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b838:	e013      	b.n	800b862 <HAL_TIM_PWM_Start+0xaa>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	d104      	bne.n	800b84a <HAL_TIM_PWM_Start+0x92>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b848:	e00b      	b.n	800b862 <HAL_TIM_PWM_Start+0xaa>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b08      	cmp	r3, #8
 800b84e:	d104      	bne.n	800b85a <HAL_TIM_PWM_Start+0xa2>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b858:	e003      	b.n	800b862 <HAL_TIM_PWM_Start+0xaa>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2202      	movs	r2, #2
 800b85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	2201      	movs	r2, #1
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f000 fda8 	bl	800c3c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a23      	ldr	r2, [pc, #140]	; (800b904 <HAL_TIM_PWM_Start+0x14c>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d107      	bne.n	800b88a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <HAL_TIM_PWM_Start+0x14c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d018      	beq.n	800b8c6 <HAL_TIM_PWM_Start+0x10e>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89c:	d013      	beq.n	800b8c6 <HAL_TIM_PWM_Start+0x10e>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a19      	ldr	r2, [pc, #100]	; (800b908 <HAL_TIM_PWM_Start+0x150>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d00e      	beq.n	800b8c6 <HAL_TIM_PWM_Start+0x10e>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a17      	ldr	r2, [pc, #92]	; (800b90c <HAL_TIM_PWM_Start+0x154>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d009      	beq.n	800b8c6 <HAL_TIM_PWM_Start+0x10e>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a16      	ldr	r2, [pc, #88]	; (800b910 <HAL_TIM_PWM_Start+0x158>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d004      	beq.n	800b8c6 <HAL_TIM_PWM_Start+0x10e>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a14      	ldr	r2, [pc, #80]	; (800b914 <HAL_TIM_PWM_Start+0x15c>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d111      	bne.n	800b8ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f003 0307 	and.w	r3, r3, #7
 800b8d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2b06      	cmp	r3, #6
 800b8d6:	d010      	beq.n	800b8fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f042 0201 	orr.w	r2, r2, #1
 800b8e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8e8:	e007      	b.n	800b8fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0201 	orr.w	r2, r2, #1
 800b8f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	40010000 	.word	0x40010000
 800b908:	40000400 	.word	0x40000400
 800b90c:	40000800 	.word	0x40000800
 800b910:	40000c00 	.word	0x40000c00
 800b914:	40014000 	.word	0x40014000

0800b918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	d020      	beq.n	800b97c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01b      	beq.n	800b97c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0202 	mvn.w	r2, #2
 800b94c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	f003 0303 	and.w	r3, r3, #3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa5b 	bl	800be1e <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa4d 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fa5e 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d020      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d01b      	beq.n	800b9c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f06f 0204 	mvn.w	r2, #4
 800b998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2202      	movs	r2, #2
 800b99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fa35 	bl	800be1e <HAL_TIM_IC_CaptureCallback>
 800b9b4:	e005      	b.n	800b9c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa27 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa38 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	f003 0308 	and.w	r3, r3, #8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d020      	beq.n	800ba14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f003 0308 	and.w	r3, r3, #8
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01b      	beq.n	800ba14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f06f 0208 	mvn.w	r2, #8
 800b9e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa0f 	bl	800be1e <HAL_TIM_IC_CaptureCallback>
 800ba00:	e005      	b.n	800ba0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa01 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fa12 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	f003 0310 	and.w	r3, r3, #16
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d020      	beq.n	800ba60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f003 0310 	and.w	r3, r3, #16
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d01b      	beq.n	800ba60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f06f 0210 	mvn.w	r2, #16
 800ba30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2208      	movs	r2, #8
 800ba36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f9e9 	bl	800be1e <HAL_TIM_IC_CaptureCallback>
 800ba4c:	e005      	b.n	800ba5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9db 	bl	800be0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f9ec 	bl	800be32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00c      	beq.n	800ba84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d007      	beq.n	800ba84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f06f 0201 	mvn.w	r2, #1
 800ba7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7fd fe16 	bl	80096b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fd2a 	bl	800c4fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00c      	beq.n	800bacc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 f9bd 	bl	800be46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f003 0320 	and.w	r3, r3, #32
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00c      	beq.n	800baf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b00      	cmp	r3, #0
 800bade:	d007      	beq.n	800baf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0220 	mvn.w	r2, #32
 800bae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fcfc 	bl	800c4e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800baf0:	bf00      	nop
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d101      	bne.n	800bb16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb12:	2302      	movs	r3, #2
 800bb14:	e0ae      	b.n	800bc74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b0c      	cmp	r3, #12
 800bb22:	f200 809f 	bhi.w	800bc64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bb26:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2c:	0800bb61 	.word	0x0800bb61
 800bb30:	0800bc65 	.word	0x0800bc65
 800bb34:	0800bc65 	.word	0x0800bc65
 800bb38:	0800bc65 	.word	0x0800bc65
 800bb3c:	0800bba1 	.word	0x0800bba1
 800bb40:	0800bc65 	.word	0x0800bc65
 800bb44:	0800bc65 	.word	0x0800bc65
 800bb48:	0800bc65 	.word	0x0800bc65
 800bb4c:	0800bbe3 	.word	0x0800bbe3
 800bb50:	0800bc65 	.word	0x0800bc65
 800bb54:	0800bc65 	.word	0x0800bc65
 800bb58:	0800bc65 	.word	0x0800bc65
 800bb5c:	0800bc23 	.word	0x0800bc23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	68b9      	ldr	r1, [r7, #8]
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fa04 	bl	800bf74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	699a      	ldr	r2, [r3, #24]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f042 0208 	orr.w	r2, r2, #8
 800bb7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699a      	ldr	r2, [r3, #24]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f022 0204 	bic.w	r2, r2, #4
 800bb8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6999      	ldr	r1, [r3, #24]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	691a      	ldr	r2, [r3, #16]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	619a      	str	r2, [r3, #24]
      break;
 800bb9e:	e064      	b.n	800bc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f000 fa4a 	bl	800c040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	699a      	ldr	r2, [r3, #24]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	699a      	ldr	r2, [r3, #24]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	6999      	ldr	r1, [r3, #24]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	021a      	lsls	r2, r3, #8
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	619a      	str	r2, [r3, #24]
      break;
 800bbe0:	e043      	b.n	800bc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68b9      	ldr	r1, [r7, #8]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f000 fa95 	bl	800c118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69da      	ldr	r2, [r3, #28]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f042 0208 	orr.w	r2, r2, #8
 800bbfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	69da      	ldr	r2, [r3, #28]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f022 0204 	bic.w	r2, r2, #4
 800bc0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	69d9      	ldr	r1, [r3, #28]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	691a      	ldr	r2, [r3, #16]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	61da      	str	r2, [r3, #28]
      break;
 800bc20:	e023      	b.n	800bc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68b9      	ldr	r1, [r7, #8]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fadf 	bl	800c1ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69da      	ldr	r2, [r3, #28]
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	69da      	ldr	r2, [r3, #28]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	69d9      	ldr	r1, [r3, #28]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	021a      	lsls	r2, r3, #8
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	61da      	str	r2, [r3, #28]
      break;
 800bc62:	e002      	b.n	800bc6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	75fb      	strb	r3, [r7, #23]
      break;
 800bc68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d101      	bne.n	800bc98 <HAL_TIM_ConfigClockSource+0x1c>
 800bc94:	2302      	movs	r3, #2
 800bc96:	e0b4      	b.n	800be02 <HAL_TIM_ConfigClockSource+0x186>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bcb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd0:	d03e      	beq.n	800bd50 <HAL_TIM_ConfigClockSource+0xd4>
 800bcd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcd6:	f200 8087 	bhi.w	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcde:	f000 8086 	beq.w	800bdee <HAL_TIM_ConfigClockSource+0x172>
 800bce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bce6:	d87f      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bce8:	2b70      	cmp	r3, #112	; 0x70
 800bcea:	d01a      	beq.n	800bd22 <HAL_TIM_ConfigClockSource+0xa6>
 800bcec:	2b70      	cmp	r3, #112	; 0x70
 800bcee:	d87b      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf0:	2b60      	cmp	r3, #96	; 0x60
 800bcf2:	d050      	beq.n	800bd96 <HAL_TIM_ConfigClockSource+0x11a>
 800bcf4:	2b60      	cmp	r3, #96	; 0x60
 800bcf6:	d877      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf8:	2b50      	cmp	r3, #80	; 0x50
 800bcfa:	d03c      	beq.n	800bd76 <HAL_TIM_ConfigClockSource+0xfa>
 800bcfc:	2b50      	cmp	r3, #80	; 0x50
 800bcfe:	d873      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd00:	2b40      	cmp	r3, #64	; 0x40
 800bd02:	d058      	beq.n	800bdb6 <HAL_TIM_ConfigClockSource+0x13a>
 800bd04:	2b40      	cmp	r3, #64	; 0x40
 800bd06:	d86f      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd08:	2b30      	cmp	r3, #48	; 0x30
 800bd0a:	d064      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd0c:	2b30      	cmp	r3, #48	; 0x30
 800bd0e:	d86b      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	d060      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d867      	bhi.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d05c      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d05a      	beq.n	800bdd6 <HAL_TIM_ConfigClockSource+0x15a>
 800bd20:	e062      	b.n	800bde8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd32:	f000 fb25 	bl	800c380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	609a      	str	r2, [r3, #8]
      break;
 800bd4e:	e04f      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd60:	f000 fb0e 	bl	800c380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689a      	ldr	r2, [r3, #8]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd72:	609a      	str	r2, [r3, #8]
      break;
 800bd74:	e03c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd82:	461a      	mov	r2, r3
 800bd84:	f000 fa82 	bl	800c28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2150      	movs	r1, #80	; 0x50
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 fadb 	bl	800c34a <TIM_ITRx_SetConfig>
      break;
 800bd94:	e02c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bda2:	461a      	mov	r2, r3
 800bda4:	f000 faa1 	bl	800c2ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2160      	movs	r1, #96	; 0x60
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 facb 	bl	800c34a <TIM_ITRx_SetConfig>
      break;
 800bdb4:	e01c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f000 fa62 	bl	800c28c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2140      	movs	r1, #64	; 0x40
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fabb 	bl	800c34a <TIM_ITRx_SetConfig>
      break;
 800bdd4:	e00c      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f000 fab2 	bl	800c34a <TIM_ITRx_SetConfig>
      break;
 800bde6:	e003      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	73fb      	strb	r3, [r7, #15]
      break;
 800bdec:	e000      	b.n	800bdf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be12:	bf00      	nop
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr

0800be32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be32:	b480      	push	{r7}
 800be34:	b083      	sub	sp, #12
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be3a:	bf00      	nop
 800be3c:	370c      	adds	r7, #12
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr

0800be46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be46:	b480      	push	{r7}
 800be48:	b083      	sub	sp, #12
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be4e:	bf00      	nop
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a3a      	ldr	r2, [pc, #232]	; (800bf58 <TIM_Base_SetConfig+0xfc>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d00f      	beq.n	800be94 <TIM_Base_SetConfig+0x38>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be7a:	d00b      	beq.n	800be94 <TIM_Base_SetConfig+0x38>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a37      	ldr	r2, [pc, #220]	; (800bf5c <TIM_Base_SetConfig+0x100>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d007      	beq.n	800be94 <TIM_Base_SetConfig+0x38>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a36      	ldr	r2, [pc, #216]	; (800bf60 <TIM_Base_SetConfig+0x104>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d003      	beq.n	800be94 <TIM_Base_SetConfig+0x38>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a35      	ldr	r2, [pc, #212]	; (800bf64 <TIM_Base_SetConfig+0x108>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d108      	bne.n	800bea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a2b      	ldr	r2, [pc, #172]	; (800bf58 <TIM_Base_SetConfig+0xfc>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d01b      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb4:	d017      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a28      	ldr	r2, [pc, #160]	; (800bf5c <TIM_Base_SetConfig+0x100>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d013      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a27      	ldr	r2, [pc, #156]	; (800bf60 <TIM_Base_SetConfig+0x104>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d00f      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a26      	ldr	r2, [pc, #152]	; (800bf64 <TIM_Base_SetConfig+0x108>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00b      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a25      	ldr	r2, [pc, #148]	; (800bf68 <TIM_Base_SetConfig+0x10c>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d007      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a24      	ldr	r2, [pc, #144]	; (800bf6c <TIM_Base_SetConfig+0x110>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d003      	beq.n	800bee6 <TIM_Base_SetConfig+0x8a>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a23      	ldr	r2, [pc, #140]	; (800bf70 <TIM_Base_SetConfig+0x114>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d108      	bne.n	800bef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a0e      	ldr	r2, [pc, #56]	; (800bf58 <TIM_Base_SetConfig+0xfc>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d103      	bne.n	800bf2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	691a      	ldr	r2, [r3, #16]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d105      	bne.n	800bf4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	f023 0201 	bic.w	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	611a      	str	r2, [r3, #16]
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	40010000 	.word	0x40010000
 800bf5c:	40000400 	.word	0x40000400
 800bf60:	40000800 	.word	0x40000800
 800bf64:	40000c00 	.word	0x40000c00
 800bf68:	40014000 	.word	0x40014000
 800bf6c:	40014400 	.word	0x40014400
 800bf70:	40014800 	.word	0x40014800

0800bf74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a1b      	ldr	r3, [r3, #32]
 800bf82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a1b      	ldr	r3, [r3, #32]
 800bf88:	f023 0201 	bic.w	r2, r3, #1
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f023 0303 	bic.w	r3, r3, #3
 800bfaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f023 0302 	bic.w	r3, r3, #2
 800bfbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a1c      	ldr	r2, [pc, #112]	; (800c03c <TIM_OC1_SetConfig+0xc8>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d10c      	bne.n	800bfea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f023 0308 	bic.w	r3, r3, #8
 800bfd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f023 0304 	bic.w	r3, r3, #4
 800bfe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a13      	ldr	r2, [pc, #76]	; (800c03c <TIM_OC1_SetConfig+0xc8>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d111      	bne.n	800c016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	4313      	orrs	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	699b      	ldr	r3, [r3, #24]
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	4313      	orrs	r3, r2
 800c014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	697a      	ldr	r2, [r7, #20]
 800c02e:	621a      	str	r2, [r3, #32]
}
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	40010000 	.word	0x40010000

0800c040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	f023 0210 	bic.w	r2, r3, #16
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f023 0320 	bic.w	r3, r3, #32
 800c08a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a1e      	ldr	r2, [pc, #120]	; (800c114 <TIM_OC2_SetConfig+0xd4>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10d      	bne.n	800c0bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	4a15      	ldr	r2, [pc, #84]	; (800c114 <TIM_OC2_SetConfig+0xd4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d113      	bne.n	800c0ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	699b      	ldr	r3, [r3, #24]
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	621a      	str	r2, [r3, #32]
}
 800c106:	bf00      	nop
 800c108:	371c      	adds	r7, #28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40010000 	.word	0x40010000

0800c118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c118:	b480      	push	{r7}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 0303 	bic.w	r3, r3, #3
 800c14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	021b      	lsls	r3, r3, #8
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a1d      	ldr	r2, [pc, #116]	; (800c1e8 <TIM_OC3_SetConfig+0xd0>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d10d      	bne.n	800c192 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c17c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	021b      	lsls	r3, r3, #8
 800c184:	697a      	ldr	r2, [r7, #20]
 800c186:	4313      	orrs	r3, r2
 800c188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a14      	ldr	r2, [pc, #80]	; (800c1e8 <TIM_OC3_SetConfig+0xd0>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d113      	bne.n	800c1c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	621a      	str	r2, [r3, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	40010000 	.word	0x40010000

0800c1ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	69db      	ldr	r3, [r3, #28]
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	031b      	lsls	r3, r3, #12
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	4313      	orrs	r3, r2
 800c242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a10      	ldr	r2, [pc, #64]	; (800c288 <TIM_OC4_SetConfig+0x9c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d109      	bne.n	800c260 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	019b      	lsls	r3, r3, #6
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	621a      	str	r2, [r3, #32]
}
 800c27a:	bf00      	nop
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	40010000 	.word	0x40010000

0800c28c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	f023 0201 	bic.w	r2, r3, #1
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	f023 030a 	bic.w	r3, r3, #10
 800c2c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2ca:	697a      	ldr	r2, [r7, #20]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	621a      	str	r2, [r3, #32]
}
 800c2de:	bf00      	nop
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b087      	sub	sp, #28
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	60f8      	str	r0, [r7, #12]
 800c2f2:	60b9      	str	r1, [r7, #8]
 800c2f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	f023 0210 	bic.w	r2, r3, #16
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	031b      	lsls	r3, r3, #12
 800c31a:	693a      	ldr	r2, [r7, #16]
 800c31c:	4313      	orrs	r3, r2
 800c31e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	011b      	lsls	r3, r3, #4
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	621a      	str	r2, [r3, #32]
}
 800c33e:	bf00      	nop
 800c340:	371c      	adds	r7, #28
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4313      	orrs	r3, r2
 800c368:	f043 0307 	orr.w	r3, r3, #7
 800c36c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	609a      	str	r2, [r3, #8]
}
 800c374:	bf00      	nop
 800c376:	3714      	adds	r7, #20
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c380:	b480      	push	{r7}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c39a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	021a      	lsls	r2, r3, #8
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	609a      	str	r2, [r3, #8]
}
 800c3b4:	bf00      	nop
 800c3b6:	371c      	adds	r7, #28
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	f003 031f 	and.w	r3, r3, #31
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6a1a      	ldr	r2, [r3, #32]
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	43db      	mvns	r3, r3
 800c3e2:	401a      	ands	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6a1a      	ldr	r2, [r3, #32]
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f003 031f 	and.w	r3, r3, #31
 800c3f2:	6879      	ldr	r1, [r7, #4]
 800c3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3f8:	431a      	orrs	r2, r3
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	621a      	str	r2, [r3, #32]
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
	...

0800c40c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c41c:	2b01      	cmp	r3, #1
 800c41e:	d101      	bne.n	800c424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c420:	2302      	movs	r3, #2
 800c422:	e050      	b.n	800c4c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2202      	movs	r2, #2
 800c430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	4313      	orrs	r3, r2
 800c454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68fa      	ldr	r2, [r7, #12]
 800c45c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a1c      	ldr	r2, [pc, #112]	; (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d018      	beq.n	800c49a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c470:	d013      	beq.n	800c49a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a18      	ldr	r2, [pc, #96]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d00e      	beq.n	800c49a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a16      	ldr	r2, [pc, #88]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d009      	beq.n	800c49a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4a15      	ldr	r2, [pc, #84]	; (800c4e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d004      	beq.n	800c49a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a13      	ldr	r2, [pc, #76]	; (800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d10c      	bne.n	800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3714      	adds	r7, #20
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	40010000 	.word	0x40010000
 800c4d8:	40000400 	.word	0x40000400
 800c4dc:	40000800 	.word	0x40000800
 800c4e0:	40000c00 	.word	0x40000c00
 800c4e4:	40014000 	.word	0x40014000

0800c4e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b083      	sub	sp, #12
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c504:	bf00      	nop
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	e042      	b.n	800c5a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d106      	bne.n	800c53c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7fd fc28 	bl	8009d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2224      	movs	r2, #36	; 0x24
 800c540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68da      	ldr	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fa09 	bl	800c96c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	695a      	ldr	r2, [r3, #20]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2220      	movs	r2, #32
 800c594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2220      	movs	r2, #32
 800c59c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08a      	sub	sp, #40	; 0x28
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	603b      	str	r3, [r7, #0]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d175      	bne.n	800c6bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <HAL_UART_Transmit+0x2c>
 800c5d6:	88fb      	ldrh	r3, [r7, #6]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e06e      	b.n	800c6be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2221      	movs	r2, #33	; 0x21
 800c5ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5ee:	f7fd fcdf 	bl	8009fb0 <HAL_GetTick>
 800c5f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	88fa      	ldrh	r2, [r7, #6]
 800c5f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	88fa      	ldrh	r2, [r7, #6]
 800c5fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c608:	d108      	bne.n	800c61c <HAL_UART_Transmit+0x6c>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d104      	bne.n	800c61c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c612:	2300      	movs	r3, #0
 800c614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	61bb      	str	r3, [r7, #24]
 800c61a:	e003      	b.n	800c624 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c624:	e02e      	b.n	800c684 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	9300      	str	r3, [sp, #0]
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2200      	movs	r2, #0
 800c62e:	2180      	movs	r1, #128	; 0x80
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f8df 	bl	800c7f4 <UART_WaitOnFlagUntilTimeout>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d005      	beq.n	800c648 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2220      	movs	r2, #32
 800c640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800c644:	2303      	movs	r3, #3
 800c646:	e03a      	b.n	800c6be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	461a      	mov	r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c65c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	3302      	adds	r3, #2
 800c662:	61bb      	str	r3, [r7, #24]
 800c664:	e007      	b.n	800c676 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	781a      	ldrb	r2, [r3, #0]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c670:	69fb      	ldr	r3, [r7, #28]
 800c672:	3301      	adds	r3, #1
 800c674:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	3b01      	subs	r3, #1
 800c67e:	b29a      	uxth	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c688:	b29b      	uxth	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1cb      	bne.n	800c626 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2200      	movs	r2, #0
 800c696:	2140      	movs	r1, #64	; 0x40
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f000 f8ab 	bl	800c7f4 <UART_WaitOnFlagUntilTimeout>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e006      	b.n	800c6be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	e000      	b.n	800c6be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c6bc:	2302      	movs	r3, #2
  }
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3720      	adds	r7, #32
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b08a      	sub	sp, #40	; 0x28
 800c6ca:	af02      	add	r7, sp, #8
 800c6cc:	60f8      	str	r0, [r7, #12]
 800c6ce:	60b9      	str	r1, [r7, #8]
 800c6d0:	603b      	str	r3, [r7, #0]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	2b20      	cmp	r3, #32
 800c6e4:	f040 8081 	bne.w	800c7ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <HAL_UART_Receive+0x2e>
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e079      	b.n	800c7ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2222      	movs	r2, #34	; 0x22
 800c702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c70c:	f7fd fc50 	bl	8009fb0 <HAL_GetTick>
 800c710:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	88fa      	ldrh	r2, [r7, #6]
 800c71c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c726:	d108      	bne.n	800c73a <HAL_UART_Receive+0x74>
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d104      	bne.n	800c73a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800c730:	2300      	movs	r3, #0
 800c732:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	61bb      	str	r3, [r7, #24]
 800c738:	e003      	b.n	800c742 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800c742:	e047      	b.n	800c7d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2200      	movs	r2, #0
 800c74c:	2120      	movs	r1, #32
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 f850 	bl	800c7f4 <UART_WaitOnFlagUntilTimeout>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2220      	movs	r2, #32
 800c75e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800c762:	2303      	movs	r3, #3
 800c764:	e042      	b.n	800c7ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10c      	bne.n	800c786 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b29b      	uxth	r3, r3
 800c774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c778:	b29a      	uxth	r2, r3
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	3302      	adds	r3, #2
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	e01f      	b.n	800c7c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78e:	d007      	beq.n	800c7a0 <HAL_UART_Receive+0xda>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <HAL_UART_Receive+0xe8>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d106      	bne.n	800c7ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	e008      	b.n	800c7c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1b2      	bne.n	800c744 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2220      	movs	r2, #32
 800c7e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	e000      	b.n	800c7ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c7ea:	2302      	movs	r3, #2
  }
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3720      	adds	r7, #32
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	603b      	str	r3, [r7, #0]
 800c800:	4613      	mov	r3, r2
 800c802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c804:	e03b      	b.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c806:	6a3b      	ldr	r3, [r7, #32]
 800c808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c80c:	d037      	beq.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c80e:	f7fd fbcf 	bl	8009fb0 <HAL_GetTick>
 800c812:	4602      	mov	r2, r0
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	6a3a      	ldr	r2, [r7, #32]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d302      	bcc.n	800c824 <UART_WaitOnFlagUntilTimeout+0x30>
 800c81e:	6a3b      	ldr	r3, [r7, #32]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c824:	2303      	movs	r3, #3
 800c826:	e03a      	b.n	800c89e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	f003 0304 	and.w	r3, r3, #4
 800c832:	2b00      	cmp	r3, #0
 800c834:	d023      	beq.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	2b80      	cmp	r3, #128	; 0x80
 800c83a:	d020      	beq.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d01d      	beq.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f003 0308 	and.w	r3, r3, #8
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d116      	bne.n	800c87e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800c850:	2300      	movs	r3, #0
 800c852:	617b      	str	r3, [r7, #20]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	617b      	str	r3, [r7, #20]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	617b      	str	r3, [r7, #20]
 800c864:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c866:	68f8      	ldr	r0, [r7, #12]
 800c868:	f000 f81d 	bl	800c8a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2208      	movs	r2, #8
 800c870:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	e00f      	b.n	800c89e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4013      	ands	r3, r2
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	bf0c      	ite	eq
 800c88e:	2301      	moveq	r3, #1
 800c890:	2300      	movne	r3, #0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	461a      	mov	r2, r3
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d0b4      	beq.n	800c806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b095      	sub	sp, #84	; 0x54
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8ce:	643a      	str	r2, [r7, #64]	; 0x40
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e5      	bne.n	800c8ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3314      	adds	r3, #20
 800c8e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ea:	6a3b      	ldr	r3, [r7, #32]
 800c8ec:	e853 3f00 	ldrex	r3, [r3]
 800c8f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	f023 0301 	bic.w	r3, r3, #1
 800c8f8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3314      	adds	r3, #20
 800c900:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c902:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c90a:	e841 2300 	strex	r3, r2, [r1]
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e5      	bne.n	800c8e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d119      	bne.n	800c952 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	330c      	adds	r3, #12
 800c924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	e853 3f00 	ldrex	r3, [r3]
 800c92c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	f023 0310 	bic.w	r3, r3, #16
 800c934:	647b      	str	r3, [r7, #68]	; 0x44
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	330c      	adds	r3, #12
 800c93c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c93e:	61ba      	str	r2, [r7, #24]
 800c940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c942:	6979      	ldr	r1, [r7, #20]
 800c944:	69ba      	ldr	r2, [r7, #24]
 800c946:	e841 2300 	strex	r3, r2, [r1]
 800c94a:	613b      	str	r3, [r7, #16]
   return(result);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1e5      	bne.n	800c91e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2220      	movs	r2, #32
 800c956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c960:	bf00      	nop
 800c962:	3754      	adds	r7, #84	; 0x54
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c96c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c970:	b0c0      	sub	sp, #256	; 0x100
 800c972:	af00      	add	r7, sp, #0
 800c974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c988:	68d9      	ldr	r1, [r3, #12]
 800c98a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	ea40 0301 	orr.w	r3, r0, r1
 800c994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99a:	689a      	ldr	r2, [r3, #8]
 800c99c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c9c4:	f021 010c 	bic.w	r1, r1, #12
 800c9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c9d2:	430b      	orrs	r3, r1
 800c9d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e6:	6999      	ldr	r1, [r3, #24]
 800c9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	ea40 0301 	orr.w	r3, r0, r1
 800c9f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	4b8f      	ldr	r3, [pc, #572]	; (800cc38 <UART_SetConfig+0x2cc>)
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d005      	beq.n	800ca0c <UART_SetConfig+0xa0>
 800ca00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	4b8d      	ldr	r3, [pc, #564]	; (800cc3c <UART_SetConfig+0x2d0>)
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d104      	bne.n	800ca16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca0c:	f7fe fd82 	bl	800b514 <HAL_RCC_GetPCLK2Freq>
 800ca10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca14:	e003      	b.n	800ca1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca16:	f7fe fd69 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 800ca1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca28:	f040 810c 	bne.w	800cc44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca30:	2200      	movs	r2, #0
 800ca32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca3e:	4622      	mov	r2, r4
 800ca40:	462b      	mov	r3, r5
 800ca42:	1891      	adds	r1, r2, r2
 800ca44:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca46:	415b      	adcs	r3, r3
 800ca48:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca4e:	4621      	mov	r1, r4
 800ca50:	eb12 0801 	adds.w	r8, r2, r1
 800ca54:	4629      	mov	r1, r5
 800ca56:	eb43 0901 	adc.w	r9, r3, r1
 800ca5a:	f04f 0200 	mov.w	r2, #0
 800ca5e:	f04f 0300 	mov.w	r3, #0
 800ca62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca6e:	4690      	mov	r8, r2
 800ca70:	4699      	mov	r9, r3
 800ca72:	4623      	mov	r3, r4
 800ca74:	eb18 0303 	adds.w	r3, r8, r3
 800ca78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca7c:	462b      	mov	r3, r5
 800ca7e:	eb49 0303 	adc.w	r3, r9, r3
 800ca82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	18db      	adds	r3, r3, r3
 800ca9e:	653b      	str	r3, [r7, #80]	; 0x50
 800caa0:	4613      	mov	r3, r2
 800caa2:	eb42 0303 	adc.w	r3, r2, r3
 800caa6:	657b      	str	r3, [r7, #84]	; 0x54
 800caa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800caac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cab0:	f7fb ff84 	bl	80089bc <__aeabi_uldivmod>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4b61      	ldr	r3, [pc, #388]	; (800cc40 <UART_SetConfig+0x2d4>)
 800caba:	fba3 2302 	umull	r2, r3, r3, r2
 800cabe:	095b      	lsrs	r3, r3, #5
 800cac0:	011c      	lsls	r4, r3, #4
 800cac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cacc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cad4:	4642      	mov	r2, r8
 800cad6:	464b      	mov	r3, r9
 800cad8:	1891      	adds	r1, r2, r2
 800cada:	64b9      	str	r1, [r7, #72]	; 0x48
 800cadc:	415b      	adcs	r3, r3
 800cade:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cae4:	4641      	mov	r1, r8
 800cae6:	eb12 0a01 	adds.w	sl, r2, r1
 800caea:	4649      	mov	r1, r9
 800caec:	eb43 0b01 	adc.w	fp, r3, r1
 800caf0:	f04f 0200 	mov.w	r2, #0
 800caf4:	f04f 0300 	mov.w	r3, #0
 800caf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cafc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb04:	4692      	mov	sl, r2
 800cb06:	469b      	mov	fp, r3
 800cb08:	4643      	mov	r3, r8
 800cb0a:	eb1a 0303 	adds.w	r3, sl, r3
 800cb0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb12:	464b      	mov	r3, r9
 800cb14:	eb4b 0303 	adc.w	r3, fp, r3
 800cb18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb20:	685b      	ldr	r3, [r3, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb30:	460b      	mov	r3, r1
 800cb32:	18db      	adds	r3, r3, r3
 800cb34:	643b      	str	r3, [r7, #64]	; 0x40
 800cb36:	4613      	mov	r3, r2
 800cb38:	eb42 0303 	adc.w	r3, r2, r3
 800cb3c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb46:	f7fb ff39 	bl	80089bc <__aeabi_uldivmod>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4b3b      	ldr	r3, [pc, #236]	; (800cc40 <UART_SetConfig+0x2d4>)
 800cb52:	fba3 2301 	umull	r2, r3, r3, r1
 800cb56:	095b      	lsrs	r3, r3, #5
 800cb58:	2264      	movs	r2, #100	; 0x64
 800cb5a:	fb02 f303 	mul.w	r3, r2, r3
 800cb5e:	1acb      	subs	r3, r1, r3
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb66:	4b36      	ldr	r3, [pc, #216]	; (800cc40 <UART_SetConfig+0x2d4>)
 800cb68:	fba3 2302 	umull	r2, r3, r3, r2
 800cb6c:	095b      	lsrs	r3, r3, #5
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb74:	441c      	add	r4, r3
 800cb76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb88:	4642      	mov	r2, r8
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	1891      	adds	r1, r2, r2
 800cb8e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb90:	415b      	adcs	r3, r3
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb98:	4641      	mov	r1, r8
 800cb9a:	1851      	adds	r1, r2, r1
 800cb9c:	6339      	str	r1, [r7, #48]	; 0x30
 800cb9e:	4649      	mov	r1, r9
 800cba0:	414b      	adcs	r3, r1
 800cba2:	637b      	str	r3, [r7, #52]	; 0x34
 800cba4:	f04f 0200 	mov.w	r2, #0
 800cba8:	f04f 0300 	mov.w	r3, #0
 800cbac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cbb0:	4659      	mov	r1, fp
 800cbb2:	00cb      	lsls	r3, r1, #3
 800cbb4:	4651      	mov	r1, sl
 800cbb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbba:	4651      	mov	r1, sl
 800cbbc:	00ca      	lsls	r2, r1, #3
 800cbbe:	4610      	mov	r0, r2
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4642      	mov	r2, r8
 800cbc6:	189b      	adds	r3, r3, r2
 800cbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbcc:	464b      	mov	r3, r9
 800cbce:	460a      	mov	r2, r1
 800cbd0:	eb42 0303 	adc.w	r3, r2, r3
 800cbd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cbe4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cbe8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cbec:	460b      	mov	r3, r1
 800cbee:	18db      	adds	r3, r3, r3
 800cbf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	eb42 0303 	adc.w	r3, r2, r3
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc02:	f7fb fedb 	bl	80089bc <__aeabi_uldivmod>
 800cc06:	4602      	mov	r2, r0
 800cc08:	460b      	mov	r3, r1
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <UART_SetConfig+0x2d4>)
 800cc0c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc10:	095b      	lsrs	r3, r3, #5
 800cc12:	2164      	movs	r1, #100	; 0x64
 800cc14:	fb01 f303 	mul.w	r3, r1, r3
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	3332      	adds	r3, #50	; 0x32
 800cc1e:	4a08      	ldr	r2, [pc, #32]	; (800cc40 <UART_SetConfig+0x2d4>)
 800cc20:	fba2 2303 	umull	r2, r3, r2, r3
 800cc24:	095b      	lsrs	r3, r3, #5
 800cc26:	f003 0207 	and.w	r2, r3, #7
 800cc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4422      	add	r2, r4
 800cc32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc34:	e106      	b.n	800ce44 <UART_SetConfig+0x4d8>
 800cc36:	bf00      	nop
 800cc38:	40011000 	.word	0x40011000
 800cc3c:	40011400 	.word	0x40011400
 800cc40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc56:	4642      	mov	r2, r8
 800cc58:	464b      	mov	r3, r9
 800cc5a:	1891      	adds	r1, r2, r2
 800cc5c:	6239      	str	r1, [r7, #32]
 800cc5e:	415b      	adcs	r3, r3
 800cc60:	627b      	str	r3, [r7, #36]	; 0x24
 800cc62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc66:	4641      	mov	r1, r8
 800cc68:	1854      	adds	r4, r2, r1
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	eb43 0501 	adc.w	r5, r3, r1
 800cc70:	f04f 0200 	mov.w	r2, #0
 800cc74:	f04f 0300 	mov.w	r3, #0
 800cc78:	00eb      	lsls	r3, r5, #3
 800cc7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc7e:	00e2      	lsls	r2, r4, #3
 800cc80:	4614      	mov	r4, r2
 800cc82:	461d      	mov	r5, r3
 800cc84:	4643      	mov	r3, r8
 800cc86:	18e3      	adds	r3, r4, r3
 800cc88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc8c:	464b      	mov	r3, r9
 800cc8e:	eb45 0303 	adc.w	r3, r5, r3
 800cc92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cca6:	f04f 0200 	mov.w	r2, #0
 800ccaa:	f04f 0300 	mov.w	r3, #0
 800ccae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	008b      	lsls	r3, r1, #2
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	008a      	lsls	r2, r1, #2
 800ccc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ccc4:	f7fb fe7a 	bl	80089bc <__aeabi_uldivmod>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	4b60      	ldr	r3, [pc, #384]	; (800ce50 <UART_SetConfig+0x4e4>)
 800ccce:	fba3 2302 	umull	r2, r3, r3, r2
 800ccd2:	095b      	lsrs	r3, r3, #5
 800ccd4:	011c      	lsls	r4, r3, #4
 800ccd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	1891      	adds	r1, r2, r2
 800ccee:	61b9      	str	r1, [r7, #24]
 800ccf0:	415b      	adcs	r3, r3
 800ccf2:	61fb      	str	r3, [r7, #28]
 800ccf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccf8:	4641      	mov	r1, r8
 800ccfa:	1851      	adds	r1, r2, r1
 800ccfc:	6139      	str	r1, [r7, #16]
 800ccfe:	4649      	mov	r1, r9
 800cd00:	414b      	adcs	r3, r1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd10:	4659      	mov	r1, fp
 800cd12:	00cb      	lsls	r3, r1, #3
 800cd14:	4651      	mov	r1, sl
 800cd16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd1a:	4651      	mov	r1, sl
 800cd1c:	00ca      	lsls	r2, r1, #3
 800cd1e:	4610      	mov	r0, r2
 800cd20:	4619      	mov	r1, r3
 800cd22:	4603      	mov	r3, r0
 800cd24:	4642      	mov	r2, r8
 800cd26:	189b      	adds	r3, r3, r2
 800cd28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	460a      	mov	r2, r1
 800cd30:	eb42 0303 	adc.w	r3, r2, r3
 800cd34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd42:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd44:	f04f 0200 	mov.w	r2, #0
 800cd48:	f04f 0300 	mov.w	r3, #0
 800cd4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd50:	4649      	mov	r1, r9
 800cd52:	008b      	lsls	r3, r1, #2
 800cd54:	4641      	mov	r1, r8
 800cd56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd5a:	4641      	mov	r1, r8
 800cd5c:	008a      	lsls	r2, r1, #2
 800cd5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd62:	f7fb fe2b 	bl	80089bc <__aeabi_uldivmod>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4b38      	ldr	r3, [pc, #224]	; (800ce50 <UART_SetConfig+0x4e4>)
 800cd6e:	fba3 2301 	umull	r2, r3, r3, r1
 800cd72:	095b      	lsrs	r3, r3, #5
 800cd74:	2264      	movs	r2, #100	; 0x64
 800cd76:	fb02 f303 	mul.w	r3, r2, r3
 800cd7a:	1acb      	subs	r3, r1, r3
 800cd7c:	011b      	lsls	r3, r3, #4
 800cd7e:	3332      	adds	r3, #50	; 0x32
 800cd80:	4a33      	ldr	r2, [pc, #204]	; (800ce50 <UART_SetConfig+0x4e4>)
 800cd82:	fba2 2303 	umull	r2, r3, r2, r3
 800cd86:	095b      	lsrs	r3, r3, #5
 800cd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd8c:	441c      	add	r4, r3
 800cd8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd92:	2200      	movs	r2, #0
 800cd94:	673b      	str	r3, [r7, #112]	; 0x70
 800cd96:	677a      	str	r2, [r7, #116]	; 0x74
 800cd98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd9c:	4642      	mov	r2, r8
 800cd9e:	464b      	mov	r3, r9
 800cda0:	1891      	adds	r1, r2, r2
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	415b      	adcs	r3, r3
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdac:	4641      	mov	r1, r8
 800cdae:	1851      	adds	r1, r2, r1
 800cdb0:	6039      	str	r1, [r7, #0]
 800cdb2:	4649      	mov	r1, r9
 800cdb4:	414b      	adcs	r3, r1
 800cdb6:	607b      	str	r3, [r7, #4]
 800cdb8:	f04f 0200 	mov.w	r2, #0
 800cdbc:	f04f 0300 	mov.w	r3, #0
 800cdc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cdc4:	4659      	mov	r1, fp
 800cdc6:	00cb      	lsls	r3, r1, #3
 800cdc8:	4651      	mov	r1, sl
 800cdca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cdce:	4651      	mov	r1, sl
 800cdd0:	00ca      	lsls	r2, r1, #3
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	4642      	mov	r2, r8
 800cdda:	189b      	adds	r3, r3, r2
 800cddc:	66bb      	str	r3, [r7, #104]	; 0x68
 800cdde:	464b      	mov	r3, r9
 800cde0:	460a      	mov	r2, r1
 800cde2:	eb42 0303 	adc.w	r3, r2, r3
 800cde6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	663b      	str	r3, [r7, #96]	; 0x60
 800cdf2:	667a      	str	r2, [r7, #100]	; 0x64
 800cdf4:	f04f 0200 	mov.w	r2, #0
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce00:	4649      	mov	r1, r9
 800ce02:	008b      	lsls	r3, r1, #2
 800ce04:	4641      	mov	r1, r8
 800ce06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce0a:	4641      	mov	r1, r8
 800ce0c:	008a      	lsls	r2, r1, #2
 800ce0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce12:	f7fb fdd3 	bl	80089bc <__aeabi_uldivmod>
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4b0d      	ldr	r3, [pc, #52]	; (800ce50 <UART_SetConfig+0x4e4>)
 800ce1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce20:	095b      	lsrs	r3, r3, #5
 800ce22:	2164      	movs	r1, #100	; 0x64
 800ce24:	fb01 f303 	mul.w	r3, r1, r3
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	3332      	adds	r3, #50	; 0x32
 800ce2e:	4a08      	ldr	r2, [pc, #32]	; (800ce50 <UART_SetConfig+0x4e4>)
 800ce30:	fba2 2303 	umull	r2, r3, r2, r3
 800ce34:	095b      	lsrs	r3, r3, #5
 800ce36:	f003 020f 	and.w	r2, r3, #15
 800ce3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4422      	add	r2, r4
 800ce42:	609a      	str	r2, [r3, #8]
}
 800ce44:	bf00      	nop
 800ce46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce50:	51eb851f 	.word	0x51eb851f

0800ce54 <__NVIC_SetPriority>:
{
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	db0a      	blt.n	800ce7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	490c      	ldr	r1, [pc, #48]	; (800cea0 <__NVIC_SetPriority+0x4c>)
 800ce6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce72:	0112      	lsls	r2, r2, #4
 800ce74:	b2d2      	uxtb	r2, r2
 800ce76:	440b      	add	r3, r1
 800ce78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce7c:	e00a      	b.n	800ce94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	4908      	ldr	r1, [pc, #32]	; (800cea4 <__NVIC_SetPriority+0x50>)
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	f003 030f 	and.w	r3, r3, #15
 800ce8a:	3b04      	subs	r3, #4
 800ce8c:	0112      	lsls	r2, r2, #4
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	440b      	add	r3, r1
 800ce92:	761a      	strb	r2, [r3, #24]
}
 800ce94:	bf00      	nop
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	e000e100 	.word	0xe000e100
 800cea4:	e000ed00 	.word	0xe000ed00

0800cea8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ceac:	4b05      	ldr	r3, [pc, #20]	; (800cec4 <SysTick_Handler+0x1c>)
 800ceae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ceb0:	f001 fcfe 	bl	800e8b0 <xTaskGetSchedulerState>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d001      	beq.n	800cebe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ceba:	f002 fae5 	bl	800f488 <xPortSysTickHandler>
  }
}
 800cebe:	bf00      	nop
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	e000e010 	.word	0xe000e010

0800cec8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cec8:	b580      	push	{r7, lr}
 800ceca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cecc:	2100      	movs	r1, #0
 800cece:	f06f 0004 	mvn.w	r0, #4
 800ced2:	f7ff ffbf 	bl	800ce54 <__NVIC_SetPriority>
#endif
}
 800ced6:	bf00      	nop
 800ced8:	bd80      	pop	{r7, pc}
	...

0800cedc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cee2:	f3ef 8305 	mrs	r3, IPSR
 800cee6:	603b      	str	r3, [r7, #0]
  return(result);
 800cee8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d003      	beq.n	800cef6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ceee:	f06f 0305 	mvn.w	r3, #5
 800cef2:	607b      	str	r3, [r7, #4]
 800cef4:	e00c      	b.n	800cf10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cef6:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <osKernelInitialize+0x44>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d105      	bne.n	800cf0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cefe:	4b08      	ldr	r3, [pc, #32]	; (800cf20 <osKernelInitialize+0x44>)
 800cf00:	2201      	movs	r2, #1
 800cf02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	607b      	str	r3, [r7, #4]
 800cf08:	e002      	b.n	800cf10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf10:	687b      	ldr	r3, [r7, #4]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	370c      	adds	r7, #12
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	20000298 	.word	0x20000298

0800cf24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf2a:	f3ef 8305 	mrs	r3, IPSR
 800cf2e:	603b      	str	r3, [r7, #0]
  return(result);
 800cf30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf36:	f06f 0305 	mvn.w	r3, #5
 800cf3a:	607b      	str	r3, [r7, #4]
 800cf3c:	e010      	b.n	800cf60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf3e:	4b0b      	ldr	r3, [pc, #44]	; (800cf6c <osKernelStart+0x48>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d109      	bne.n	800cf5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf46:	f7ff ffbf 	bl	800cec8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf4a:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <osKernelStart+0x48>)
 800cf4c:	2202      	movs	r2, #2
 800cf4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf50:	f001 f866 	bl	800e020 <vTaskStartScheduler>
      stat = osOK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	607b      	str	r3, [r7, #4]
 800cf58:	e002      	b.n	800cf60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf60:	687b      	ldr	r3, [r7, #4]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20000298 	.word	0x20000298

0800cf70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08e      	sub	sp, #56	; 0x38
 800cf74:	af04      	add	r7, sp, #16
 800cf76:	60f8      	str	r0, [r7, #12]
 800cf78:	60b9      	str	r1, [r7, #8]
 800cf7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf80:	f3ef 8305 	mrs	r3, IPSR
 800cf84:	617b      	str	r3, [r7, #20]
  return(result);
 800cf86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d17e      	bne.n	800d08a <osThreadNew+0x11a>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d07b      	beq.n	800d08a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cf92:	2380      	movs	r3, #128	; 0x80
 800cf94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cf96:	2318      	movs	r3, #24
 800cf98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cf9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cfa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d045      	beq.n	800d036 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <osThreadNew+0x48>
        name = attr->name;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	699b      	ldr	r3, [r3, #24]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d008      	beq.n	800cfde <osThreadNew+0x6e>
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	2b38      	cmp	r3, #56	; 0x38
 800cfd0:	d805      	bhi.n	800cfde <osThreadNew+0x6e>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <osThreadNew+0x72>
        return (NULL);
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e054      	b.n	800d08c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d003      	beq.n	800cff2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	089b      	lsrs	r3, r3, #2
 800cff0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	689b      	ldr	r3, [r3, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00e      	beq.n	800d018 <osThreadNew+0xa8>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	2b5b      	cmp	r3, #91	; 0x5b
 800d000:	d90a      	bls.n	800d018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d006:	2b00      	cmp	r3, #0
 800d008:	d006      	beq.n	800d018 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d002      	beq.n	800d018 <osThreadNew+0xa8>
        mem = 1;
 800d012:	2301      	movs	r3, #1
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	e010      	b.n	800d03a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10c      	bne.n	800d03a <osThreadNew+0xca>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d108      	bne.n	800d03a <osThreadNew+0xca>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d104      	bne.n	800d03a <osThreadNew+0xca>
          mem = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	61bb      	str	r3, [r7, #24]
 800d034:	e001      	b.n	800d03a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d110      	bne.n	800d062 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d048:	9202      	str	r2, [sp, #8]
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	69fb      	ldr	r3, [r7, #28]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	6a3a      	ldr	r2, [r7, #32]
 800d054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f000 fe0c 	bl	800dc74 <xTaskCreateStatic>
 800d05c:	4603      	mov	r3, r0
 800d05e:	613b      	str	r3, [r7, #16]
 800d060:	e013      	b.n	800d08a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d110      	bne.n	800d08a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	b29a      	uxth	r2, r3
 800d06c:	f107 0310 	add.w	r3, r7, #16
 800d070:	9301      	str	r3, [sp, #4]
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f000 fe57 	bl	800dd2e <xTaskCreate>
 800d080:	4603      	mov	r3, r0
 800d082:	2b01      	cmp	r3, #1
 800d084:	d001      	beq.n	800d08a <osThreadNew+0x11a>
            hTask = NULL;
 800d086:	2300      	movs	r3, #0
 800d088:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d08a:	693b      	ldr	r3, [r7, #16]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3728      	adds	r7, #40	; 0x28
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d09c:	f3ef 8305 	mrs	r3, IPSR
 800d0a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d003      	beq.n	800d0b0 <osDelay+0x1c>
    stat = osErrorISR;
 800d0a8:	f06f 0305 	mvn.w	r3, #5
 800d0ac:	60fb      	str	r3, [r7, #12]
 800d0ae:	e007      	b.n	800d0c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d002      	beq.n	800d0c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 ff7c 	bl	800dfb8 <vTaskDelay>
    }
  }

  return (stat);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0cc:	b480      	push	{r7}
 800d0ce:	b085      	sub	sp, #20
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	4a07      	ldr	r2, [pc, #28]	; (800d0f8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	4a06      	ldr	r2, [pc, #24]	; (800d0fc <vApplicationGetIdleTaskMemory+0x30>)
 800d0e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2280      	movs	r2, #128	; 0x80
 800d0e8:	601a      	str	r2, [r3, #0]
}
 800d0ea:	bf00      	nop
 800d0ec:	3714      	adds	r7, #20
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	2000029c 	.word	0x2000029c
 800d0fc:	200002f8 	.word	0x200002f8

0800d100 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d100:	b480      	push	{r7}
 800d102:	b085      	sub	sp, #20
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4a07      	ldr	r2, [pc, #28]	; (800d12c <vApplicationGetTimerTaskMemory+0x2c>)
 800d110:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	4a06      	ldr	r2, [pc, #24]	; (800d130 <vApplicationGetTimerTaskMemory+0x30>)
 800d116:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d11e:	601a      	str	r2, [r3, #0]
}
 800d120:	bf00      	nop
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	200004f8 	.word	0x200004f8
 800d130:	20000554 	.word	0x20000554

0800d134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f103 0208 	add.w	r2, r3, #8
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f04f 32ff 	mov.w	r2, #4294967295
 800d14c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f103 0208 	add.w	r2, r3, #8
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f103 0208 	add.w	r2, r3, #8
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d182:	bf00      	nop
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d18e:	b480      	push	{r7}
 800d190:	b085      	sub	sp, #20
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	689a      	ldr	r2, [r3, #8]
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	683a      	ldr	r2, [r7, #0]
 800d1b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	1c5a      	adds	r2, r3, #1
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	601a      	str	r2, [r3, #0]
}
 800d1ca:	bf00      	nop
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr

0800d1d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1d6:	b480      	push	{r7}
 800d1d8:	b085      	sub	sp, #20
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
 800d1de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ec:	d103      	bne.n	800d1f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e00c      	b.n	800d210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3308      	adds	r3, #8
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	e002      	b.n	800d204 <vListInsert+0x2e>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	60fb      	str	r3, [r7, #12]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d2f6      	bcs.n	800d1fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	68fa      	ldr	r2, [r7, #12]
 800d224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	601a      	str	r2, [r3, #0]
}
 800d23c:	bf00      	nop
 800d23e:	3714      	adds	r7, #20
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr

0800d248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	6892      	ldr	r2, [r2, #8]
 800d25e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	6852      	ldr	r2, [r2, #4]
 800d268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d103      	bne.n	800d27c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	1e5a      	subs	r2, r3, #1
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10a      	bne.n	800d2c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2c2:	bf00      	nop
 800d2c4:	e7fe      	b.n	800d2c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2c6:	f002 f84d 	bl	800f364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d2:	68f9      	ldr	r1, [r7, #12]
 800d2d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2d6:	fb01 f303 	mul.w	r3, r1, r3
 800d2da:	441a      	add	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2f6:	3b01      	subs	r3, #1
 800d2f8:	68f9      	ldr	r1, [r7, #12]
 800d2fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2fc:	fb01 f303 	mul.w	r3, r1, r3
 800d300:	441a      	add	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	22ff      	movs	r2, #255	; 0xff
 800d30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	22ff      	movs	r2, #255	; 0xff
 800d312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d114      	bne.n	800d346 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d01a      	beq.n	800d35a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3310      	adds	r3, #16
 800d328:	4618      	mov	r0, r3
 800d32a:	f001 f903 	bl	800e534 <xTaskRemoveFromEventList>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d012      	beq.n	800d35a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d334:	4b0c      	ldr	r3, [pc, #48]	; (800d368 <xQueueGenericReset+0xcc>)
 800d336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d33a:	601a      	str	r2, [r3, #0]
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	f3bf 8f6f 	isb	sy
 800d344:	e009      	b.n	800d35a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	3310      	adds	r3, #16
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7ff fef2 	bl	800d134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	3324      	adds	r3, #36	; 0x24
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff feed 	bl	800d134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d35a:	f002 f833 	bl	800f3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d35e:	2301      	movs	r3, #1
}
 800d360:	4618      	mov	r0, r3
 800d362:	3710      	adds	r7, #16
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	e000ed04 	.word	0xe000ed04

0800d36c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08e      	sub	sp, #56	; 0x38
 800d370:	af02      	add	r7, sp, #8
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	607a      	str	r2, [r7, #4]
 800d378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10a      	bne.n	800d396 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d384:	f383 8811 	msr	BASEPRI, r3
 800d388:	f3bf 8f6f 	isb	sy
 800d38c:	f3bf 8f4f 	dsb	sy
 800d390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d392:	bf00      	nop
 800d394:	e7fe      	b.n	800d394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d002      	beq.n	800d3be <xQueueGenericCreateStatic+0x52>
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <xQueueGenericCreateStatic+0x56>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e000      	b.n	800d3c4 <xQueueGenericCreateStatic+0x58>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3cc:	f383 8811 	msr	BASEPRI, r3
 800d3d0:	f3bf 8f6f 	isb	sy
 800d3d4:	f3bf 8f4f 	dsb	sy
 800d3d8:	623b      	str	r3, [r7, #32]
}
 800d3da:	bf00      	nop
 800d3dc:	e7fe      	b.n	800d3dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <xQueueGenericCreateStatic+0x7e>
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d101      	bne.n	800d3ee <xQueueGenericCreateStatic+0x82>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <xQueueGenericCreateStatic+0x84>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f8:	f383 8811 	msr	BASEPRI, r3
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f3bf 8f4f 	dsb	sy
 800d404:	61fb      	str	r3, [r7, #28]
}
 800d406:	bf00      	nop
 800d408:	e7fe      	b.n	800d408 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d40a:	2350      	movs	r3, #80	; 0x50
 800d40c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b50      	cmp	r3, #80	; 0x50
 800d412:	d00a      	beq.n	800d42a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	61bb      	str	r3, [r7, #24]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d42a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00d      	beq.n	800d452 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d43e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	4613      	mov	r3, r2
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	68b9      	ldr	r1, [r7, #8]
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f000 f805 	bl	800d45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d454:	4618      	mov	r0, r3
 800d456:	3730      	adds	r7, #48	; 0x30
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
 800d468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d103      	bne.n	800d478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	e002      	b.n	800d47e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d48a:	2101      	movs	r1, #1
 800d48c:	69b8      	ldr	r0, [r7, #24]
 800d48e:	f7ff ff05 	bl	800d29c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	78fa      	ldrb	r2, [r7, #3]
 800d496:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d49a:	bf00      	nop
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08e      	sub	sp, #56	; 0x38
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xQueueGenericSend+0x32>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d103      	bne.n	800d4e4 <xQueueGenericSend+0x40>
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d101      	bne.n	800d4e8 <xQueueGenericSend+0x44>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e000      	b.n	800d4ea <xQueueGenericSend+0x46>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10a      	bne.n	800d504 <xQueueGenericSend+0x60>
	__asm volatile
 800d4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f2:	f383 8811 	msr	BASEPRI, r3
 800d4f6:	f3bf 8f6f 	isb	sy
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d500:	bf00      	nop
 800d502:	e7fe      	b.n	800d502 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b02      	cmp	r3, #2
 800d508:	d103      	bne.n	800d512 <xQueueGenericSend+0x6e>
 800d50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d101      	bne.n	800d516 <xQueueGenericSend+0x72>
 800d512:	2301      	movs	r3, #1
 800d514:	e000      	b.n	800d518 <xQueueGenericSend+0x74>
 800d516:	2300      	movs	r3, #0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10a      	bne.n	800d532 <xQueueGenericSend+0x8e>
	__asm volatile
 800d51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d520:	f383 8811 	msr	BASEPRI, r3
 800d524:	f3bf 8f6f 	isb	sy
 800d528:	f3bf 8f4f 	dsb	sy
 800d52c:	623b      	str	r3, [r7, #32]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d532:	f001 f9bd 	bl	800e8b0 <xTaskGetSchedulerState>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <xQueueGenericSend+0x9e>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <xQueueGenericSend+0xa2>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <xQueueGenericSend+0xa4>
 800d546:	2300      	movs	r3, #0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <xQueueGenericSend+0xbe>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	61fb      	str	r3, [r7, #28]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d562:	f001 feff 	bl	800f364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56e:	429a      	cmp	r2, r3
 800d570:	d302      	bcc.n	800d578 <xQueueGenericSend+0xd4>
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	2b02      	cmp	r3, #2
 800d576:	d129      	bne.n	800d5cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d57e:	f000 fa0b 	bl	800d998 <prvCopyDataToQueue>
 800d582:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d010      	beq.n	800d5ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58e:	3324      	adds	r3, #36	; 0x24
 800d590:	4618      	mov	r0, r3
 800d592:	f000 ffcf 	bl	800e534 <xTaskRemoveFromEventList>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d013      	beq.n	800d5c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d59c:	4b3f      	ldr	r3, [pc, #252]	; (800d69c <xQueueGenericSend+0x1f8>)
 800d59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	e00a      	b.n	800d5c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d007      	beq.n	800d5c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5b4:	4b39      	ldr	r3, [pc, #228]	; (800d69c <xQueueGenericSend+0x1f8>)
 800d5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5ba:	601a      	str	r2, [r3, #0]
 800d5bc:	f3bf 8f4f 	dsb	sy
 800d5c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5c4:	f001 fefe 	bl	800f3c4 <vPortExitCritical>
				return pdPASS;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e063      	b.n	800d694 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d103      	bne.n	800d5da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5d2:	f001 fef7 	bl	800f3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e05c      	b.n	800d694 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5e0:	f107 0314 	add.w	r3, r7, #20
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f001 f809 	bl	800e5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5ee:	f001 fee9 	bl	800f3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5f2:	f000 fd7b 	bl	800e0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5f6:	f001 feb5 	bl	800f364 <vPortEnterCritical>
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d600:	b25b      	sxtb	r3, r3
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d606:	d103      	bne.n	800d610 <xQueueGenericSend+0x16c>
 800d608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d616:	b25b      	sxtb	r3, r3
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d103      	bne.n	800d626 <xQueueGenericSend+0x182>
 800d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d626:	f001 fecd 	bl	800f3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d62a:	1d3a      	adds	r2, r7, #4
 800d62c:	f107 0314 	add.w	r3, r7, #20
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f000 fff8 	bl	800e628 <xTaskCheckForTimeOut>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d124      	bne.n	800d688 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d63e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d640:	f000 faa2 	bl	800db88 <prvIsQueueFull>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d018      	beq.n	800d67c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	3310      	adds	r3, #16
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4611      	mov	r1, r2
 800d652:	4618      	mov	r0, r3
 800d654:	f000 ff1e 	bl	800e494 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65a:	f000 fa2d 	bl	800dab8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d65e:	f000 fd53 	bl	800e108 <xTaskResumeAll>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	f47f af7c 	bne.w	800d562 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d66a:	4b0c      	ldr	r3, [pc, #48]	; (800d69c <xQueueGenericSend+0x1f8>)
 800d66c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d670:	601a      	str	r2, [r3, #0]
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	e772      	b.n	800d562 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d67e:	f000 fa1b 	bl	800dab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d682:	f000 fd41 	bl	800e108 <xTaskResumeAll>
 800d686:	e76c      	b.n	800d562 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d68a:	f000 fa15 	bl	800dab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d68e:	f000 fd3b 	bl	800e108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d692:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d694:	4618      	mov	r0, r3
 800d696:	3738      	adds	r7, #56	; 0x38
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	e000ed04 	.word	0xe000ed04

0800d6a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b090      	sub	sp, #64	; 0x40
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10a      	bne.n	800d6ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d103      	bne.n	800d6dc <xQueueGenericSendFromISR+0x3c>
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d101      	bne.n	800d6e0 <xQueueGenericSendFromISR+0x40>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e000      	b.n	800d6e2 <xQueueGenericSendFromISR+0x42>
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10a      	bne.n	800d6fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ea:	f383 8811 	msr	BASEPRI, r3
 800d6ee:	f3bf 8f6f 	isb	sy
 800d6f2:	f3bf 8f4f 	dsb	sy
 800d6f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6f8:	bf00      	nop
 800d6fa:	e7fe      	b.n	800d6fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d103      	bne.n	800d70a <xQueueGenericSendFromISR+0x6a>
 800d702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d706:	2b01      	cmp	r3, #1
 800d708:	d101      	bne.n	800d70e <xQueueGenericSendFromISR+0x6e>
 800d70a:	2301      	movs	r3, #1
 800d70c:	e000      	b.n	800d710 <xQueueGenericSendFromISR+0x70>
 800d70e:	2300      	movs	r3, #0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	623b      	str	r3, [r7, #32]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d72a:	f001 fefd 	bl	800f528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d72e:	f3ef 8211 	mrs	r2, BASEPRI
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	61fa      	str	r2, [r7, #28]
 800d744:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d746:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d748:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d752:	429a      	cmp	r2, r3
 800d754:	d302      	bcc.n	800d75c <xQueueGenericSendFromISR+0xbc>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d12f      	bne.n	800d7bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d772:	f000 f911 	bl	800d998 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d776:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77e:	d112      	bne.n	800d7a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d784:	2b00      	cmp	r3, #0
 800d786:	d016      	beq.n	800d7b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78a:	3324      	adds	r3, #36	; 0x24
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fed1 	bl	800e534 <xTaskRemoveFromEventList>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00e      	beq.n	800d7b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00b      	beq.n	800d7b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]
 800d7a4:	e007      	b.n	800d7b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	b25a      	sxtb	r2, r3
 800d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d7ba:	e001      	b.n	800d7c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d7ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3740      	adds	r7, #64	; 0x40
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
	...

0800d7d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b08c      	sub	sp, #48	; 0x30
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10a      	bne.n	800d808 <xQueueReceive+0x30>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f6:	f383 8811 	msr	BASEPRI, r3
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	623b      	str	r3, [r7, #32]
}
 800d804:	bf00      	nop
 800d806:	e7fe      	b.n	800d806 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d103      	bne.n	800d816 <xQueueReceive+0x3e>
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <xQueueReceive+0x42>
 800d816:	2301      	movs	r3, #1
 800d818:	e000      	b.n	800d81c <xQueueReceive+0x44>
 800d81a:	2300      	movs	r3, #0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10a      	bne.n	800d836 <xQueueReceive+0x5e>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	61fb      	str	r3, [r7, #28]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d836:	f001 f83b 	bl	800e8b0 <xTaskGetSchedulerState>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d102      	bne.n	800d846 <xQueueReceive+0x6e>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d101      	bne.n	800d84a <xQueueReceive+0x72>
 800d846:	2301      	movs	r3, #1
 800d848:	e000      	b.n	800d84c <xQueueReceive+0x74>
 800d84a:	2300      	movs	r3, #0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10a      	bne.n	800d866 <xQueueReceive+0x8e>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	61bb      	str	r3, [r7, #24]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d866:	f001 fd7d 	bl	800f364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d872:	2b00      	cmp	r3, #0
 800d874:	d01f      	beq.n	800d8b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d876:	68b9      	ldr	r1, [r7, #8]
 800d878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d87a:	f000 f8f7 	bl	800da6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	1e5a      	subs	r2, r3, #1
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00f      	beq.n	800d8ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	3310      	adds	r3, #16
 800d892:	4618      	mov	r0, r3
 800d894:	f000 fe4e 	bl	800e534 <xTaskRemoveFromEventList>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d007      	beq.n	800d8ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d89e:	4b3d      	ldr	r3, [pc, #244]	; (800d994 <xQueueReceive+0x1bc>)
 800d8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	f3bf 8f4f 	dsb	sy
 800d8aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d8ae:	f001 fd89 	bl	800f3c4 <vPortExitCritical>
				return pdPASS;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e069      	b.n	800d98a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d103      	bne.n	800d8c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d8bc:	f001 fd82 	bl	800f3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	e062      	b.n	800d98a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d106      	bne.n	800d8d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d8ca:	f107 0310 	add.w	r3, r7, #16
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f000 fe94 	bl	800e5fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d8d8:	f001 fd74 	bl	800f3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d8dc:	f000 fc06 	bl	800e0ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d8e0:	f001 fd40 	bl	800f364 <vPortEnterCritical>
 800d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d8ea:	b25b      	sxtb	r3, r3
 800d8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f0:	d103      	bne.n	800d8fa <xQueueReceive+0x122>
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d900:	b25b      	sxtb	r3, r3
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d906:	d103      	bne.n	800d910 <xQueueReceive+0x138>
 800d908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d910:	f001 fd58 	bl	800f3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d914:	1d3a      	adds	r2, r7, #4
 800d916:	f107 0310 	add.w	r3, r7, #16
 800d91a:	4611      	mov	r1, r2
 800d91c:	4618      	mov	r0, r3
 800d91e:	f000 fe83 	bl	800e628 <xTaskCheckForTimeOut>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d123      	bne.n	800d970 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92a:	f000 f917 	bl	800db5c <prvIsQueueEmpty>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d017      	beq.n	800d964 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d936:	3324      	adds	r3, #36	; 0x24
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	4611      	mov	r1, r2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f000 fda9 	bl	800e494 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d944:	f000 f8b8 	bl	800dab8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d948:	f000 fbde 	bl	800e108 <xTaskResumeAll>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d189      	bne.n	800d866 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d952:	4b10      	ldr	r3, [pc, #64]	; (800d994 <xQueueReceive+0x1bc>)
 800d954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d958:	601a      	str	r2, [r3, #0]
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	e780      	b.n	800d866 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d966:	f000 f8a7 	bl	800dab8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d96a:	f000 fbcd 	bl	800e108 <xTaskResumeAll>
 800d96e:	e77a      	b.n	800d866 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d972:	f000 f8a1 	bl	800dab8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d976:	f000 fbc7 	bl	800e108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d97c:	f000 f8ee 	bl	800db5c <prvIsQueueEmpty>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	f43f af6f 	beq.w	800d866 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d988:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3730      	adds	r7, #48	; 0x30
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	e000ed04 	.word	0xe000ed04

0800d998 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10d      	bne.n	800d9d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d14d      	bne.n	800da5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 ff92 	bl	800e8ec <xTaskPriorityDisinherit>
 800d9c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	609a      	str	r2, [r3, #8]
 800d9d0:	e043      	b.n	800da5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d119      	bne.n	800da0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6858      	ldr	r0, [r3, #4]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	68b9      	ldr	r1, [r7, #8]
 800d9e4:	f001 fff6 	bl	800f9d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f0:	441a      	add	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d32b      	bcc.n	800da5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	605a      	str	r2, [r3, #4]
 800da0a:	e026      	b.n	800da5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	68d8      	ldr	r0, [r3, #12]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da14:	461a      	mov	r2, r3
 800da16:	68b9      	ldr	r1, [r7, #8]
 800da18:	f001 ffdc 	bl	800f9d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da24:	425b      	negs	r3, r3
 800da26:	441a      	add	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	68da      	ldr	r2, [r3, #12]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	429a      	cmp	r2, r3
 800da36:	d207      	bcs.n	800da48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	689a      	ldr	r2, [r3, #8]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da40:	425b      	negs	r3, r3
 800da42:	441a      	add	r2, r3
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d105      	bne.n	800da5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d002      	beq.n	800da5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	3b01      	subs	r3, #1
 800da58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da62:	697b      	ldr	r3, [r7, #20]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b082      	sub	sp, #8
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d018      	beq.n	800dab0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da86:	441a      	add	r2, r3
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	429a      	cmp	r2, r3
 800da96:	d303      	bcc.n	800daa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68d9      	ldr	r1, [r3, #12]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daa8:	461a      	mov	r2, r3
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f001 ff92 	bl	800f9d4 <memcpy>
	}
}
 800dab0:	bf00      	nop
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dac0:	f001 fc50 	bl	800f364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800daca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dacc:	e011      	b.n	800daf2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d012      	beq.n	800dafc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	3324      	adds	r3, #36	; 0x24
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 fd2a 	bl	800e534 <xTaskRemoveFromEventList>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dae6:	f000 fe01 	bl	800e6ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800daea:	7bfb      	ldrb	r3, [r7, #15]
 800daec:	3b01      	subs	r3, #1
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800daf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dce9      	bgt.n	800dace <prvUnlockQueue+0x16>
 800dafa:	e000      	b.n	800dafe <prvUnlockQueue+0x46>
					break;
 800dafc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	22ff      	movs	r2, #255	; 0xff
 800db02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800db06:	f001 fc5d 	bl	800f3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800db0a:	f001 fc2b 	bl	800f364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db14:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db16:	e011      	b.n	800db3c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d012      	beq.n	800db46 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	3310      	adds	r3, #16
 800db24:	4618      	mov	r0, r3
 800db26:	f000 fd05 	bl	800e534 <xTaskRemoveFromEventList>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800db30:	f000 fddc 	bl	800e6ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800db34:	7bbb      	ldrb	r3, [r7, #14]
 800db36:	3b01      	subs	r3, #1
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800db3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db40:	2b00      	cmp	r3, #0
 800db42:	dce9      	bgt.n	800db18 <prvUnlockQueue+0x60>
 800db44:	e000      	b.n	800db48 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800db46:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	22ff      	movs	r2, #255	; 0xff
 800db4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800db50:	f001 fc38 	bl	800f3c4 <vPortExitCritical>
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db64:	f001 fbfe 	bl	800f364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d102      	bne.n	800db76 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db70:	2301      	movs	r3, #1
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	e001      	b.n	800db7a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db76:	2300      	movs	r3, #0
 800db78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db7a:	f001 fc23 	bl	800f3c4 <vPortExitCritical>

	return xReturn;
 800db7e:	68fb      	ldr	r3, [r7, #12]
}
 800db80:	4618      	mov	r0, r3
 800db82:	3710      	adds	r7, #16
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}

0800db88 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db90:	f001 fbe8 	bl	800f364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d102      	bne.n	800dba6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dba0:	2301      	movs	r3, #1
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	e001      	b.n	800dbaa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dba6:	2300      	movs	r3, #0
 800dba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dbaa:	f001 fc0b 	bl	800f3c4 <vPortExitCritical>

	return xReturn;
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e014      	b.n	800dbf2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbc8:	4a0f      	ldr	r2, [pc, #60]	; (800dc08 <vQueueAddToRegistry+0x50>)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d10b      	bne.n	800dbec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dbd4:	490c      	ldr	r1, [pc, #48]	; (800dc08 <vQueueAddToRegistry+0x50>)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dbde:	4a0a      	ldr	r2, [pc, #40]	; (800dc08 <vQueueAddToRegistry+0x50>)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	00db      	lsls	r3, r3, #3
 800dbe4:	4413      	add	r3, r2
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dbea:	e006      	b.n	800dbfa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	60fb      	str	r3, [r7, #12]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b07      	cmp	r3, #7
 800dbf6:	d9e7      	bls.n	800dbc8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	20000954 	.word	0x20000954

0800dc0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc1c:	f001 fba2 	bl	800f364 <vPortEnterCritical>
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc26:	b25b      	sxtb	r3, r3
 800dc28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc2c:	d103      	bne.n	800dc36 <vQueueWaitForMessageRestricted+0x2a>
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc3c:	b25b      	sxtb	r3, r3
 800dc3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc42:	d103      	bne.n	800dc4c <vQueueWaitForMessageRestricted+0x40>
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc4c:	f001 fbba 	bl	800f3c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d106      	bne.n	800dc66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	3324      	adds	r3, #36	; 0x24
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	68b9      	ldr	r1, [r7, #8]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 fc3b 	bl	800e4dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	f7ff ff26 	bl	800dab8 <prvUnlockQueue>
	}
 800dc6c:	bf00      	nop
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b08e      	sub	sp, #56	; 0x38
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]
 800dc80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d10a      	bne.n	800dc9e <xTaskCreateStatic+0x2a>
	__asm volatile
 800dc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8c:	f383 8811 	msr	BASEPRI, r3
 800dc90:	f3bf 8f6f 	isb	sy
 800dc94:	f3bf 8f4f 	dsb	sy
 800dc98:	623b      	str	r3, [r7, #32]
}
 800dc9a:	bf00      	nop
 800dc9c:	e7fe      	b.n	800dc9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d10a      	bne.n	800dcba <xTaskCreateStatic+0x46>
	__asm volatile
 800dca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	61fb      	str	r3, [r7, #28]
}
 800dcb6:	bf00      	nop
 800dcb8:	e7fe      	b.n	800dcb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dcba:	235c      	movs	r3, #92	; 0x5c
 800dcbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	2b5c      	cmp	r3, #92	; 0x5c
 800dcc2:	d00a      	beq.n	800dcda <xTaskCreateStatic+0x66>
	__asm volatile
 800dcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	61bb      	str	r3, [r7, #24]
}
 800dcd6:	bf00      	nop
 800dcd8:	e7fe      	b.n	800dcd8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dcda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d01e      	beq.n	800dd20 <xTaskCreateStatic+0xac>
 800dce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d01b      	beq.n	800dd20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	9303      	str	r3, [sp, #12]
 800dcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd00:	9302      	str	r3, [sp, #8]
 800dd02:	f107 0314 	add.w	r3, r7, #20
 800dd06:	9301      	str	r3, [sp, #4]
 800dd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	f000 f850 	bl	800ddb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd1a:	f000 f8dd 	bl	800ded8 <prvAddNewTaskToReadyList>
 800dd1e:	e001      	b.n	800dd24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dd20:	2300      	movs	r3, #0
 800dd22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dd24:	697b      	ldr	r3, [r7, #20]
	}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3728      	adds	r7, #40	; 0x28
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b08c      	sub	sp, #48	; 0x30
 800dd32:	af04      	add	r7, sp, #16
 800dd34:	60f8      	str	r0, [r7, #12]
 800dd36:	60b9      	str	r1, [r7, #8]
 800dd38:	603b      	str	r3, [r7, #0]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dd3e:	88fb      	ldrh	r3, [r7, #6]
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4618      	mov	r0, r3
 800dd44:	f001 fc30 	bl	800f5a8 <pvPortMalloc>
 800dd48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00e      	beq.n	800dd6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dd50:	205c      	movs	r0, #92	; 0x5c
 800dd52:	f001 fc29 	bl	800f5a8 <pvPortMalloc>
 800dd56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dd58:	69fb      	ldr	r3, [r7, #28]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d003      	beq.n	800dd66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	697a      	ldr	r2, [r7, #20]
 800dd62:	631a      	str	r2, [r3, #48]	; 0x30
 800dd64:	e005      	b.n	800dd72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd66:	6978      	ldr	r0, [r7, #20]
 800dd68:	f001 fcea 	bl	800f740 <vPortFree>
 800dd6c:	e001      	b.n	800dd72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d017      	beq.n	800dda8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd80:	88fa      	ldrh	r2, [r7, #6]
 800dd82:	2300      	movs	r3, #0
 800dd84:	9303      	str	r3, [sp, #12]
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	9302      	str	r3, [sp, #8]
 800dd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8c:	9301      	str	r3, [sp, #4]
 800dd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f000 f80e 	bl	800ddb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd9c:	69f8      	ldr	r0, [r7, #28]
 800dd9e:	f000 f89b 	bl	800ded8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dda2:	2301      	movs	r3, #1
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	e002      	b.n	800ddae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dda8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ddae:	69bb      	ldr	r3, [r7, #24]
	}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3720      	adds	r7, #32
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	009b      	lsls	r3, r3, #2
 800ddce:	461a      	mov	r2, r3
 800ddd0:	21a5      	movs	r1, #165	; 0xa5
 800ddd2:	f001 fdd3 	bl	800f97c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dde0:	3b01      	subs	r3, #1
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	f023 0307 	bic.w	r3, r3, #7
 800ddee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	f003 0307 	and.w	r3, r3, #7
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d00a      	beq.n	800de10 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ddfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfe:	f383 8811 	msr	BASEPRI, r3
 800de02:	f3bf 8f6f 	isb	sy
 800de06:	f3bf 8f4f 	dsb	sy
 800de0a:	617b      	str	r3, [r7, #20]
}
 800de0c:	bf00      	nop
 800de0e:	e7fe      	b.n	800de0e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d01f      	beq.n	800de56 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	e012      	b.n	800de42 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de1c:	68ba      	ldr	r2, [r7, #8]
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	4413      	add	r3, r2
 800de22:	7819      	ldrb	r1, [r3, #0]
 800de24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	4413      	add	r3, r2
 800de2a:	3334      	adds	r3, #52	; 0x34
 800de2c:	460a      	mov	r2, r1
 800de2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	4413      	add	r3, r2
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d006      	beq.n	800de4a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	3301      	adds	r3, #1
 800de40:	61fb      	str	r3, [r7, #28]
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	2b0f      	cmp	r3, #15
 800de46:	d9e9      	bls.n	800de1c <prvInitialiseNewTask+0x64>
 800de48:	e000      	b.n	800de4c <prvInitialiseNewTask+0x94>
			{
				break;
 800de4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800de54:	e003      	b.n	800de5e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	2b37      	cmp	r3, #55	; 0x37
 800de62:	d901      	bls.n	800de68 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de64:	2337      	movs	r3, #55	; 0x37
 800de66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	2200      	movs	r2, #0
 800de78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7c:	3304      	adds	r3, #4
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff f978 	bl	800d174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	3318      	adds	r3, #24
 800de88:	4618      	mov	r0, r3
 800de8a:	f7ff f973 	bl	800d174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea6:	2200      	movs	r2, #0
 800dea8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800deaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deac:	2200      	movs	r2, #0
 800deae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	68f9      	ldr	r1, [r7, #12]
 800deb6:	69b8      	ldr	r0, [r7, #24]
 800deb8:	f001 f928 	bl	800f10c <pxPortInitialiseStack>
 800debc:	4602      	mov	r2, r0
 800debe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d002      	beq.n	800dece <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800decc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dece:	bf00      	nop
 800ded0:	3720      	adds	r7, #32
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
	...

0800ded8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dee0:	f001 fa40 	bl	800f364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dee4:	4b2d      	ldr	r3, [pc, #180]	; (800df9c <prvAddNewTaskToReadyList+0xc4>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	4a2c      	ldr	r2, [pc, #176]	; (800df9c <prvAddNewTaskToReadyList+0xc4>)
 800deec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800deee:	4b2c      	ldr	r3, [pc, #176]	; (800dfa0 <prvAddNewTaskToReadyList+0xc8>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d109      	bne.n	800df0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800def6:	4a2a      	ldr	r2, [pc, #168]	; (800dfa0 <prvAddNewTaskToReadyList+0xc8>)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800defc:	4b27      	ldr	r3, [pc, #156]	; (800df9c <prvAddNewTaskToReadyList+0xc4>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b01      	cmp	r3, #1
 800df02:	d110      	bne.n	800df26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800df04:	f000 fc16 	bl	800e734 <prvInitialiseTaskLists>
 800df08:	e00d      	b.n	800df26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800df0a:	4b26      	ldr	r3, [pc, #152]	; (800dfa4 <prvAddNewTaskToReadyList+0xcc>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d109      	bne.n	800df26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800df12:	4b23      	ldr	r3, [pc, #140]	; (800dfa0 <prvAddNewTaskToReadyList+0xc8>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d802      	bhi.n	800df26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800df20:	4a1f      	ldr	r2, [pc, #124]	; (800dfa0 <prvAddNewTaskToReadyList+0xc8>)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800df26:	4b20      	ldr	r3, [pc, #128]	; (800dfa8 <prvAddNewTaskToReadyList+0xd0>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3301      	adds	r3, #1
 800df2c:	4a1e      	ldr	r2, [pc, #120]	; (800dfa8 <prvAddNewTaskToReadyList+0xd0>)
 800df2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800df30:	4b1d      	ldr	r3, [pc, #116]	; (800dfa8 <prvAddNewTaskToReadyList+0xd0>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3c:	4b1b      	ldr	r3, [pc, #108]	; (800dfac <prvAddNewTaskToReadyList+0xd4>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d903      	bls.n	800df4c <prvAddNewTaskToReadyList+0x74>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	4a18      	ldr	r2, [pc, #96]	; (800dfac <prvAddNewTaskToReadyList+0xd4>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	009b      	lsls	r3, r3, #2
 800df58:	4a15      	ldr	r2, [pc, #84]	; (800dfb0 <prvAddNewTaskToReadyList+0xd8>)
 800df5a:	441a      	add	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3304      	adds	r3, #4
 800df60:	4619      	mov	r1, r3
 800df62:	4610      	mov	r0, r2
 800df64:	f7ff f913 	bl	800d18e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df68:	f001 fa2c 	bl	800f3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df6c:	4b0d      	ldr	r3, [pc, #52]	; (800dfa4 <prvAddNewTaskToReadyList+0xcc>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00e      	beq.n	800df92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df74:	4b0a      	ldr	r3, [pc, #40]	; (800dfa0 <prvAddNewTaskToReadyList+0xc8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7e:	429a      	cmp	r2, r3
 800df80:	d207      	bcs.n	800df92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df82:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <prvAddNewTaskToReadyList+0xdc>)
 800df84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	20000e68 	.word	0x20000e68
 800dfa0:	20000994 	.word	0x20000994
 800dfa4:	20000e74 	.word	0x20000e74
 800dfa8:	20000e84 	.word	0x20000e84
 800dfac:	20000e70 	.word	0x20000e70
 800dfb0:	20000998 	.word	0x20000998
 800dfb4:	e000ed04 	.word	0xe000ed04

0800dfb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d017      	beq.n	800dffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dfca:	4b13      	ldr	r3, [pc, #76]	; (800e018 <vTaskDelay+0x60>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d00a      	beq.n	800dfe8 <vTaskDelay+0x30>
	__asm volatile
 800dfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd6:	f383 8811 	msr	BASEPRI, r3
 800dfda:	f3bf 8f6f 	isb	sy
 800dfde:	f3bf 8f4f 	dsb	sy
 800dfe2:	60bb      	str	r3, [r7, #8]
}
 800dfe4:	bf00      	nop
 800dfe6:	e7fe      	b.n	800dfe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dfe8:	f000 f880 	bl	800e0ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dfec:	2100      	movs	r1, #0
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 fcea 	bl	800e9c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dff4:	f000 f888 	bl	800e108 <xTaskResumeAll>
 800dff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d107      	bne.n	800e010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e000:	4b06      	ldr	r3, [pc, #24]	; (800e01c <vTaskDelay+0x64>)
 800e002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e006:	601a      	str	r2, [r3, #0]
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e010:	bf00      	nop
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	20000e90 	.word	0x20000e90
 800e01c:	e000ed04 	.word	0xe000ed04

0800e020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b08a      	sub	sp, #40	; 0x28
 800e024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e026:	2300      	movs	r3, #0
 800e028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e02e:	463a      	mov	r2, r7
 800e030:	1d39      	adds	r1, r7, #4
 800e032:	f107 0308 	add.w	r3, r7, #8
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff f848 	bl	800d0cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	9202      	str	r2, [sp, #8]
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	2300      	movs	r3, #0
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	2300      	movs	r3, #0
 800e04c:	460a      	mov	r2, r1
 800e04e:	4921      	ldr	r1, [pc, #132]	; (800e0d4 <vTaskStartScheduler+0xb4>)
 800e050:	4821      	ldr	r0, [pc, #132]	; (800e0d8 <vTaskStartScheduler+0xb8>)
 800e052:	f7ff fe0f 	bl	800dc74 <xTaskCreateStatic>
 800e056:	4603      	mov	r3, r0
 800e058:	4a20      	ldr	r2, [pc, #128]	; (800e0dc <vTaskStartScheduler+0xbc>)
 800e05a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e05c:	4b1f      	ldr	r3, [pc, #124]	; (800e0dc <vTaskStartScheduler+0xbc>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d002      	beq.n	800e06a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e064:	2301      	movs	r3, #1
 800e066:	617b      	str	r3, [r7, #20]
 800e068:	e001      	b.n	800e06e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e06a:	2300      	movs	r3, #0
 800e06c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d102      	bne.n	800e07a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e074:	f000 fcfc 	bl	800ea70 <xTimerCreateTimerTask>
 800e078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d116      	bne.n	800e0ae <vTaskStartScheduler+0x8e>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	613b      	str	r3, [r7, #16]
}
 800e092:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e094:	4b12      	ldr	r3, [pc, #72]	; (800e0e0 <vTaskStartScheduler+0xc0>)
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e09c:	4b11      	ldr	r3, [pc, #68]	; (800e0e4 <vTaskStartScheduler+0xc4>)
 800e09e:	2201      	movs	r2, #1
 800e0a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e0a2:	4b11      	ldr	r3, [pc, #68]	; (800e0e8 <vTaskStartScheduler+0xc8>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e0a8:	f001 f8ba 	bl	800f220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e0ac:	e00e      	b.n	800e0cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e0ae:	697b      	ldr	r3, [r7, #20]
 800e0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b4:	d10a      	bne.n	800e0cc <vTaskStartScheduler+0xac>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	60fb      	str	r3, [r7, #12]
}
 800e0c8:	bf00      	nop
 800e0ca:	e7fe      	b.n	800e0ca <vTaskStartScheduler+0xaa>
}
 800e0cc:	bf00      	nop
 800e0ce:	3718      	adds	r7, #24
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0800fa38 	.word	0x0800fa38
 800e0d8:	0800e705 	.word	0x0800e705
 800e0dc:	20000e8c 	.word	0x20000e8c
 800e0e0:	20000e88 	.word	0x20000e88
 800e0e4:	20000e74 	.word	0x20000e74
 800e0e8:	20000e6c 	.word	0x20000e6c

0800e0ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e0f0:	4b04      	ldr	r3, [pc, #16]	; (800e104 <vTaskSuspendAll+0x18>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	4a03      	ldr	r2, [pc, #12]	; (800e104 <vTaskSuspendAll+0x18>)
 800e0f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e0fa:	bf00      	nop
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	20000e90 	.word	0x20000e90

0800e108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e10e:	2300      	movs	r3, #0
 800e110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e112:	2300      	movs	r3, #0
 800e114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e116:	4b42      	ldr	r3, [pc, #264]	; (800e220 <xTaskResumeAll+0x118>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d10a      	bne.n	800e134 <xTaskResumeAll+0x2c>
	__asm volatile
 800e11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e122:	f383 8811 	msr	BASEPRI, r3
 800e126:	f3bf 8f6f 	isb	sy
 800e12a:	f3bf 8f4f 	dsb	sy
 800e12e:	603b      	str	r3, [r7, #0]
}
 800e130:	bf00      	nop
 800e132:	e7fe      	b.n	800e132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e134:	f001 f916 	bl	800f364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e138:	4b39      	ldr	r3, [pc, #228]	; (800e220 <xTaskResumeAll+0x118>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	3b01      	subs	r3, #1
 800e13e:	4a38      	ldr	r2, [pc, #224]	; (800e220 <xTaskResumeAll+0x118>)
 800e140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e142:	4b37      	ldr	r3, [pc, #220]	; (800e220 <xTaskResumeAll+0x118>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d162      	bne.n	800e210 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e14a:	4b36      	ldr	r3, [pc, #216]	; (800e224 <xTaskResumeAll+0x11c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d05e      	beq.n	800e210 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e152:	e02f      	b.n	800e1b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e154:	4b34      	ldr	r3, [pc, #208]	; (800e228 <xTaskResumeAll+0x120>)
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	3318      	adds	r3, #24
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff f871 	bl	800d248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3304      	adds	r3, #4
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff f86c 	bl	800d248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4b2d      	ldr	r3, [pc, #180]	; (800e22c <xTaskResumeAll+0x124>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d903      	bls.n	800e184 <xTaskResumeAll+0x7c>
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	4a2a      	ldr	r2, [pc, #168]	; (800e22c <xTaskResumeAll+0x124>)
 800e182:	6013      	str	r3, [r2, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e188:	4613      	mov	r3, r2
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	4a27      	ldr	r2, [pc, #156]	; (800e230 <xTaskResumeAll+0x128>)
 800e192:	441a      	add	r2, r3
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	3304      	adds	r3, #4
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f7fe fff7 	bl	800d18e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a4:	4b23      	ldr	r3, [pc, #140]	; (800e234 <xTaskResumeAll+0x12c>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d302      	bcc.n	800e1b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e1ae:	4b22      	ldr	r3, [pc, #136]	; (800e238 <xTaskResumeAll+0x130>)
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1b4:	4b1c      	ldr	r3, [pc, #112]	; (800e228 <xTaskResumeAll+0x120>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1cb      	bne.n	800e154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e1c2:	f000 fb55 	bl	800e870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e1c6:	4b1d      	ldr	r3, [pc, #116]	; (800e23c <xTaskResumeAll+0x134>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d010      	beq.n	800e1f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e1d2:	f000 f847 	bl	800e264 <xTaskIncrementTick>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d002      	beq.n	800e1e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e1dc:	4b16      	ldr	r3, [pc, #88]	; (800e238 <xTaskResumeAll+0x130>)
 800e1de:	2201      	movs	r2, #1
 800e1e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1f1      	bne.n	800e1d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e1ee:	4b13      	ldr	r3, [pc, #76]	; (800e23c <xTaskResumeAll+0x134>)
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e1f4:	4b10      	ldr	r3, [pc, #64]	; (800e238 <xTaskResumeAll+0x130>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d009      	beq.n	800e210 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e200:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <xTaskResumeAll+0x138>)
 800e202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	f3bf 8f4f 	dsb	sy
 800e20c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e210:	f001 f8d8 	bl	800f3c4 <vPortExitCritical>

	return xAlreadyYielded;
 800e214:	68bb      	ldr	r3, [r7, #8]
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	20000e90 	.word	0x20000e90
 800e224:	20000e68 	.word	0x20000e68
 800e228:	20000e28 	.word	0x20000e28
 800e22c:	20000e70 	.word	0x20000e70
 800e230:	20000998 	.word	0x20000998
 800e234:	20000994 	.word	0x20000994
 800e238:	20000e7c 	.word	0x20000e7c
 800e23c:	20000e78 	.word	0x20000e78
 800e240:	e000ed04 	.word	0xe000ed04

0800e244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <xTaskGetTickCount+0x1c>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e250:	687b      	ldr	r3, [r7, #4]
}
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	20000e6c 	.word	0x20000e6c

0800e264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e26e:	4b4f      	ldr	r3, [pc, #316]	; (800e3ac <xTaskIncrementTick+0x148>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	f040 808f 	bne.w	800e396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e278:	4b4d      	ldr	r3, [pc, #308]	; (800e3b0 <xTaskIncrementTick+0x14c>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	3301      	adds	r3, #1
 800e27e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e280:	4a4b      	ldr	r2, [pc, #300]	; (800e3b0 <xTaskIncrementTick+0x14c>)
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d120      	bne.n	800e2ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e28c:	4b49      	ldr	r3, [pc, #292]	; (800e3b4 <xTaskIncrementTick+0x150>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00a      	beq.n	800e2ac <xTaskIncrementTick+0x48>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	603b      	str	r3, [r7, #0]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <xTaskIncrementTick+0x46>
 800e2ac:	4b41      	ldr	r3, [pc, #260]	; (800e3b4 <xTaskIncrementTick+0x150>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	4b41      	ldr	r3, [pc, #260]	; (800e3b8 <xTaskIncrementTick+0x154>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	4a3f      	ldr	r2, [pc, #252]	; (800e3b4 <xTaskIncrementTick+0x150>)
 800e2b8:	6013      	str	r3, [r2, #0]
 800e2ba:	4a3f      	ldr	r2, [pc, #252]	; (800e3b8 <xTaskIncrementTick+0x154>)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	4b3e      	ldr	r3, [pc, #248]	; (800e3bc <xTaskIncrementTick+0x158>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	4a3d      	ldr	r2, [pc, #244]	; (800e3bc <xTaskIncrementTick+0x158>)
 800e2c8:	6013      	str	r3, [r2, #0]
 800e2ca:	f000 fad1 	bl	800e870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e2ce:	4b3c      	ldr	r3, [pc, #240]	; (800e3c0 <xTaskIncrementTick+0x15c>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d349      	bcc.n	800e36c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e2d8:	4b36      	ldr	r3, [pc, #216]	; (800e3b4 <xTaskIncrementTick+0x150>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d104      	bne.n	800e2ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2e2:	4b37      	ldr	r3, [pc, #220]	; (800e3c0 <xTaskIncrementTick+0x15c>)
 800e2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e8:	601a      	str	r2, [r3, #0]
					break;
 800e2ea:	e03f      	b.n	800e36c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ec:	4b31      	ldr	r3, [pc, #196]	; (800e3b4 <xTaskIncrementTick+0x150>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e2fc:	693a      	ldr	r2, [r7, #16]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	429a      	cmp	r2, r3
 800e302:	d203      	bcs.n	800e30c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e304:	4a2e      	ldr	r2, [pc, #184]	; (800e3c0 <xTaskIncrementTick+0x15c>)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e30a:	e02f      	b.n	800e36c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	3304      	adds	r3, #4
 800e310:	4618      	mov	r0, r3
 800e312:	f7fe ff99 	bl	800d248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d004      	beq.n	800e328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	3318      	adds	r3, #24
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe ff90 	bl	800d248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e32c:	4b25      	ldr	r3, [pc, #148]	; (800e3c4 <xTaskIncrementTick+0x160>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d903      	bls.n	800e33c <xTaskIncrementTick+0xd8>
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e338:	4a22      	ldr	r2, [pc, #136]	; (800e3c4 <xTaskIncrementTick+0x160>)
 800e33a:	6013      	str	r3, [r2, #0]
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4a1f      	ldr	r2, [pc, #124]	; (800e3c8 <xTaskIncrementTick+0x164>)
 800e34a:	441a      	add	r2, r3
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	3304      	adds	r3, #4
 800e350:	4619      	mov	r1, r3
 800e352:	4610      	mov	r0, r2
 800e354:	f7fe ff1b 	bl	800d18e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e35c:	4b1b      	ldr	r3, [pc, #108]	; (800e3cc <xTaskIncrementTick+0x168>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e362:	429a      	cmp	r2, r3
 800e364:	d3b8      	bcc.n	800e2d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e366:	2301      	movs	r3, #1
 800e368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e36a:	e7b5      	b.n	800e2d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e36c:	4b17      	ldr	r3, [pc, #92]	; (800e3cc <xTaskIncrementTick+0x168>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e372:	4915      	ldr	r1, [pc, #84]	; (800e3c8 <xTaskIncrementTick+0x164>)
 800e374:	4613      	mov	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	009b      	lsls	r3, r3, #2
 800e37c:	440b      	add	r3, r1
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d901      	bls.n	800e388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e384:	2301      	movs	r3, #1
 800e386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e388:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <xTaskIncrementTick+0x16c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d007      	beq.n	800e3a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e390:	2301      	movs	r3, #1
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	e004      	b.n	800e3a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e396:	4b0f      	ldr	r3, [pc, #60]	; (800e3d4 <xTaskIncrementTick+0x170>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	4a0d      	ldr	r2, [pc, #52]	; (800e3d4 <xTaskIncrementTick+0x170>)
 800e39e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e3a0:	697b      	ldr	r3, [r7, #20]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20000e90 	.word	0x20000e90
 800e3b0:	20000e6c 	.word	0x20000e6c
 800e3b4:	20000e20 	.word	0x20000e20
 800e3b8:	20000e24 	.word	0x20000e24
 800e3bc:	20000e80 	.word	0x20000e80
 800e3c0:	20000e88 	.word	0x20000e88
 800e3c4:	20000e70 	.word	0x20000e70
 800e3c8:	20000998 	.word	0x20000998
 800e3cc:	20000994 	.word	0x20000994
 800e3d0:	20000e7c 	.word	0x20000e7c
 800e3d4:	20000e78 	.word	0x20000e78

0800e3d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e3de:	4b28      	ldr	r3, [pc, #160]	; (800e480 <vTaskSwitchContext+0xa8>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d003      	beq.n	800e3ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e3e6:	4b27      	ldr	r3, [pc, #156]	; (800e484 <vTaskSwitchContext+0xac>)
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e3ec:	e041      	b.n	800e472 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800e3ee:	4b25      	ldr	r3, [pc, #148]	; (800e484 <vTaskSwitchContext+0xac>)
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f4:	4b24      	ldr	r3, [pc, #144]	; (800e488 <vTaskSwitchContext+0xb0>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	e010      	b.n	800e41e <vTaskSwitchContext+0x46>
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10a      	bne.n	800e418 <vTaskSwitchContext+0x40>
	__asm volatile
 800e402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e406:	f383 8811 	msr	BASEPRI, r3
 800e40a:	f3bf 8f6f 	isb	sy
 800e40e:	f3bf 8f4f 	dsb	sy
 800e412:	607b      	str	r3, [r7, #4]
}
 800e414:	bf00      	nop
 800e416:	e7fe      	b.n	800e416 <vTaskSwitchContext+0x3e>
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	60fb      	str	r3, [r7, #12]
 800e41e:	491b      	ldr	r1, [pc, #108]	; (800e48c <vTaskSwitchContext+0xb4>)
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	4613      	mov	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	440b      	add	r3, r1
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0e4      	beq.n	800e3fc <vTaskSwitchContext+0x24>
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	4613      	mov	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4a13      	ldr	r2, [pc, #76]	; (800e48c <vTaskSwitchContext+0xb4>)
 800e43e:	4413      	add	r3, r2
 800e440:	60bb      	str	r3, [r7, #8]
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	685a      	ldr	r2, [r3, #4]
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	605a      	str	r2, [r3, #4]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	3308      	adds	r3, #8
 800e454:	429a      	cmp	r2, r3
 800e456:	d104      	bne.n	800e462 <vTaskSwitchContext+0x8a>
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	685a      	ldr	r2, [r3, #4]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	605a      	str	r2, [r3, #4]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	4a09      	ldr	r2, [pc, #36]	; (800e490 <vTaskSwitchContext+0xb8>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	4a06      	ldr	r2, [pc, #24]	; (800e488 <vTaskSwitchContext+0xb0>)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6013      	str	r3, [r2, #0]
}
 800e472:	bf00      	nop
 800e474:	3714      	adds	r7, #20
 800e476:	46bd      	mov	sp, r7
 800e478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop
 800e480:	20000e90 	.word	0x20000e90
 800e484:	20000e7c 	.word	0x20000e7c
 800e488:	20000e70 	.word	0x20000e70
 800e48c:	20000998 	.word	0x20000998
 800e490:	20000994 	.word	0x20000994

0800e494 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d10a      	bne.n	800e4ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a8:	f383 8811 	msr	BASEPRI, r3
 800e4ac:	f3bf 8f6f 	isb	sy
 800e4b0:	f3bf 8f4f 	dsb	sy
 800e4b4:	60fb      	str	r3, [r7, #12]
}
 800e4b6:	bf00      	nop
 800e4b8:	e7fe      	b.n	800e4b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e4ba:	4b07      	ldr	r3, [pc, #28]	; (800e4d8 <vTaskPlaceOnEventList+0x44>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3318      	adds	r3, #24
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7fe fe87 	bl	800d1d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e4c8:	2101      	movs	r1, #1
 800e4ca:	6838      	ldr	r0, [r7, #0]
 800e4cc:	f000 fa7c 	bl	800e9c8 <prvAddCurrentTaskToDelayedList>
}
 800e4d0:	bf00      	nop
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	20000994 	.word	0x20000994

0800e4dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b086      	sub	sp, #24
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d10a      	bne.n	800e504 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	617b      	str	r3, [r7, #20]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e504:	4b0a      	ldr	r3, [pc, #40]	; (800e530 <vTaskPlaceOnEventListRestricted+0x54>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3318      	adds	r3, #24
 800e50a:	4619      	mov	r1, r3
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7fe fe3e 	bl	800d18e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d002      	beq.n	800e51e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e518:	f04f 33ff 	mov.w	r3, #4294967295
 800e51c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e51e:	6879      	ldr	r1, [r7, #4]
 800e520:	68b8      	ldr	r0, [r7, #8]
 800e522:	f000 fa51 	bl	800e9c8 <prvAddCurrentTaskToDelayedList>
	}
 800e526:	bf00      	nop
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	20000994 	.word	0x20000994

0800e534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d10a      	bne.n	800e560 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	f383 8811 	msr	BASEPRI, r3
 800e552:	f3bf 8f6f 	isb	sy
 800e556:	f3bf 8f4f 	dsb	sy
 800e55a:	60fb      	str	r3, [r7, #12]
}
 800e55c:	bf00      	nop
 800e55e:	e7fe      	b.n	800e55e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	3318      	adds	r3, #24
 800e564:	4618      	mov	r0, r3
 800e566:	f7fe fe6f 	bl	800d248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e56a:	4b1e      	ldr	r3, [pc, #120]	; (800e5e4 <xTaskRemoveFromEventList+0xb0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d11d      	bne.n	800e5ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	3304      	adds	r3, #4
 800e576:	4618      	mov	r0, r3
 800e578:	f7fe fe66 	bl	800d248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e580:	4b19      	ldr	r3, [pc, #100]	; (800e5e8 <xTaskRemoveFromEventList+0xb4>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	429a      	cmp	r2, r3
 800e586:	d903      	bls.n	800e590 <xTaskRemoveFromEventList+0x5c>
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58c:	4a16      	ldr	r2, [pc, #88]	; (800e5e8 <xTaskRemoveFromEventList+0xb4>)
 800e58e:	6013      	str	r3, [r2, #0]
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e594:	4613      	mov	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	4413      	add	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4a13      	ldr	r2, [pc, #76]	; (800e5ec <xTaskRemoveFromEventList+0xb8>)
 800e59e:	441a      	add	r2, r3
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	3304      	adds	r3, #4
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4610      	mov	r0, r2
 800e5a8:	f7fe fdf1 	bl	800d18e <vListInsertEnd>
 800e5ac:	e005      	b.n	800e5ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	3318      	adds	r3, #24
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	480e      	ldr	r0, [pc, #56]	; (800e5f0 <xTaskRemoveFromEventList+0xbc>)
 800e5b6:	f7fe fdea 	bl	800d18e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5be:	4b0d      	ldr	r3, [pc, #52]	; (800e5f4 <xTaskRemoveFromEventList+0xc0>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d905      	bls.n	800e5d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <xTaskRemoveFromEventList+0xc4>)
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	e001      	b.n	800e5d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e5d8:	697b      	ldr	r3, [r7, #20]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3718      	adds	r7, #24
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20000e90 	.word	0x20000e90
 800e5e8:	20000e70 	.word	0x20000e70
 800e5ec:	20000998 	.word	0x20000998
 800e5f0:	20000e28 	.word	0x20000e28
 800e5f4:	20000994 	.word	0x20000994
 800e5f8:	20000e7c 	.word	0x20000e7c

0800e5fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e604:	4b06      	ldr	r3, [pc, #24]	; (800e620 <vTaskInternalSetTimeOutState+0x24>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e60c:	4b05      	ldr	r3, [pc, #20]	; (800e624 <vTaskInternalSetTimeOutState+0x28>)
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	605a      	str	r2, [r3, #4]
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr
 800e620:	20000e80 	.word	0x20000e80
 800e624:	20000e6c 	.word	0x20000e6c

0800e628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b088      	sub	sp, #32
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d10a      	bne.n	800e64e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63c:	f383 8811 	msr	BASEPRI, r3
 800e640:	f3bf 8f6f 	isb	sy
 800e644:	f3bf 8f4f 	dsb	sy
 800e648:	613b      	str	r3, [r7, #16]
}
 800e64a:	bf00      	nop
 800e64c:	e7fe      	b.n	800e64c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d10a      	bne.n	800e66a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	60fb      	str	r3, [r7, #12]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e66a:	f000 fe7b 	bl	800f364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e66e:	4b1d      	ldr	r3, [pc, #116]	; (800e6e4 <xTaskCheckForTimeOut+0xbc>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	69ba      	ldr	r2, [r7, #24]
 800e67a:	1ad3      	subs	r3, r2, r3
 800e67c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e686:	d102      	bne.n	800e68e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e688:	2300      	movs	r3, #0
 800e68a:	61fb      	str	r3, [r7, #28]
 800e68c:	e023      	b.n	800e6d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	4b15      	ldr	r3, [pc, #84]	; (800e6e8 <xTaskCheckForTimeOut+0xc0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d007      	beq.n	800e6aa <xTaskCheckForTimeOut+0x82>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	69ba      	ldr	r2, [r7, #24]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d302      	bcc.n	800e6aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	61fb      	str	r3, [r7, #28]
 800e6a8:	e015      	b.n	800e6d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d20b      	bcs.n	800e6cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	1ad2      	subs	r2, r2, r3
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f7ff ff9b 	bl	800e5fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	61fb      	str	r3, [r7, #28]
 800e6ca:	e004      	b.n	800e6d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e6d6:	f000 fe75 	bl	800f3c4 <vPortExitCritical>

	return xReturn;
 800e6da:	69fb      	ldr	r3, [r7, #28]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3720      	adds	r7, #32
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20000e6c 	.word	0x20000e6c
 800e6e8:	20000e80 	.word	0x20000e80

0800e6ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e6f0:	4b03      	ldr	r3, [pc, #12]	; (800e700 <vTaskMissedYield+0x14>)
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	601a      	str	r2, [r3, #0]
}
 800e6f6:	bf00      	nop
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	20000e7c 	.word	0x20000e7c

0800e704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e70c:	f000 f852 	bl	800e7b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e710:	4b06      	ldr	r3, [pc, #24]	; (800e72c <prvIdleTask+0x28>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d9f9      	bls.n	800e70c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e718:	4b05      	ldr	r3, [pc, #20]	; (800e730 <prvIdleTask+0x2c>)
 800e71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e71e:	601a      	str	r2, [r3, #0]
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e728:	e7f0      	b.n	800e70c <prvIdleTask+0x8>
 800e72a:	bf00      	nop
 800e72c:	20000998 	.word	0x20000998
 800e730:	e000ed04 	.word	0xe000ed04

0800e734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e73a:	2300      	movs	r3, #0
 800e73c:	607b      	str	r3, [r7, #4]
 800e73e:	e00c      	b.n	800e75a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e740:	687a      	ldr	r2, [r7, #4]
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4a12      	ldr	r2, [pc, #72]	; (800e794 <prvInitialiseTaskLists+0x60>)
 800e74c:	4413      	add	r3, r2
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fe fcf0 	bl	800d134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	3301      	adds	r3, #1
 800e758:	607b      	str	r3, [r7, #4]
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b37      	cmp	r3, #55	; 0x37
 800e75e:	d9ef      	bls.n	800e740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e760:	480d      	ldr	r0, [pc, #52]	; (800e798 <prvInitialiseTaskLists+0x64>)
 800e762:	f7fe fce7 	bl	800d134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e766:	480d      	ldr	r0, [pc, #52]	; (800e79c <prvInitialiseTaskLists+0x68>)
 800e768:	f7fe fce4 	bl	800d134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e76c:	480c      	ldr	r0, [pc, #48]	; (800e7a0 <prvInitialiseTaskLists+0x6c>)
 800e76e:	f7fe fce1 	bl	800d134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e772:	480c      	ldr	r0, [pc, #48]	; (800e7a4 <prvInitialiseTaskLists+0x70>)
 800e774:	f7fe fcde 	bl	800d134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e778:	480b      	ldr	r0, [pc, #44]	; (800e7a8 <prvInitialiseTaskLists+0x74>)
 800e77a:	f7fe fcdb 	bl	800d134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e77e:	4b0b      	ldr	r3, [pc, #44]	; (800e7ac <prvInitialiseTaskLists+0x78>)
 800e780:	4a05      	ldr	r2, [pc, #20]	; (800e798 <prvInitialiseTaskLists+0x64>)
 800e782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e784:	4b0a      	ldr	r3, [pc, #40]	; (800e7b0 <prvInitialiseTaskLists+0x7c>)
 800e786:	4a05      	ldr	r2, [pc, #20]	; (800e79c <prvInitialiseTaskLists+0x68>)
 800e788:	601a      	str	r2, [r3, #0]
}
 800e78a:	bf00      	nop
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	20000998 	.word	0x20000998
 800e798:	20000df8 	.word	0x20000df8
 800e79c:	20000e0c 	.word	0x20000e0c
 800e7a0:	20000e28 	.word	0x20000e28
 800e7a4:	20000e3c 	.word	0x20000e3c
 800e7a8:	20000e54 	.word	0x20000e54
 800e7ac:	20000e20 	.word	0x20000e20
 800e7b0:	20000e24 	.word	0x20000e24

0800e7b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7ba:	e019      	b.n	800e7f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e7bc:	f000 fdd2 	bl	800f364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c0:	4b10      	ldr	r3, [pc, #64]	; (800e804 <prvCheckTasksWaitingTermination+0x50>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	3304      	adds	r3, #4
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fd3b 	bl	800d248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e7d2:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <prvCheckTasksWaitingTermination+0x54>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	4a0b      	ldr	r2, [pc, #44]	; (800e808 <prvCheckTasksWaitingTermination+0x54>)
 800e7da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e7dc:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <prvCheckTasksWaitingTermination+0x58>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	4a0a      	ldr	r2, [pc, #40]	; (800e80c <prvCheckTasksWaitingTermination+0x58>)
 800e7e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e7e6:	f000 fded 	bl	800f3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f810 	bl	800e810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e7f0:	4b06      	ldr	r3, [pc, #24]	; (800e80c <prvCheckTasksWaitingTermination+0x58>)
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d1e1      	bne.n	800e7bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e7f8:	bf00      	nop
 800e7fa:	bf00      	nop
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20000e3c 	.word	0x20000e3c
 800e808:	20000e68 	.word	0x20000e68
 800e80c:	20000e50 	.word	0x20000e50

0800e810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d108      	bne.n	800e834 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e826:	4618      	mov	r0, r3
 800e828:	f000 ff8a 	bl	800f740 <vPortFree>
				vPortFree( pxTCB );
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 ff87 	bl	800f740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e832:	e018      	b.n	800e866 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d103      	bne.n	800e846 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f000 ff7e 	bl	800f740 <vPortFree>
	}
 800e844:	e00f      	b.n	800e866 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d00a      	beq.n	800e866 <prvDeleteTCB+0x56>
	__asm volatile
 800e850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e854:	f383 8811 	msr	BASEPRI, r3
 800e858:	f3bf 8f6f 	isb	sy
 800e85c:	f3bf 8f4f 	dsb	sy
 800e860:	60fb      	str	r3, [r7, #12]
}
 800e862:	bf00      	nop
 800e864:	e7fe      	b.n	800e864 <prvDeleteTCB+0x54>
	}
 800e866:	bf00      	nop
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e870:	b480      	push	{r7}
 800e872:	b083      	sub	sp, #12
 800e874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e876:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <prvResetNextTaskUnblockTime+0x38>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d104      	bne.n	800e88a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e880:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <prvResetNextTaskUnblockTime+0x3c>)
 800e882:	f04f 32ff 	mov.w	r2, #4294967295
 800e886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e888:	e008      	b.n	800e89c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e88a:	4b07      	ldr	r3, [pc, #28]	; (800e8a8 <prvResetNextTaskUnblockTime+0x38>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	4a04      	ldr	r2, [pc, #16]	; (800e8ac <prvResetNextTaskUnblockTime+0x3c>)
 800e89a:	6013      	str	r3, [r2, #0]
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	20000e20 	.word	0x20000e20
 800e8ac:	20000e88 	.word	0x20000e88

0800e8b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e8b6:	4b0b      	ldr	r3, [pc, #44]	; (800e8e4 <xTaskGetSchedulerState+0x34>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	607b      	str	r3, [r7, #4]
 800e8c2:	e008      	b.n	800e8d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e8c4:	4b08      	ldr	r3, [pc, #32]	; (800e8e8 <xTaskGetSchedulerState+0x38>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e8cc:	2302      	movs	r3, #2
 800e8ce:	607b      	str	r3, [r7, #4]
 800e8d0:	e001      	b.n	800e8d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e8d6:	687b      	ldr	r3, [r7, #4]
	}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr
 800e8e4:	20000e74 	.word	0x20000e74
 800e8e8:	20000e90 	.word	0x20000e90

0800e8ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d056      	beq.n	800e9b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e902:	4b2e      	ldr	r3, [pc, #184]	; (800e9bc <xTaskPriorityDisinherit+0xd0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d00a      	beq.n	800e922 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e910:	f383 8811 	msr	BASEPRI, r3
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	f3bf 8f4f 	dsb	sy
 800e91c:	60fb      	str	r3, [r7, #12]
}
 800e91e:	bf00      	nop
 800e920:	e7fe      	b.n	800e920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10a      	bne.n	800e940 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92e:	f383 8811 	msr	BASEPRI, r3
 800e932:	f3bf 8f6f 	isb	sy
 800e936:	f3bf 8f4f 	dsb	sy
 800e93a:	60bb      	str	r3, [r7, #8]
}
 800e93c:	bf00      	nop
 800e93e:	e7fe      	b.n	800e93e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e944:	1e5a      	subs	r2, r3, #1
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e952:	429a      	cmp	r2, r3
 800e954:	d02c      	beq.n	800e9b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d128      	bne.n	800e9b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	3304      	adds	r3, #4
 800e962:	4618      	mov	r0, r3
 800e964:	f7fe fc70 	bl	800d248 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e974:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e980:	4b0f      	ldr	r3, [pc, #60]	; (800e9c0 <xTaskPriorityDisinherit+0xd4>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	429a      	cmp	r2, r3
 800e986:	d903      	bls.n	800e990 <xTaskPriorityDisinherit+0xa4>
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98c:	4a0c      	ldr	r2, [pc, #48]	; (800e9c0 <xTaskPriorityDisinherit+0xd4>)
 800e98e:	6013      	str	r3, [r2, #0]
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4613      	mov	r3, r2
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	4413      	add	r3, r2
 800e99a:	009b      	lsls	r3, r3, #2
 800e99c:	4a09      	ldr	r2, [pc, #36]	; (800e9c4 <xTaskPriorityDisinherit+0xd8>)
 800e99e:	441a      	add	r2, r3
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	4619      	mov	r1, r3
 800e9a6:	4610      	mov	r0, r2
 800e9a8:	f7fe fbf1 	bl	800d18e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e9b0:	697b      	ldr	r3, [r7, #20]
	}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3718      	adds	r7, #24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000994 	.word	0x20000994
 800e9c0:	20000e70 	.word	0x20000e70
 800e9c4:	20000998 	.word	0x20000998

0800e9c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e9d2:	4b21      	ldr	r3, [pc, #132]	; (800ea58 <prvAddCurrentTaskToDelayedList+0x90>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e9d8:	4b20      	ldr	r3, [pc, #128]	; (800ea5c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe fc32 	bl	800d248 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ea:	d10a      	bne.n	800ea02 <prvAddCurrentTaskToDelayedList+0x3a>
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d007      	beq.n	800ea02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9f2:	4b1a      	ldr	r3, [pc, #104]	; (800ea5c <prvAddCurrentTaskToDelayedList+0x94>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4819      	ldr	r0, [pc, #100]	; (800ea60 <prvAddCurrentTaskToDelayedList+0x98>)
 800e9fc:	f7fe fbc7 	bl	800d18e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ea00:	e026      	b.n	800ea50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4413      	add	r3, r2
 800ea08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ea0a:	4b14      	ldr	r3, [pc, #80]	; (800ea5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ea12:	68ba      	ldr	r2, [r7, #8]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d209      	bcs.n	800ea2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea1a:	4b12      	ldr	r3, [pc, #72]	; (800ea64 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	4b0f      	ldr	r3, [pc, #60]	; (800ea5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	3304      	adds	r3, #4
 800ea24:	4619      	mov	r1, r3
 800ea26:	4610      	mov	r0, r2
 800ea28:	f7fe fbd5 	bl	800d1d6 <vListInsert>
}
 800ea2c:	e010      	b.n	800ea50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ea2e:	4b0e      	ldr	r3, [pc, #56]	; (800ea68 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <prvAddCurrentTaskToDelayedList+0x94>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	3304      	adds	r3, #4
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4610      	mov	r0, r2
 800ea3c:	f7fe fbcb 	bl	800d1d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	68ba      	ldr	r2, [r7, #8]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d202      	bcs.n	800ea50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ea4a:	4a08      	ldr	r2, [pc, #32]	; (800ea6c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	6013      	str	r3, [r2, #0]
}
 800ea50:	bf00      	nop
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	20000e6c 	.word	0x20000e6c
 800ea5c:	20000994 	.word	0x20000994
 800ea60:	20000e54 	.word	0x20000e54
 800ea64:	20000e24 	.word	0x20000e24
 800ea68:	20000e20 	.word	0x20000e20
 800ea6c:	20000e88 	.word	0x20000e88

0800ea70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08a      	sub	sp, #40	; 0x28
 800ea74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ea7a:	f000 fb07 	bl	800f08c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ea7e:	4b1c      	ldr	r3, [pc, #112]	; (800eaf0 <xTimerCreateTimerTask+0x80>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d021      	beq.n	800eaca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ea86:	2300      	movs	r3, #0
 800ea88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea8e:	1d3a      	adds	r2, r7, #4
 800ea90:	f107 0108 	add.w	r1, r7, #8
 800ea94:	f107 030c 	add.w	r3, r7, #12
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe fb31 	bl	800d100 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea9e:	6879      	ldr	r1, [r7, #4]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	9202      	str	r2, [sp, #8]
 800eaa6:	9301      	str	r3, [sp, #4]
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	2300      	movs	r3, #0
 800eaae:	460a      	mov	r2, r1
 800eab0:	4910      	ldr	r1, [pc, #64]	; (800eaf4 <xTimerCreateTimerTask+0x84>)
 800eab2:	4811      	ldr	r0, [pc, #68]	; (800eaf8 <xTimerCreateTimerTask+0x88>)
 800eab4:	f7ff f8de 	bl	800dc74 <xTaskCreateStatic>
 800eab8:	4603      	mov	r3, r0
 800eaba:	4a10      	ldr	r2, [pc, #64]	; (800eafc <xTimerCreateTimerTask+0x8c>)
 800eabc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eabe:	4b0f      	ldr	r3, [pc, #60]	; (800eafc <xTimerCreateTimerTask+0x8c>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eac6:	2301      	movs	r3, #1
 800eac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d10a      	bne.n	800eae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ead0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	613b      	str	r3, [r7, #16]
}
 800eae2:	bf00      	nop
 800eae4:	e7fe      	b.n	800eae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800eae6:	697b      	ldr	r3, [r7, #20]
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3718      	adds	r7, #24
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	20000ec4 	.word	0x20000ec4
 800eaf4:	0800fa40 	.word	0x0800fa40
 800eaf8:	0800ec35 	.word	0x0800ec35
 800eafc:	20000ec8 	.word	0x20000ec8

0800eb00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b08a      	sub	sp, #40	; 0x28
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	60f8      	str	r0, [r7, #12]
 800eb08:	60b9      	str	r1, [r7, #8]
 800eb0a:	607a      	str	r2, [r7, #4]
 800eb0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d10a      	bne.n	800eb2e <xTimerGenericCommand+0x2e>
	__asm volatile
 800eb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1c:	f383 8811 	msr	BASEPRI, r3
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	623b      	str	r3, [r7, #32]
}
 800eb2a:	bf00      	nop
 800eb2c:	e7fe      	b.n	800eb2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eb2e:	4b1a      	ldr	r3, [pc, #104]	; (800eb98 <xTimerGenericCommand+0x98>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d02a      	beq.n	800eb8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	2b05      	cmp	r3, #5
 800eb46:	dc18      	bgt.n	800eb7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eb48:	f7ff feb2 	bl	800e8b0 <xTaskGetSchedulerState>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b02      	cmp	r3, #2
 800eb50:	d109      	bne.n	800eb66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eb52:	4b11      	ldr	r3, [pc, #68]	; (800eb98 <xTimerGenericCommand+0x98>)
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	f107 0110 	add.w	r1, r7, #16
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb5e:	f7fe fca1 	bl	800d4a4 <xQueueGenericSend>
 800eb62:	6278      	str	r0, [r7, #36]	; 0x24
 800eb64:	e012      	b.n	800eb8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eb66:	4b0c      	ldr	r3, [pc, #48]	; (800eb98 <xTimerGenericCommand+0x98>)
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	f107 0110 	add.w	r1, r7, #16
 800eb6e:	2300      	movs	r3, #0
 800eb70:	2200      	movs	r2, #0
 800eb72:	f7fe fc97 	bl	800d4a4 <xQueueGenericSend>
 800eb76:	6278      	str	r0, [r7, #36]	; 0x24
 800eb78:	e008      	b.n	800eb8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eb7a:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <xTimerGenericCommand+0x98>)
 800eb7c:	6818      	ldr	r0, [r3, #0]
 800eb7e:	f107 0110 	add.w	r1, r7, #16
 800eb82:	2300      	movs	r3, #0
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	f7fe fd8b 	bl	800d6a0 <xQueueGenericSendFromISR>
 800eb8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3728      	adds	r7, #40	; 0x28
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	20000ec4 	.word	0x20000ec4

0800eb9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b088      	sub	sp, #32
 800eba0:	af02      	add	r7, sp, #8
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eba6:	4b22      	ldr	r3, [pc, #136]	; (800ec30 <prvProcessExpiredTimer+0x94>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	3304      	adds	r3, #4
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe fb47 	bl	800d248 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ebc0:	f003 0304 	and.w	r3, r3, #4
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d022      	beq.n	800ec0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	699a      	ldr	r2, [r3, #24]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	18d1      	adds	r1, r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	683a      	ldr	r2, [r7, #0]
 800ebd4:	6978      	ldr	r0, [r7, #20]
 800ebd6:	f000 f8d1 	bl	800ed7c <prvInsertTimerInActiveList>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d01f      	beq.n	800ec20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	2100      	movs	r1, #0
 800ebea:	6978      	ldr	r0, [r7, #20]
 800ebec:	f7ff ff88 	bl	800eb00 <xTimerGenericCommand>
 800ebf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d113      	bne.n	800ec20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ebf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfc:	f383 8811 	msr	BASEPRI, r3
 800ec00:	f3bf 8f6f 	isb	sy
 800ec04:	f3bf 8f4f 	dsb	sy
 800ec08:	60fb      	str	r3, [r7, #12]
}
 800ec0a:	bf00      	nop
 800ec0c:	e7fe      	b.n	800ec0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec14:	f023 0301 	bic.w	r3, r3, #1
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	6978      	ldr	r0, [r7, #20]
 800ec26:	4798      	blx	r3
}
 800ec28:	bf00      	nop
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	20000ebc 	.word	0x20000ebc

0800ec34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b084      	sub	sp, #16
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec3c:	f107 0308 	add.w	r3, r7, #8
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f857 	bl	800ecf4 <prvGetNextExpireTime>
 800ec46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 f803 	bl	800ec58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ec52:	f000 f8d5 	bl	800ee00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ec56:	e7f1      	b.n	800ec3c <prvTimerTask+0x8>

0800ec58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ec62:	f7ff fa43 	bl	800e0ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 f866 	bl	800ed3c <prvSampleTimeNow>
 800ec70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d130      	bne.n	800ecda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <prvProcessTimerOrBlockTask+0x3c>
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d806      	bhi.n	800ec94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ec86:	f7ff fa3f 	bl	800e108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ec8a:	68f9      	ldr	r1, [r7, #12]
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7ff ff85 	bl	800eb9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec92:	e024      	b.n	800ecde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d008      	beq.n	800ecac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec9a:	4b13      	ldr	r3, [pc, #76]	; (800ece8 <prvProcessTimerOrBlockTask+0x90>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d101      	bne.n	800eca8 <prvProcessTimerOrBlockTask+0x50>
 800eca4:	2301      	movs	r3, #1
 800eca6:	e000      	b.n	800ecaa <prvProcessTimerOrBlockTask+0x52>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ecac:	4b0f      	ldr	r3, [pc, #60]	; (800ecec <prvProcessTimerOrBlockTask+0x94>)
 800ecae:	6818      	ldr	r0, [r3, #0]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	1ad3      	subs	r3, r2, r3
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	f7fe ffa7 	bl	800dc0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ecbe:	f7ff fa23 	bl	800e108 <xTaskResumeAll>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10a      	bne.n	800ecde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ecc8:	4b09      	ldr	r3, [pc, #36]	; (800ecf0 <prvProcessTimerOrBlockTask+0x98>)
 800ecca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecce:	601a      	str	r2, [r3, #0]
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	f3bf 8f6f 	isb	sy
}
 800ecd8:	e001      	b.n	800ecde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ecda:	f7ff fa15 	bl	800e108 <xTaskResumeAll>
}
 800ecde:	bf00      	nop
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	20000ec0 	.word	0x20000ec0
 800ecec:	20000ec4 	.word	0x20000ec4
 800ecf0:	e000ed04 	.word	0xe000ed04

0800ecf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ecfc:	4b0e      	ldr	r3, [pc, #56]	; (800ed38 <prvGetNextExpireTime+0x44>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <prvGetNextExpireTime+0x16>
 800ed06:	2201      	movs	r2, #1
 800ed08:	e000      	b.n	800ed0c <prvGetNextExpireTime+0x18>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d105      	bne.n	800ed24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ed18:	4b07      	ldr	r3, [pc, #28]	; (800ed38 <prvGetNextExpireTime+0x44>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	60fb      	str	r3, [r7, #12]
 800ed22:	e001      	b.n	800ed28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ed24:	2300      	movs	r3, #0
 800ed26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ed28:	68fb      	ldr	r3, [r7, #12]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3714      	adds	r7, #20
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed34:	4770      	bx	lr
 800ed36:	bf00      	nop
 800ed38:	20000ebc 	.word	0x20000ebc

0800ed3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ed44:	f7ff fa7e 	bl	800e244 <xTaskGetTickCount>
 800ed48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <prvSampleTimeNow+0x3c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d205      	bcs.n	800ed60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ed54:	f000 f936 	bl	800efc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	e002      	b.n	800ed66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ed66:	4a04      	ldr	r2, [pc, #16]	; (800ed78 <prvSampleTimeNow+0x3c>)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	20000ecc 	.word	0x20000ecc

0800ed7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d812      	bhi.n	800edc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	1ad2      	subs	r2, r2, r3
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	699b      	ldr	r3, [r3, #24]
 800edac:	429a      	cmp	r2, r3
 800edae:	d302      	bcc.n	800edb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800edb0:	2301      	movs	r3, #1
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	e01b      	b.n	800edee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800edb6:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <prvInsertTimerInActiveList+0x7c>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7fe fa08 	bl	800d1d6 <vListInsert>
 800edc6:	e012      	b.n	800edee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	429a      	cmp	r2, r3
 800edce:	d206      	bcs.n	800edde <prvInsertTimerInActiveList+0x62>
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d302      	bcc.n	800edde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800edd8:	2301      	movs	r3, #1
 800edda:	617b      	str	r3, [r7, #20]
 800eddc:	e007      	b.n	800edee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edde:	4b07      	ldr	r3, [pc, #28]	; (800edfc <prvInsertTimerInActiveList+0x80>)
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	3304      	adds	r3, #4
 800ede6:	4619      	mov	r1, r3
 800ede8:	4610      	mov	r0, r2
 800edea:	f7fe f9f4 	bl	800d1d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800edee:	697b      	ldr	r3, [r7, #20]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	20000ec0 	.word	0x20000ec0
 800edfc:	20000ebc 	.word	0x20000ebc

0800ee00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08e      	sub	sp, #56	; 0x38
 800ee04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee06:	e0ca      	b.n	800ef9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	da18      	bge.n	800ee40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ee0e:	1d3b      	adds	r3, r7, #4
 800ee10:	3304      	adds	r3, #4
 800ee12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10a      	bne.n	800ee30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	61fb      	str	r3, [r7, #28]
}
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee36:	6850      	ldr	r0, [r2, #4]
 800ee38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee3a:	6892      	ldr	r2, [r2, #8]
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f2c0 80ab 	blt.w	800ef9e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ee4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d004      	beq.n	800ee5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	3304      	adds	r3, #4
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe f9f5 	bl	800d248 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ee5e:	463b      	mov	r3, r7
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ff6b 	bl	800ed3c <prvSampleTimeNow>
 800ee66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2b09      	cmp	r3, #9
 800ee6c:	f200 8096 	bhi.w	800ef9c <prvProcessReceivedCommands+0x19c>
 800ee70:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <prvProcessReceivedCommands+0x78>)
 800ee72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee76:	bf00      	nop
 800ee78:	0800eea1 	.word	0x0800eea1
 800ee7c:	0800eea1 	.word	0x0800eea1
 800ee80:	0800eea1 	.word	0x0800eea1
 800ee84:	0800ef15 	.word	0x0800ef15
 800ee88:	0800ef29 	.word	0x0800ef29
 800ee8c:	0800ef73 	.word	0x0800ef73
 800ee90:	0800eea1 	.word	0x0800eea1
 800ee94:	0800eea1 	.word	0x0800eea1
 800ee98:	0800ef15 	.word	0x0800ef15
 800ee9c:	0800ef29 	.word	0x0800ef29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eea6:	f043 0301 	orr.w	r3, r3, #1
 800eeaa:	b2da      	uxtb	r2, r3
 800eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	18d1      	adds	r1, r2, r3
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec0:	f7ff ff5c 	bl	800ed7c <prvInsertTimerInActiveList>
 800eec4:	4603      	mov	r3, r0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d069      	beq.n	800ef9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eed8:	f003 0304 	and.w	r3, r3, #4
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d05e      	beq.n	800ef9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eee0:	68ba      	ldr	r2, [r7, #8]
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	699b      	ldr	r3, [r3, #24]
 800eee6:	441a      	add	r2, r3
 800eee8:	2300      	movs	r3, #0
 800eeea:	9300      	str	r3, [sp, #0]
 800eeec:	2300      	movs	r3, #0
 800eeee:	2100      	movs	r1, #0
 800eef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eef2:	f7ff fe05 	bl	800eb00 <xTimerGenericCommand>
 800eef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d14f      	bne.n	800ef9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800eefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef02:	f383 8811 	msr	BASEPRI, r3
 800ef06:	f3bf 8f6f 	isb	sy
 800ef0a:	f3bf 8f4f 	dsb	sy
 800ef0e:	61bb      	str	r3, [r7, #24]
}
 800ef10:	bf00      	nop
 800ef12:	e7fe      	b.n	800ef12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef1a:	f023 0301 	bic.w	r3, r3, #1
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ef26:	e03a      	b.n	800ef9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef2e:	f043 0301 	orr.w	r3, r3, #1
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10a      	bne.n	800ef5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ef48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4c:	f383 8811 	msr	BASEPRI, r3
 800ef50:	f3bf 8f6f 	isb	sy
 800ef54:	f3bf 8f4f 	dsb	sy
 800ef58:	617b      	str	r3, [r7, #20]
}
 800ef5a:	bf00      	nop
 800ef5c:	e7fe      	b.n	800ef5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	699a      	ldr	r2, [r3, #24]
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	18d1      	adds	r1, r2, r3
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef6c:	f7ff ff06 	bl	800ed7c <prvInsertTimerInActiveList>
					break;
 800ef70:	e015      	b.n	800ef9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ef72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef78:	f003 0302 	and.w	r3, r3, #2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d103      	bne.n	800ef88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ef80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef82:	f000 fbdd 	bl	800f740 <vPortFree>
 800ef86:	e00a      	b.n	800ef9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef8e:	f023 0301 	bic.w	r3, r3, #1
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef9a:	e000      	b.n	800ef9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800ef9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef9e:	4b08      	ldr	r3, [pc, #32]	; (800efc0 <prvProcessReceivedCommands+0x1c0>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	1d39      	adds	r1, r7, #4
 800efa4:	2200      	movs	r2, #0
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe fc16 	bl	800d7d8 <xQueueReceive>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f47f af2a 	bne.w	800ee08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800efb4:	bf00      	nop
 800efb6:	bf00      	nop
 800efb8:	3730      	adds	r7, #48	; 0x30
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20000ec4 	.word	0x20000ec4

0800efc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b088      	sub	sp, #32
 800efc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efca:	e048      	b.n	800f05e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800efcc:	4b2d      	ldr	r3, [pc, #180]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efd6:	4b2b      	ldr	r3, [pc, #172]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	3304      	adds	r3, #4
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7fe f92f 	bl	800d248 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6a1b      	ldr	r3, [r3, #32]
 800efee:	68f8      	ldr	r0, [r7, #12]
 800eff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eff8:	f003 0304 	and.w	r3, r3, #4
 800effc:	2b00      	cmp	r3, #0
 800effe:	d02e      	beq.n	800f05e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	699b      	ldr	r3, [r3, #24]
 800f004:	693a      	ldr	r2, [r7, #16]
 800f006:	4413      	add	r3, r2
 800f008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	429a      	cmp	r2, r3
 800f010:	d90e      	bls.n	800f030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f01e:	4b19      	ldr	r3, [pc, #100]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	3304      	adds	r3, #4
 800f026:	4619      	mov	r1, r3
 800f028:	4610      	mov	r0, r2
 800f02a:	f7fe f8d4 	bl	800d1d6 <vListInsert>
 800f02e:	e016      	b.n	800f05e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f030:	2300      	movs	r3, #0
 800f032:	9300      	str	r3, [sp, #0]
 800f034:	2300      	movs	r3, #0
 800f036:	693a      	ldr	r2, [r7, #16]
 800f038:	2100      	movs	r1, #0
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7ff fd60 	bl	800eb00 <xTimerGenericCommand>
 800f040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10a      	bne.n	800f05e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	603b      	str	r3, [r7, #0]
}
 800f05a:	bf00      	nop
 800f05c:	e7fe      	b.n	800f05c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f05e:	4b09      	ldr	r3, [pc, #36]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1b1      	bne.n	800efcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f068:	4b06      	ldr	r3, [pc, #24]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f06e:	4b06      	ldr	r3, [pc, #24]	; (800f088 <prvSwitchTimerLists+0xc4>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a04      	ldr	r2, [pc, #16]	; (800f084 <prvSwitchTimerLists+0xc0>)
 800f074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f076:	4a04      	ldr	r2, [pc, #16]	; (800f088 <prvSwitchTimerLists+0xc4>)
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	6013      	str	r3, [r2, #0]
}
 800f07c:	bf00      	nop
 800f07e:	3718      	adds	r7, #24
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20000ebc 	.word	0x20000ebc
 800f088:	20000ec0 	.word	0x20000ec0

0800f08c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b082      	sub	sp, #8
 800f090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f092:	f000 f967 	bl	800f364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f096:	4b15      	ldr	r3, [pc, #84]	; (800f0ec <prvCheckForValidListAndQueue+0x60>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d120      	bne.n	800f0e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f09e:	4814      	ldr	r0, [pc, #80]	; (800f0f0 <prvCheckForValidListAndQueue+0x64>)
 800f0a0:	f7fe f848 	bl	800d134 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f0a4:	4813      	ldr	r0, [pc, #76]	; (800f0f4 <prvCheckForValidListAndQueue+0x68>)
 800f0a6:	f7fe f845 	bl	800d134 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f0aa:	4b13      	ldr	r3, [pc, #76]	; (800f0f8 <prvCheckForValidListAndQueue+0x6c>)
 800f0ac:	4a10      	ldr	r2, [pc, #64]	; (800f0f0 <prvCheckForValidListAndQueue+0x64>)
 800f0ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f0b0:	4b12      	ldr	r3, [pc, #72]	; (800f0fc <prvCheckForValidListAndQueue+0x70>)
 800f0b2:	4a10      	ldr	r2, [pc, #64]	; (800f0f4 <prvCheckForValidListAndQueue+0x68>)
 800f0b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	9300      	str	r3, [sp, #0]
 800f0ba:	4b11      	ldr	r3, [pc, #68]	; (800f100 <prvCheckForValidListAndQueue+0x74>)
 800f0bc:	4a11      	ldr	r2, [pc, #68]	; (800f104 <prvCheckForValidListAndQueue+0x78>)
 800f0be:	2110      	movs	r1, #16
 800f0c0:	200a      	movs	r0, #10
 800f0c2:	f7fe f953 	bl	800d36c <xQueueGenericCreateStatic>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	4a08      	ldr	r2, [pc, #32]	; (800f0ec <prvCheckForValidListAndQueue+0x60>)
 800f0ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <prvCheckForValidListAndQueue+0x60>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d005      	beq.n	800f0e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f0d4:	4b05      	ldr	r3, [pc, #20]	; (800f0ec <prvCheckForValidListAndQueue+0x60>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	490b      	ldr	r1, [pc, #44]	; (800f108 <prvCheckForValidListAndQueue+0x7c>)
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fe fd6c 	bl	800dbb8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f0e0:	f000 f970 	bl	800f3c4 <vPortExitCritical>
}
 800f0e4:	bf00      	nop
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20000ec4 	.word	0x20000ec4
 800f0f0:	20000e94 	.word	0x20000e94
 800f0f4:	20000ea8 	.word	0x20000ea8
 800f0f8:	20000ebc 	.word	0x20000ebc
 800f0fc:	20000ec0 	.word	0x20000ec0
 800f100:	20000f70 	.word	0x20000f70
 800f104:	20000ed0 	.word	0x20000ed0
 800f108:	0800fa48 	.word	0x0800fa48

0800f10c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f10c:	b480      	push	{r7}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3b04      	subs	r3, #4
 800f11c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3b04      	subs	r3, #4
 800f12a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	f023 0201 	bic.w	r2, r3, #1
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3b04      	subs	r3, #4
 800f13a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f13c:	4a0c      	ldr	r2, [pc, #48]	; (800f170 <pxPortInitialiseStack+0x64>)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3b14      	subs	r3, #20
 800f146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	3b04      	subs	r3, #4
 800f152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f06f 0202 	mvn.w	r2, #2
 800f15a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3b20      	subs	r3, #32
 800f160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f162:	68fb      	ldr	r3, [r7, #12]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	0800f175 	.word	0x0800f175

0800f174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f17e:	4b12      	ldr	r3, [pc, #72]	; (800f1c8 <prvTaskExitError+0x54>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f186:	d00a      	beq.n	800f19e <prvTaskExitError+0x2a>
	__asm volatile
 800f188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f18c:	f383 8811 	msr	BASEPRI, r3
 800f190:	f3bf 8f6f 	isb	sy
 800f194:	f3bf 8f4f 	dsb	sy
 800f198:	60fb      	str	r3, [r7, #12]
}
 800f19a:	bf00      	nop
 800f19c:	e7fe      	b.n	800f19c <prvTaskExitError+0x28>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	60bb      	str	r3, [r7, #8]
}
 800f1b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f1b2:	bf00      	nop
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d0fc      	beq.n	800f1b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f1ba:	bf00      	nop
 800f1bc:	bf00      	nop
 800f1be:	3714      	adds	r7, #20
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	2000000c 	.word	0x2000000c
 800f1cc:	00000000 	.word	0x00000000

0800f1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f1d0:	4b07      	ldr	r3, [pc, #28]	; (800f1f0 <pxCurrentTCBConst2>)
 800f1d2:	6819      	ldr	r1, [r3, #0]
 800f1d4:	6808      	ldr	r0, [r1, #0]
 800f1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1da:	f380 8809 	msr	PSP, r0
 800f1de:	f3bf 8f6f 	isb	sy
 800f1e2:	f04f 0000 	mov.w	r0, #0
 800f1e6:	f380 8811 	msr	BASEPRI, r0
 800f1ea:	4770      	bx	lr
 800f1ec:	f3af 8000 	nop.w

0800f1f0 <pxCurrentTCBConst2>:
 800f1f0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop

0800f1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f1f8:	4808      	ldr	r0, [pc, #32]	; (800f21c <prvPortStartFirstTask+0x24>)
 800f1fa:	6800      	ldr	r0, [r0, #0]
 800f1fc:	6800      	ldr	r0, [r0, #0]
 800f1fe:	f380 8808 	msr	MSP, r0
 800f202:	f04f 0000 	mov.w	r0, #0
 800f206:	f380 8814 	msr	CONTROL, r0
 800f20a:	b662      	cpsie	i
 800f20c:	b661      	cpsie	f
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	df00      	svc	0
 800f218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f21a:	bf00      	nop
 800f21c:	e000ed08 	.word	0xe000ed08

0800f220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b086      	sub	sp, #24
 800f224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f226:	4b46      	ldr	r3, [pc, #280]	; (800f340 <xPortStartScheduler+0x120>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a46      	ldr	r2, [pc, #280]	; (800f344 <xPortStartScheduler+0x124>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d10a      	bne.n	800f246 <xPortStartScheduler+0x26>
	__asm volatile
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	613b      	str	r3, [r7, #16]
}
 800f242:	bf00      	nop
 800f244:	e7fe      	b.n	800f244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f246:	4b3e      	ldr	r3, [pc, #248]	; (800f340 <xPortStartScheduler+0x120>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	4a3f      	ldr	r2, [pc, #252]	; (800f348 <xPortStartScheduler+0x128>)
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d10a      	bne.n	800f266 <xPortStartScheduler+0x46>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	60fb      	str	r3, [r7, #12]
}
 800f262:	bf00      	nop
 800f264:	e7fe      	b.n	800f264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f266:	4b39      	ldr	r3, [pc, #228]	; (800f34c <xPortStartScheduler+0x12c>)
 800f268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	22ff      	movs	r2, #255	; 0xff
 800f276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	b2db      	uxtb	r3, r3
 800f284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	4b31      	ldr	r3, [pc, #196]	; (800f350 <xPortStartScheduler+0x130>)
 800f28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f28e:	4b31      	ldr	r3, [pc, #196]	; (800f354 <xPortStartScheduler+0x134>)
 800f290:	2207      	movs	r2, #7
 800f292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f294:	e009      	b.n	800f2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f296:	4b2f      	ldr	r3, [pc, #188]	; (800f354 <xPortStartScheduler+0x134>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	3b01      	subs	r3, #1
 800f29c:	4a2d      	ldr	r2, [pc, #180]	; (800f354 <xPortStartScheduler+0x134>)
 800f29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f2a0:	78fb      	ldrb	r3, [r7, #3]
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2aa:	78fb      	ldrb	r3, [r7, #3]
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2b2:	2b80      	cmp	r3, #128	; 0x80
 800f2b4:	d0ef      	beq.n	800f296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f2b6:	4b27      	ldr	r3, [pc, #156]	; (800f354 <xPortStartScheduler+0x134>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	f1c3 0307 	rsb	r3, r3, #7
 800f2be:	2b04      	cmp	r3, #4
 800f2c0:	d00a      	beq.n	800f2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	60bb      	str	r3, [r7, #8]
}
 800f2d4:	bf00      	nop
 800f2d6:	e7fe      	b.n	800f2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f2d8:	4b1e      	ldr	r3, [pc, #120]	; (800f354 <xPortStartScheduler+0x134>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	021b      	lsls	r3, r3, #8
 800f2de:	4a1d      	ldr	r2, [pc, #116]	; (800f354 <xPortStartScheduler+0x134>)
 800f2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f2e2:	4b1c      	ldr	r3, [pc, #112]	; (800f354 <xPortStartScheduler+0x134>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f2ea:	4a1a      	ldr	r2, [pc, #104]	; (800f354 <xPortStartScheduler+0x134>)
 800f2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f2f6:	4b18      	ldr	r3, [pc, #96]	; (800f358 <xPortStartScheduler+0x138>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4a17      	ldr	r2, [pc, #92]	; (800f358 <xPortStartScheduler+0x138>)
 800f2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f302:	4b15      	ldr	r3, [pc, #84]	; (800f358 <xPortStartScheduler+0x138>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a14      	ldr	r2, [pc, #80]	; (800f358 <xPortStartScheduler+0x138>)
 800f308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f30e:	f000 f8dd 	bl	800f4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f312:	4b12      	ldr	r3, [pc, #72]	; (800f35c <xPortStartScheduler+0x13c>)
 800f314:	2200      	movs	r2, #0
 800f316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f318:	f000 f8fc 	bl	800f514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <xPortStartScheduler+0x140>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4a0f      	ldr	r2, [pc, #60]	; (800f360 <xPortStartScheduler+0x140>)
 800f322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f328:	f7ff ff66 	bl	800f1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f32c:	f7ff f854 	bl	800e3d8 <vTaskSwitchContext>
	prvTaskExitError();
 800f330:	f7ff ff20 	bl	800f174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3718      	adds	r7, #24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	e000ed00 	.word	0xe000ed00
 800f344:	410fc271 	.word	0x410fc271
 800f348:	410fc270 	.word	0x410fc270
 800f34c:	e000e400 	.word	0xe000e400
 800f350:	20000fc0 	.word	0x20000fc0
 800f354:	20000fc4 	.word	0x20000fc4
 800f358:	e000ed20 	.word	0xe000ed20
 800f35c:	2000000c 	.word	0x2000000c
 800f360:	e000ef34 	.word	0xe000ef34

0800f364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
	__asm volatile
 800f36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36e:	f383 8811 	msr	BASEPRI, r3
 800f372:	f3bf 8f6f 	isb	sy
 800f376:	f3bf 8f4f 	dsb	sy
 800f37a:	607b      	str	r3, [r7, #4]
}
 800f37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f37e:	4b0f      	ldr	r3, [pc, #60]	; (800f3bc <vPortEnterCritical+0x58>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	3301      	adds	r3, #1
 800f384:	4a0d      	ldr	r2, [pc, #52]	; (800f3bc <vPortEnterCritical+0x58>)
 800f386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f388:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <vPortEnterCritical+0x58>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d10f      	bne.n	800f3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f390:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <vPortEnterCritical+0x5c>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00a      	beq.n	800f3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39e:	f383 8811 	msr	BASEPRI, r3
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	f3bf 8f4f 	dsb	sy
 800f3aa:	603b      	str	r3, [r7, #0]
}
 800f3ac:	bf00      	nop
 800f3ae:	e7fe      	b.n	800f3ae <vPortEnterCritical+0x4a>
	}
}
 800f3b0:	bf00      	nop
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	2000000c 	.word	0x2000000c
 800f3c0:	e000ed04 	.word	0xe000ed04

0800f3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f3ca:	4b12      	ldr	r3, [pc, #72]	; (800f414 <vPortExitCritical+0x50>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10a      	bne.n	800f3e8 <vPortExitCritical+0x24>
	__asm volatile
 800f3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d6:	f383 8811 	msr	BASEPRI, r3
 800f3da:	f3bf 8f6f 	isb	sy
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	607b      	str	r3, [r7, #4]
}
 800f3e4:	bf00      	nop
 800f3e6:	e7fe      	b.n	800f3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f3e8:	4b0a      	ldr	r3, [pc, #40]	; (800f414 <vPortExitCritical+0x50>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	3b01      	subs	r3, #1
 800f3ee:	4a09      	ldr	r2, [pc, #36]	; (800f414 <vPortExitCritical+0x50>)
 800f3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f3f2:	4b08      	ldr	r3, [pc, #32]	; (800f414 <vPortExitCritical+0x50>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d105      	bne.n	800f406 <vPortExitCritical+0x42>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	f383 8811 	msr	BASEPRI, r3
}
 800f404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f406:	bf00      	nop
 800f408:	370c      	adds	r7, #12
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	2000000c 	.word	0x2000000c
	...

0800f420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f420:	f3ef 8009 	mrs	r0, PSP
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	4b15      	ldr	r3, [pc, #84]	; (800f480 <pxCurrentTCBConst>)
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	f01e 0f10 	tst.w	lr, #16
 800f430:	bf08      	it	eq
 800f432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43a:	6010      	str	r0, [r2, #0]
 800f43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f444:	f380 8811 	msr	BASEPRI, r0
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	f3bf 8f6f 	isb	sy
 800f450:	f7fe ffc2 	bl	800e3d8 <vTaskSwitchContext>
 800f454:	f04f 0000 	mov.w	r0, #0
 800f458:	f380 8811 	msr	BASEPRI, r0
 800f45c:	bc09      	pop	{r0, r3}
 800f45e:	6819      	ldr	r1, [r3, #0]
 800f460:	6808      	ldr	r0, [r1, #0]
 800f462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f466:	f01e 0f10 	tst.w	lr, #16
 800f46a:	bf08      	it	eq
 800f46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f470:	f380 8809 	msr	PSP, r0
 800f474:	f3bf 8f6f 	isb	sy
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	f3af 8000 	nop.w

0800f480 <pxCurrentTCBConst>:
 800f480:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f484:	bf00      	nop
 800f486:	bf00      	nop

0800f488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
	__asm volatile
 800f48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f492:	f383 8811 	msr	BASEPRI, r3
 800f496:	f3bf 8f6f 	isb	sy
 800f49a:	f3bf 8f4f 	dsb	sy
 800f49e:	607b      	str	r3, [r7, #4]
}
 800f4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f4a2:	f7fe fedf 	bl	800e264 <xTaskIncrementTick>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d003      	beq.n	800f4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f4ac:	4b06      	ldr	r3, [pc, #24]	; (800f4c8 <xPortSysTickHandler+0x40>)
 800f4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	f383 8811 	msr	BASEPRI, r3
}
 800f4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	e000ed04 	.word	0xe000ed04

0800f4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f4d0:	4b0b      	ldr	r3, [pc, #44]	; (800f500 <vPortSetupTimerInterrupt+0x34>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f4d6:	4b0b      	ldr	r3, [pc, #44]	; (800f504 <vPortSetupTimerInterrupt+0x38>)
 800f4d8:	2200      	movs	r2, #0
 800f4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f4dc:	4b0a      	ldr	r3, [pc, #40]	; (800f508 <vPortSetupTimerInterrupt+0x3c>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	4a0a      	ldr	r2, [pc, #40]	; (800f50c <vPortSetupTimerInterrupt+0x40>)
 800f4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f4e6:	099b      	lsrs	r3, r3, #6
 800f4e8:	4a09      	ldr	r2, [pc, #36]	; (800f510 <vPortSetupTimerInterrupt+0x44>)
 800f4ea:	3b01      	subs	r3, #1
 800f4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f4ee:	4b04      	ldr	r3, [pc, #16]	; (800f500 <vPortSetupTimerInterrupt+0x34>)
 800f4f0:	2207      	movs	r2, #7
 800f4f2:	601a      	str	r2, [r3, #0]
}
 800f4f4:	bf00      	nop
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	e000e010 	.word	0xe000e010
 800f504:	e000e018 	.word	0xe000e018
 800f508:	20000000 	.word	0x20000000
 800f50c:	10624dd3 	.word	0x10624dd3
 800f510:	e000e014 	.word	0xe000e014

0800f514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f524 <vPortEnableVFP+0x10>
 800f518:	6801      	ldr	r1, [r0, #0]
 800f51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f51e:	6001      	str	r1, [r0, #0]
 800f520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f522:	bf00      	nop
 800f524:	e000ed88 	.word	0xe000ed88

0800f528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f52e:	f3ef 8305 	mrs	r3, IPSR
 800f532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2b0f      	cmp	r3, #15
 800f538:	d914      	bls.n	800f564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f53a:	4a17      	ldr	r2, [pc, #92]	; (800f598 <vPortValidateInterruptPriority+0x70>)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	4413      	add	r3, r2
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f544:	4b15      	ldr	r3, [pc, #84]	; (800f59c <vPortValidateInterruptPriority+0x74>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	7afa      	ldrb	r2, [r7, #11]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d20a      	bcs.n	800f564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	607b      	str	r3, [r7, #4]
}
 800f560:	bf00      	nop
 800f562:	e7fe      	b.n	800f562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f564:	4b0e      	ldr	r3, [pc, #56]	; (800f5a0 <vPortValidateInterruptPriority+0x78>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f56c:	4b0d      	ldr	r3, [pc, #52]	; (800f5a4 <vPortValidateInterruptPriority+0x7c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	d90a      	bls.n	800f58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f578:	f383 8811 	msr	BASEPRI, r3
 800f57c:	f3bf 8f6f 	isb	sy
 800f580:	f3bf 8f4f 	dsb	sy
 800f584:	603b      	str	r3, [r7, #0]
}
 800f586:	bf00      	nop
 800f588:	e7fe      	b.n	800f588 <vPortValidateInterruptPriority+0x60>
	}
 800f58a:	bf00      	nop
 800f58c:	3714      	adds	r7, #20
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	e000e3f0 	.word	0xe000e3f0
 800f59c:	20000fc0 	.word	0x20000fc0
 800f5a0:	e000ed0c 	.word	0xe000ed0c
 800f5a4:	20000fc4 	.word	0x20000fc4

0800f5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08a      	sub	sp, #40	; 0x28
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f5b4:	f7fe fd9a 	bl	800e0ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f5b8:	4b5b      	ldr	r3, [pc, #364]	; (800f728 <pvPortMalloc+0x180>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d101      	bne.n	800f5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f5c0:	f000 f920 	bl	800f804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f5c4:	4b59      	ldr	r3, [pc, #356]	; (800f72c <pvPortMalloc+0x184>)
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4013      	ands	r3, r2
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f040 8093 	bne.w	800f6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d01d      	beq.n	800f614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f5d8:	2208      	movs	r2, #8
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4413      	add	r3, r2
 800f5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f003 0307 	and.w	r3, r3, #7
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d014      	beq.n	800f614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f023 0307 	bic.w	r3, r3, #7
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f003 0307 	and.w	r3, r3, #7
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00a      	beq.n	800f614 <pvPortMalloc+0x6c>
	__asm volatile
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	617b      	str	r3, [r7, #20]
}
 800f610:	bf00      	nop
 800f612:	e7fe      	b.n	800f612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d06e      	beq.n	800f6f8 <pvPortMalloc+0x150>
 800f61a:	4b45      	ldr	r3, [pc, #276]	; (800f730 <pvPortMalloc+0x188>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	429a      	cmp	r2, r3
 800f622:	d869      	bhi.n	800f6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f624:	4b43      	ldr	r3, [pc, #268]	; (800f734 <pvPortMalloc+0x18c>)
 800f626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f628:	4b42      	ldr	r3, [pc, #264]	; (800f734 <pvPortMalloc+0x18c>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f62e:	e004      	b.n	800f63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	429a      	cmp	r2, r3
 800f642:	d903      	bls.n	800f64c <pvPortMalloc+0xa4>
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1f1      	bne.n	800f630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f64c:	4b36      	ldr	r3, [pc, #216]	; (800f728 <pvPortMalloc+0x180>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f652:	429a      	cmp	r2, r3
 800f654:	d050      	beq.n	800f6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f656:	6a3b      	ldr	r3, [r7, #32]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2208      	movs	r2, #8
 800f65c:	4413      	add	r3, r2
 800f65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	681a      	ldr	r2, [r3, #0]
 800f664:	6a3b      	ldr	r3, [r7, #32]
 800f666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f66a:	685a      	ldr	r2, [r3, #4]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	1ad2      	subs	r2, r2, r3
 800f670:	2308      	movs	r3, #8
 800f672:	005b      	lsls	r3, r3, #1
 800f674:	429a      	cmp	r2, r3
 800f676:	d91f      	bls.n	800f6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4413      	add	r3, r2
 800f67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	f003 0307 	and.w	r3, r3, #7
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00a      	beq.n	800f6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800f68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68e:	f383 8811 	msr	BASEPRI, r3
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	f3bf 8f4f 	dsb	sy
 800f69a:	613b      	str	r3, [r7, #16]
}
 800f69c:	bf00      	nop
 800f69e:	e7fe      	b.n	800f69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a2:	685a      	ldr	r2, [r3, #4]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	1ad2      	subs	r2, r2, r3
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ae:	687a      	ldr	r2, [r7, #4]
 800f6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f6b2:	69b8      	ldr	r0, [r7, #24]
 800f6b4:	f000 f908 	bl	800f8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f6b8:	4b1d      	ldr	r3, [pc, #116]	; (800f730 <pvPortMalloc+0x188>)
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	1ad3      	subs	r3, r2, r3
 800f6c2:	4a1b      	ldr	r2, [pc, #108]	; (800f730 <pvPortMalloc+0x188>)
 800f6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f6c6:	4b1a      	ldr	r3, [pc, #104]	; (800f730 <pvPortMalloc+0x188>)
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	4b1b      	ldr	r3, [pc, #108]	; (800f738 <pvPortMalloc+0x190>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d203      	bcs.n	800f6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f6d2:	4b17      	ldr	r3, [pc, #92]	; (800f730 <pvPortMalloc+0x188>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a18      	ldr	r2, [pc, #96]	; (800f738 <pvPortMalloc+0x190>)
 800f6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6dc:	685a      	ldr	r2, [r3, #4]
 800f6de:	4b13      	ldr	r3, [pc, #76]	; (800f72c <pvPortMalloc+0x184>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	431a      	orrs	r2, r3
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f6ee:	4b13      	ldr	r3, [pc, #76]	; (800f73c <pvPortMalloc+0x194>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	4a11      	ldr	r2, [pc, #68]	; (800f73c <pvPortMalloc+0x194>)
 800f6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f6f8:	f7fe fd06 	bl	800e108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	f003 0307 	and.w	r3, r3, #7
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00a      	beq.n	800f71c <pvPortMalloc+0x174>
	__asm volatile
 800f706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70a:	f383 8811 	msr	BASEPRI, r3
 800f70e:	f3bf 8f6f 	isb	sy
 800f712:	f3bf 8f4f 	dsb	sy
 800f716:	60fb      	str	r3, [r7, #12]
}
 800f718:	bf00      	nop
 800f71a:	e7fe      	b.n	800f71a <pvPortMalloc+0x172>
	return pvReturn;
 800f71c:	69fb      	ldr	r3, [r7, #28]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3728      	adds	r7, #40	; 0x28
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20004bd0 	.word	0x20004bd0
 800f72c:	20004be4 	.word	0x20004be4
 800f730:	20004bd4 	.word	0x20004bd4
 800f734:	20004bc8 	.word	0x20004bc8
 800f738:	20004bd8 	.word	0x20004bd8
 800f73c:	20004bdc 	.word	0x20004bdc

0800f740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d04d      	beq.n	800f7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f752:	2308      	movs	r3, #8
 800f754:	425b      	negs	r3, r3
 800f756:	697a      	ldr	r2, [r7, #20]
 800f758:	4413      	add	r3, r2
 800f75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	4b24      	ldr	r3, [pc, #144]	; (800f7f8 <vPortFree+0xb8>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4013      	ands	r3, r2
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d10a      	bne.n	800f784 <vPortFree+0x44>
	__asm volatile
 800f76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f772:	f383 8811 	msr	BASEPRI, r3
 800f776:	f3bf 8f6f 	isb	sy
 800f77a:	f3bf 8f4f 	dsb	sy
 800f77e:	60fb      	str	r3, [r7, #12]
}
 800f780:	bf00      	nop
 800f782:	e7fe      	b.n	800f782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d00a      	beq.n	800f7a2 <vPortFree+0x62>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	60bb      	str	r3, [r7, #8]
}
 800f79e:	bf00      	nop
 800f7a0:	e7fe      	b.n	800f7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	685a      	ldr	r2, [r3, #4]
 800f7a6:	4b14      	ldr	r3, [pc, #80]	; (800f7f8 <vPortFree+0xb8>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d01e      	beq.n	800f7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d11a      	bne.n	800f7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	685a      	ldr	r2, [r3, #4]
 800f7bc:	4b0e      	ldr	r3, [pc, #56]	; (800f7f8 <vPortFree+0xb8>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	43db      	mvns	r3, r3
 800f7c2:	401a      	ands	r2, r3
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f7c8:	f7fe fc90 	bl	800e0ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	4b0a      	ldr	r3, [pc, #40]	; (800f7fc <vPortFree+0xbc>)
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4413      	add	r3, r2
 800f7d6:	4a09      	ldr	r2, [pc, #36]	; (800f7fc <vPortFree+0xbc>)
 800f7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f7da:	6938      	ldr	r0, [r7, #16]
 800f7dc:	f000 f874 	bl	800f8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f7e0:	4b07      	ldr	r3, [pc, #28]	; (800f800 <vPortFree+0xc0>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	4a06      	ldr	r2, [pc, #24]	; (800f800 <vPortFree+0xc0>)
 800f7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f7ea:	f7fe fc8d 	bl	800e108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f7ee:	bf00      	nop
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	20004be4 	.word	0x20004be4
 800f7fc:	20004bd4 	.word	0x20004bd4
 800f800:	20004be0 	.word	0x20004be0

0800f804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f80a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f810:	4b27      	ldr	r3, [pc, #156]	; (800f8b0 <prvHeapInit+0xac>)
 800f812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f003 0307 	and.w	r3, r3, #7
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00c      	beq.n	800f838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3307      	adds	r3, #7
 800f822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f023 0307 	bic.w	r3, r3, #7
 800f82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	4a1f      	ldr	r2, [pc, #124]	; (800f8b0 <prvHeapInit+0xac>)
 800f834:	4413      	add	r3, r2
 800f836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f83c:	4a1d      	ldr	r2, [pc, #116]	; (800f8b4 <prvHeapInit+0xb0>)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f842:	4b1c      	ldr	r3, [pc, #112]	; (800f8b4 <prvHeapInit+0xb0>)
 800f844:	2200      	movs	r2, #0
 800f846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	4413      	add	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f850:	2208      	movs	r2, #8
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	1a9b      	subs	r3, r3, r2
 800f856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0307 	bic.w	r3, r3, #7
 800f85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	4a15      	ldr	r2, [pc, #84]	; (800f8b8 <prvHeapInit+0xb4>)
 800f864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f866:	4b14      	ldr	r3, [pc, #80]	; (800f8b8 <prvHeapInit+0xb4>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2200      	movs	r2, #0
 800f86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f86e:	4b12      	ldr	r3, [pc, #72]	; (800f8b8 <prvHeapInit+0xb4>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2200      	movs	r2, #0
 800f874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	1ad2      	subs	r2, r2, r3
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f884:	4b0c      	ldr	r3, [pc, #48]	; (800f8b8 <prvHeapInit+0xb4>)
 800f886:	681a      	ldr	r2, [r3, #0]
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	4a0a      	ldr	r2, [pc, #40]	; (800f8bc <prvHeapInit+0xb8>)
 800f892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	4a09      	ldr	r2, [pc, #36]	; (800f8c0 <prvHeapInit+0xbc>)
 800f89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f89c:	4b09      	ldr	r3, [pc, #36]	; (800f8c4 <prvHeapInit+0xc0>)
 800f89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f8a2:	601a      	str	r2, [r3, #0]
}
 800f8a4:	bf00      	nop
 800f8a6:	3714      	adds	r7, #20
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	20000fc8 	.word	0x20000fc8
 800f8b4:	20004bc8 	.word	0x20004bc8
 800f8b8:	20004bd0 	.word	0x20004bd0
 800f8bc:	20004bd8 	.word	0x20004bd8
 800f8c0:	20004bd4 	.word	0x20004bd4
 800f8c4:	20004be4 	.word	0x20004be4

0800f8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b085      	sub	sp, #20
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f8d0:	4b28      	ldr	r3, [pc, #160]	; (800f974 <prvInsertBlockIntoFreeList+0xac>)
 800f8d2:	60fb      	str	r3, [r7, #12]
 800f8d4:	e002      	b.n	800f8dc <prvInsertBlockIntoFreeList+0x14>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60fb      	str	r3, [r7, #12]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d8f7      	bhi.n	800f8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	68ba      	ldr	r2, [r7, #8]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d108      	bne.n	800f90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	441a      	add	r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	441a      	add	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d118      	bne.n	800f950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	4b15      	ldr	r3, [pc, #84]	; (800f978 <prvInsertBlockIntoFreeList+0xb0>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	429a      	cmp	r2, r3
 800f928:	d00d      	beq.n	800f946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685a      	ldr	r2, [r3, #4]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	441a      	add	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	601a      	str	r2, [r3, #0]
 800f944:	e008      	b.n	800f958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f946:	4b0c      	ldr	r3, [pc, #48]	; (800f978 <prvInsertBlockIntoFreeList+0xb0>)
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	e003      	b.n	800f958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d002      	beq.n	800f966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	687a      	ldr	r2, [r7, #4]
 800f964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f966:	bf00      	nop
 800f968:	3714      	adds	r7, #20
 800f96a:	46bd      	mov	sp, r7
 800f96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	20004bc8 	.word	0x20004bc8
 800f978:	20004bd0 	.word	0x20004bd0

0800f97c <memset>:
 800f97c:	4402      	add	r2, r0
 800f97e:	4603      	mov	r3, r0
 800f980:	4293      	cmp	r3, r2
 800f982:	d100      	bne.n	800f986 <memset+0xa>
 800f984:	4770      	bx	lr
 800f986:	f803 1b01 	strb.w	r1, [r3], #1
 800f98a:	e7f9      	b.n	800f980 <memset+0x4>

0800f98c <__libc_init_array>:
 800f98c:	b570      	push	{r4, r5, r6, lr}
 800f98e:	4d0d      	ldr	r5, [pc, #52]	; (800f9c4 <__libc_init_array+0x38>)
 800f990:	4c0d      	ldr	r4, [pc, #52]	; (800f9c8 <__libc_init_array+0x3c>)
 800f992:	1b64      	subs	r4, r4, r5
 800f994:	10a4      	asrs	r4, r4, #2
 800f996:	2600      	movs	r6, #0
 800f998:	42a6      	cmp	r6, r4
 800f99a:	d109      	bne.n	800f9b0 <__libc_init_array+0x24>
 800f99c:	4d0b      	ldr	r5, [pc, #44]	; (800f9cc <__libc_init_array+0x40>)
 800f99e:	4c0c      	ldr	r4, [pc, #48]	; (800f9d0 <__libc_init_array+0x44>)
 800f9a0:	f000 f826 	bl	800f9f0 <_init>
 800f9a4:	1b64      	subs	r4, r4, r5
 800f9a6:	10a4      	asrs	r4, r4, #2
 800f9a8:	2600      	movs	r6, #0
 800f9aa:	42a6      	cmp	r6, r4
 800f9ac:	d105      	bne.n	800f9ba <__libc_init_array+0x2e>
 800f9ae:	bd70      	pop	{r4, r5, r6, pc}
 800f9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9b4:	4798      	blx	r3
 800f9b6:	3601      	adds	r6, #1
 800f9b8:	e7ee      	b.n	800f998 <__libc_init_array+0xc>
 800f9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9be:	4798      	blx	r3
 800f9c0:	3601      	adds	r6, #1
 800f9c2:	e7f2      	b.n	800f9aa <__libc_init_array+0x1e>
 800f9c4:	0800fb48 	.word	0x0800fb48
 800f9c8:	0800fb48 	.word	0x0800fb48
 800f9cc:	0800fb48 	.word	0x0800fb48
 800f9d0:	0800fb4c 	.word	0x0800fb4c

0800f9d4 <memcpy>:
 800f9d4:	440a      	add	r2, r1
 800f9d6:	4291      	cmp	r1, r2
 800f9d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9dc:	d100      	bne.n	800f9e0 <memcpy+0xc>
 800f9de:	4770      	bx	lr
 800f9e0:	b510      	push	{r4, lr}
 800f9e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9ea:	4291      	cmp	r1, r2
 800f9ec:	d1f9      	bne.n	800f9e2 <memcpy+0xe>
 800f9ee:	bd10      	pop	{r4, pc}

0800f9f0 <_init>:
 800f9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f2:	bf00      	nop
 800f9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9f6:	bc08      	pop	{r3}
 800f9f8:	469e      	mov	lr, r3
 800f9fa:	4770      	bx	lr

0800f9fc <_fini>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	bf00      	nop
 800fa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa02:	bc08      	pop	{r3}
 800fa04:	469e      	mov	lr, r3
 800fa06:	4770      	bx	lr
