
01_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  080052ac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  080052ac  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f759  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ada  00000000  00000000  0002f834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b63  00000000  00000000  000331d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001799f  00000000  00000000  00033d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012985  00000000  00000000  0004b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e43e  00000000  00000000  0005e057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004100  00000000  00000000  000ec498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000f0598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ce4 	.word	0x08004ce4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004ce4 	.word	0x08004ce4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <BL_UART_Fetch_Host_Command>:
/*
* @breif : this function is used to fetch the command from the host and parse it 
           then replay with BL_OK or BL_NACk 
*/
BL_Status BL_UART_Fetch_Host_Command(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
    BL_Status Status = BL_NACK ;
 8000582:	2300      	movs	r3, #0
 8000584:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef HAL_Status = HAL_ERROR;                                 
 8000586:	2301      	movs	r3, #1
 8000588:	71bb      	strb	r3, [r7, #6]
    uint8_t Data_Length = 0;                                                 // Length of the data will be received
 800058a:	2300      	movs	r3, #0
 800058c:	717b      	strb	r3, [r7, #5]

    memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);                    // Write 0 to the array to be ready for new data
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	2100      	movs	r1, #0
 8000592:	4853      	ldr	r0, [pc, #332]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 8000594:	f003 ff22 	bl	80043dc <memset>

    /* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, BL_Host_Buffer, 1, 1000);
 8000598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059c:	2201      	movs	r2, #1
 800059e:	4950      	ldr	r1, [pc, #320]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 80005a0:	4850      	ldr	r0, [pc, #320]	; (80006e4 <BL_UART_Fetch_Host_Command+0x168>)
 80005a2:	f003 fb76 	bl	8003c92 <HAL_UART_Receive>
 80005a6:	4603      	mov	r3, r0
 80005a8:	71bb      	strb	r3, [r7, #6]
	// Check for Validation 
    if(HAL_Status != HAL_OK)                                                                        
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d002      	beq.n	80005b6 <BL_UART_Fetch_Host_Command+0x3a>
    {
		Status = BL_NACK;
 80005b0:	2300      	movs	r3, #0
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	e08e      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
	}
	else
    {
		 HAL_TIM_Base_Stop_IT(&htim3);
 80005b6:	484c      	ldr	r0, [pc, #304]	; (80006e8 <BL_UART_Fetch_Host_Command+0x16c>)
 80005b8:	f002 feca 	bl	8003350 <HAL_TIM_Base_Stop_IT>

		Data_Length = BL_Host_Buffer[0];
 80005bc:	4b48      	ldr	r3, [pc, #288]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	717b      	strb	r3, [r7, #5]
		/* Read the command packet received from the HOST */
		HAL_Status = HAL_UART_Receive(BL_HOST_COMMUNICATION_UART, &BL_Host_Buffer[1], Data_Length, 1000);
 80005c2:	797b      	ldrb	r3, [r7, #5]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	4948      	ldr	r1, [pc, #288]	; (80006ec <BL_UART_Fetch_Host_Command+0x170>)
 80005cc:	4845      	ldr	r0, [pc, #276]	; (80006e4 <BL_UART_Fetch_Host_Command+0x168>)
 80005ce:	f003 fb60 	bl	8003c92 <HAL_UART_Receive>
 80005d2:	4603      	mov	r3, r0
 80005d4:	71bb      	strb	r3, [r7, #6]
		// Check for Validation
        if(HAL_Status != HAL_OK)
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <BL_UART_Fetch_Host_Command+0x66>
        {
			Status = BL_NACK;
 80005dc:	2300      	movs	r3, #0
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	e078      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
		}
        else
        {
			switch(BL_Host_Buffer[1])
 80005e2:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	3b10      	subs	r3, #16
 80005e8:	2b11      	cmp	r3, #17
 80005ea:	d86f      	bhi.n	80006cc <BL_UART_Fetch_Host_Command+0x150>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <BL_UART_Fetch_Host_Command+0x78>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	0800063d 	.word	0x0800063d
 80005f8:	08000649 	.word	0x08000649
 80005fc:	08000655 	.word	0x08000655
 8000600:	08000661 	.word	0x08000661
 8000604:	0800066d 	.word	0x0800066d
 8000608:	08000679 	.word	0x08000679
 800060c:	08000685 	.word	0x08000685
 8000610:	08000691 	.word	0x08000691
 8000614:	0800069d 	.word	0x0800069d
 8000618:	080006a9 	.word	0x080006a9
 800061c:	080006cd 	.word	0x080006cd
 8000620:	080006cd 	.word	0x080006cd
 8000624:	080006cd 	.word	0x080006cd
 8000628:	080006cd 	.word	0x080006cd
 800062c:	080006cd 	.word	0x080006cd
 8000630:	080006cd 	.word	0x080006cd
 8000634:	080006b5 	.word	0x080006b5
 8000638:	080006c1 	.word	0x080006c1
            {
				case CBL_GET_VER_CMD:
                    // Read the bootloader Version from the MCU 
					Bootloader_Get_Version(BL_Host_Buffer);
 800063c:	4828      	ldr	r0, [pc, #160]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 800063e:	f000 f917 	bl	8000870 <Bootloader_Get_Version>
					Status = BL_OK;
 8000642:	2301      	movs	r3, #1
 8000644:	71fb      	strb	r3, [r7, #7]
					break;
 8000646:	e045      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_GET_HELP_CMD:
                    // Jump to the Application
					Bootloader_Jump_To_User_App(BL_Host_Buffer);
 8000648:	4825      	ldr	r0, [pc, #148]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 800064a:	f000 f95b 	bl	8000904 <Bootloader_Jump_To_User_App>
					Status = BL_OK;
 800064e:	2301      	movs	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
					break;
 8000652:	e03f      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_GET_CID_CMD:
                    // Read the MCU chip identification number
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 8000654:	4822      	ldr	r0, [pc, #136]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 8000656:	f000 f993 	bl	8000980 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
					break;
 800065e:	e039      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_GET_RDP_STATUS_CMD:
                    // Read the flash read protection level
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 8000660:	481f      	ldr	r0, [pc, #124]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 8000662:	f000 fa71 	bl	8000b48 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 8000666:	2301      	movs	r3, #1
 8000668:	71fb      	strb	r3, [r7, #7]
					break;
 800066a:	e033      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_GO_TO_ADDR_CMD:
                    // Jump bootloader to specified address 
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 800066c:	481c      	ldr	r0, [pc, #112]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 800066e:	f000 f9f9 	bl	8000a64 <Bootloader_Jump_To_Address>
					Status = BL_OK;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
					break;
 8000676:	e02d      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_FLASH_ERASE_CMD:
                    // Mass erase or sector erase of the user flash
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 800067a:	f000 fb19 	bl	8000cb0 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
					break;
 8000682:	e027      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_MEM_WRITE_CMD:
                    // Write data into different memories of the MCU
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000684:	4816      	ldr	r0, [pc, #88]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 8000686:	f000 fbc7 	bl	8000e18 <Bootloader_Memory_Write>
					Status = BL_OK;
 800068a:	2301      	movs	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
					break;
 800068e:	e021      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_ED_W_PROTECT_CMD:
                    // Enable or Disable write protect on different sectors of the user flash
					BL_Print_Message("Enable or Disable write protect on different sectors of the user flash \r\n");
 8000690:	4817      	ldr	r0, [pc, #92]	; (80006f0 <BL_UART_Fetch_Host_Command+0x174>)
 8000692:	f000 f837 	bl	8000704 <BL_Print_Message>
					//********Bootloader_Enable_RW_Protection(BL_Host_Buffer);
					Status = BL_OK;
 8000696:	2301      	movs	r3, #1
 8000698:	71fb      	strb	r3, [r7, #7]
					break;
 800069a:	e01b      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_MEM_READ_CMD:
                    // Read data from different memories of the microcontroller
					BL_Print_Message("Read data from different memories of the microcontroller \r\n");
 800069c:	4815      	ldr	r0, [pc, #84]	; (80006f4 <BL_UART_Fetch_Host_Command+0x178>)
 800069e:	f000 f831 	bl	8000704 <BL_Print_Message>
					//********Bootloader_Memory_Read(BL_Host_Buffer);
					Status = BL_OK;
 80006a2:	2301      	movs	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
					break;
 80006a6:	e015      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_READ_SECTOR_STATUS_CMD:
                    // Read all the sector protection status
					BL_Print_Message("Read all the sector protection status \r\n");
 80006a8:	4813      	ldr	r0, [pc, #76]	; (80006f8 <BL_UART_Fetch_Host_Command+0x17c>)
 80006aa:	f000 f82b 	bl	8000704 <BL_Print_Message>
					//********Bootloader_Get_Sector_Protection_Status(BL_Host_Buffer);
					Status = BL_OK;
 80006ae:	2301      	movs	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
					break;
 80006b2:	e00f      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_OTP_READ_CMD:
                    // Read the OTP contents 
					BL_Print_Message("Read the OTP contents \r\n");
 80006b4:	4811      	ldr	r0, [pc, #68]	; (80006fc <BL_UART_Fetch_Host_Command+0x180>)
 80006b6:	f000 f825 	bl	8000704 <BL_Print_Message>
					//********Bootloader_Read_OTP(BL_Host_Buffer);
					Status = BL_OK;
 80006ba:	2301      	movs	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
					break;
 80006be:	e009      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				case CBL_CHANGE_ROP_Level_CMD:
					Bootloader_Change_Read_Protection_Level(BL_Host_Buffer);
 80006c0:	4807      	ldr	r0, [pc, #28]	; (80006e0 <BL_UART_Fetch_Host_Command+0x164>)
 80006c2:	f000 fc99 	bl	8000ff8 <Bootloader_Change_Read_Protection_Level>
					Status = BL_OK;
 80006c6:	2301      	movs	r3, #1
 80006c8:	71fb      	strb	r3, [r7, #7]
					break;
 80006ca:	e003      	b.n	80006d4 <BL_UART_Fetch_Host_Command+0x158>
				default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <BL_UART_Fetch_Host_Command+0x184>)
 80006ce:	f000 f819 	bl	8000704 <BL_Print_Message>
					break;
 80006d2:	bf00      	nop
			}
        }
    }        
    return Status ;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000084 	.word	0x20000084
 80006e4:	200001a4 	.word	0x200001a4
 80006e8:	2000015c 	.word	0x2000015c
 80006ec:	20000085 	.word	0x20000085
 80006f0:	08004cfc 	.word	0x08004cfc
 80006f4:	08004d48 	.word	0x08004d48
 80006f8:	08004d84 	.word	0x08004d84
 80006fc:	08004db0 	.word	0x08004db0
 8000700:	08004dcc 	.word	0x08004dcc

08000704 <BL_Print_Message>:

 
void BL_Print_Message(char *format, ... )
{
 8000704:	b40f      	push	{r0, r1, r2, r3}
 8000706:	b580      	push	{r7, lr}
 8000708:	b09a      	sub	sp, #104	; 0x68
 800070a:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2260      	movs	r2, #96	; 0x60
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fe5f 	bl	80043dc <memset>
		/* holds the information needed by va_start, va_arg, va_end */
		va_list args;
		/* Enables access to the variable arguments */
		va_start(args, format);
 800071e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000722:	603b      	str	r3, [r7, #0]
		/* Write formatted data from variable argument list to string */
		vsprintf(Messsage, format, args);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fe4c 	bl	80043c8 <vsiprintf>
	#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
		/* Trasmit the formatted data through the defined UART */
		HAL_UART_Transmit(BL_DEBUG_UART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	2264      	movs	r2, #100	; 0x64
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <BL_Print_Message+0x48>)
 800073a:	f003 fa18 	bl	8003b6e <HAL_UART_Transmit>
	#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
		/* Trasmit the formatted data through the defined CAN */
	#endif
		/* Performs cleanup for an ap object initialized by a call to va_start */
		va_end(args);
}
 800073e:	bf00      	nop
 8000740:	3768      	adds	r7, #104	; 0x68
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr
 800074c:	200001e8 	.word	0x200001e8

08000750 <bootloader_jump_to_user_app>:

void bootloader_jump_to_user_app(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
	/* Value of the main stack pointer of our main application */
	//uint32_t MSP_Value = *((volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS);
	
	/* Reset Handler definition function of our main application */
	uint32_t MainAppAddr = *((volatile uint32_t *)(FLASH_SECTOR2_BASE_ADDRESS + 4));
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <bootloader_jump_to_user_app+0x20>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	607b      	str	r3, [r7, #4]
	
	/* Fetch the reset handler address of the user application */
	pMainApp ResetHandler_Address = (pMainApp)MainAppAddr;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	603b      	str	r3, [r7, #0]
	
	/* Set Main Stack Pointer */
	//__set_MSP(MSP_Value);
	
	/* DeInitialize / Disable of modules */
	HAL_RCC_DeInit(); /* DeInitialize the RCC clock configuration to the default reset state. */
 8000760:	f002 fc76 	bl	8003050 <HAL_RCC_DeInit>

	
	/* Jump to Application Reset Handler */
	ResetHandler_Address();
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	4798      	blx	r3
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	08008004 	.word	0x08008004

08000774 <Bootloader_CRC_Verify>:
/*****************************************************************************/
/*                      Static Function Definitions                          */
/*****************************************************************************/

static uint8_t Bootloader_CRC_Verify(uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000780:	2300      	movs	r3, #0
 8000782:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
	/* Calculate CRC32 */
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 8000790:	2300      	movs	r3, #0
 8000792:	75fb      	strb	r3, [r7, #23]
 8000794:	e00f      	b.n	80007b6 <Bootloader_CRC_Verify+0x42>
    {
		Data_Buffer = (uint32_t)pData[Data_Counter];
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	2201      	movs	r2, #1
 80007a6:	4619      	mov	r1, r3
 80007a8:	4810      	ldr	r0, [pc, #64]	; (80007ec <Bootloader_CRC_Verify+0x78>)
 80007aa:	f001 f980 	bl	8001aae <HAL_CRC_Accumulate>
 80007ae:	61b8      	str	r0, [r7, #24]
	for(Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	3301      	adds	r3, #1
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	68ba      	ldr	r2, [r7, #8]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d8eb      	bhi.n	8000796 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
    __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <Bootloader_CRC_Verify+0x78>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <Bootloader_CRC_Verify+0x78>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f042 0201 	orr.w	r2, r2, #1
 80007cc:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC)
 80007ce:	69ba      	ldr	r2, [r7, #24]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d102      	bne.n	80007dc <Bootloader_CRC_Verify+0x68>
    {
		CRC_Status = CRC_VERIFICATION_PASSED;
 80007d6:	2301      	movs	r3, #1
 80007d8:	77fb      	strb	r3, [r7, #31]
 80007da:	e001      	b.n	80007e0 <Bootloader_CRC_Verify+0x6c>
	}
	else
    {
		CRC_Status = CRC_VERIFICATION_FAILED;
 80007dc:	2300      	movs	r3, #0
 80007de:	77fb      	strb	r3, [r7, #31]
	}
	
	return CRC_Status;
 80007e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000014c 	.word	0x2000014c

080007f0 <Bootloader_Send_ACK>:




static void Bootloader_Send_ACK(uint8_t Replay_Len)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Value[2] = {0};
 80007fa:	2300      	movs	r3, #0
 80007fc:	81bb      	strh	r3, [r7, #12]
	Ack_Value[0] = CBL_SEND_ACK;
 80007fe:	23cd      	movs	r3, #205	; 0xcd
 8000800:	733b      	strb	r3, [r7, #12]
	Ack_Value[1] = Replay_Len;
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	737b      	strb	r3, [r7, #13]
    // Send ACK and the reply length to the Host using UART 
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, (uint8_t *)Ack_Value, 2, HAL_MAX_DELAY);
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	2202      	movs	r2, #2
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <Bootloader_Send_ACK+0x30>)
 8000812:	f003 f9ac 	bl	8003b6e <HAL_UART_Transmit>
}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001a4 	.word	0x200001a4

08000824 <Bootloader_Send_NACK>:


static void Bootloader_Send_NACK(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint8_t Ack_Value = CBL_SEND_NACK;
 800082a:	23ab      	movs	r3, #171	; 0xab
 800082c:	71fb      	strb	r3, [r7, #7]
    // Send NACK  to the Host using UART 
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, &Ack_Value, 1, HAL_MAX_DELAY);
 800082e:	1df9      	adds	r1, r7, #7
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	2201      	movs	r2, #1
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <Bootloader_Send_NACK+0x20>)
 8000838:	f003 f999 	bl	8003b6e <HAL_UART_Transmit>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001a4 	.word	0x200001a4

08000848 <Bootloader_Send_Data_To_Host>:

static void Bootloader_Send_Data_To_Host(uint8_t *Host_Buffer, uint32_t Data_Len)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_HOST_COMMUNICATION_UART, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	b29a      	uxth	r2, r3
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <Bootloader_Send_Data_To_Host+0x24>)
 800085e:	f003 f986 	bl	8003b6e <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200001a4 	.word	0x200001a4

08000870 <Bootloader_Get_Version>:

static void Bootloader_Get_Version(uint8_t *Host_Buffer)
{   
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    // Bootloader msg to the Host
	uint8_t BL_Version[4] = { CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION };
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <Bootloader_Get_Version+0x80>)
 800087a:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
	
    #if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
        BL_Print_Message("Read the bootloader version from the MCU \r\n");
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <Bootloader_Get_Version+0x84>)
 8000886:	f7ff ff3d 	bl	8000704 <BL_Print_Message>
    #endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	3301      	adds	r3, #1
 8000892:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000894:	8afb      	ldrh	r3, [r7, #22]
 8000896:	3b04      	subs	r3, #4
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(&Host_Buffer[0] , (Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE) , Host_CRC32))
 80008a0:	8afb      	ldrh	r3, [r7, #22]
 80008a2:	3b04      	subs	r3, #4
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4619      	mov	r1, r3
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff63 	bl	8000774 <Bootloader_CRC_Verify>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d114      	bne.n	80008de <Bootloader_Get_Version+0x6e>
    {
        #if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
                BL_Print_Message("CRC Verification Passed \r\n");
 80008b4:	4810      	ldr	r0, [pc, #64]	; (80008f8 <Bootloader_Get_Version+0x88>)
 80008b6:	f7ff ff25 	bl	8000704 <BL_Print_Message>
        #endif
                Bootloader_Send_ACK(4);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff ff98 	bl	80007f0 <Bootloader_Send_ACK>
                Bootloader_Send_Data_To_Host((uint8_t *)(&BL_Version[0]), 4);              						// (uint8_t *)(&BL_Version[0]) = BL_version
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2104      	movs	r1, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffbe 	bl	8000848 <Bootloader_Send_Data_To_Host>
        #if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
            BL_Print_Message("Bootloader Ver. %d.%d.%d \r\n", BL_Version[1], BL_Version[2], BL_Version[3]);
 80008cc:	7b7b      	ldrb	r3, [r7, #13]
 80008ce:	4619      	mov	r1, r3
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	461a      	mov	r2, r3
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <Bootloader_Get_Version+0x8c>)
 80008d8:	f7ff ff14 	bl	8000704 <BL_Print_Message>
        #if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
            BL_Print_Message("CRC Verification Failed \r\n");
        #endif
		Bootloader_Send_NACK();
	}
}
 80008dc:	e004      	b.n	80008e8 <Bootloader_Get_Version+0x78>
            BL_Print_Message("CRC Verification Failed \r\n");
 80008de:	4808      	ldr	r0, [pc, #32]	; (8000900 <Bootloader_Get_Version+0x90>)
 80008e0:	f7ff ff10 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 80008e4:	f7ff ff9e 	bl	8000824 <Bootloader_Send_NACK>
}
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	00010164 	.word	0x00010164
 80008f4:	08004dfc 	.word	0x08004dfc
 80008f8:	08004e28 	.word	0x08004e28
 80008fc:	08004e44 	.word	0x08004e44
 8000900:	08004e60 	.word	0x08004e60

08000904 <Bootloader_Jump_To_User_App>:


static void Bootloader_Jump_To_User_App(uint8_t *Host_Buffer)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	81fb      	strh	r3, [r7, #14]
    uint32_t Host_CRC32 = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
 8000914:	4816      	ldr	r0, [pc, #88]	; (8000970 <Bootloader_Jump_To_User_App+0x6c>)
 8000916:	f7ff fef5 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	3301      	adds	r3, #1
 8000922:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000924:	89fb      	ldrh	r3, [r7, #14]
 8000926:	3b04      	subs	r3, #4
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4413      	add	r3, r2
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	60bb      	str	r3, [r7, #8]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32))
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	3b04      	subs	r3, #4
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	4619      	mov	r1, r3
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff ff1b 	bl	8000774 <Bootloader_CRC_Verify>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10c      	bne.n	800095e <Bootloader_Jump_To_User_App+0x5a>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <Bootloader_Jump_To_User_App+0x70>)
 8000946:	f7ff fedd 	bl	8000704 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(12);
 800094a:	200c      	movs	r0, #12
 800094c:	f7ff ff50 	bl	80007f0 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs, 12);
 8000950:	210c      	movs	r1, #12
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <Bootloader_Jump_To_User_App+0x74>)
 8000954:	f7ff ff78 	bl	8000848 <Bootloader_Send_Data_To_Host>
		bootloader_jump_to_user_app();
 8000958:	f7ff fefa 	bl	8000750 <bootloader_jump_to_user_app>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 800095c:	e004      	b.n	8000968 <Bootloader_Jump_To_User_App+0x64>
		BL_Print_Message("CRC Verification Failed \r\n");
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <Bootloader_Jump_To_User_App+0x78>)
 8000960:	f7ff fed0 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000964:	f7ff ff5e 	bl	8000824 <Bootloader_Send_NACK>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	08004e7c 	.word	0x08004e7c
 8000974:	08004e28 	.word	0x08004e28
 8000978:	20000000 	.word	0x20000000
 800097c:	08004e60 	.word	0x08004e60

08000980 <Bootloader_Get_Chip_Identification_Number>:



static void Bootloader_Get_Chip_Identification_Number(uint8_t *Host_Buffer)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <Bootloader_Get_Chip_Identification_Number+0x80>)
 8000996:	f7ff feb5 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	3301      	adds	r3, #1
 80009a2:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80009a4:	8afb      	ldrh	r3, [r7, #22]
 80009a6:	3b04      	subs	r3, #4
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , (Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE), Host_CRC32))
 80009b0:	8afb      	ldrh	r3, [r7, #22]
 80009b2:	3b04      	subs	r3, #4
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fedb 	bl	8000774 <Bootloader_CRC_Verify>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d113      	bne.n	80009ec <Bootloader_Get_Chip_Identification_Number+0x6c>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <Bootloader_Get_Chip_Identification_Number+0x84>)
 80009c6:	f7ff fe9d 	bl	8000704 <BL_Print_Message>
#endif
		/* Get the MCU chip identification number */ 
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <Bootloader_Get_Chip_Identification_Number+0x88>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	81fb      	strh	r3, [r7, #14]
		/* Report chip identification number to HOST */
		Bootloader_Send_ACK(2);
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff ff09 	bl	80007f0 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t *)&MCU_Identification_Number, 2);
 80009de:	f107 030e 	add.w	r3, r7, #14
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff2f 	bl	8000848 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 80009ea:	e004      	b.n	80009f6 <Bootloader_Get_Chip_Identification_Number+0x76>
		BL_Print_Message("CRC Verification Failed \r\n");
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <Bootloader_Get_Chip_Identification_Number+0x8c>)
 80009ee:	f7ff fe89 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 80009f2:	f7ff ff17 	bl	8000824 <Bootloader_Send_NACK>
}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08004eb0 	.word	0x08004eb0
 8000a04:	08004e28 	.word	0x08004e28
 8000a08:	e0042000 	.word	0xe0042000
 8000a0c:	08004e60 	.word	0x08004e60

08000a10 <Host_Address_Verification>:




static uint8_t Host_Address_Verification(uint32_t Jump_Address)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM1_BASE) && (Jump_Address <= STM32F401_SRAM1_END))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a22:	d306      	bcc.n	8000a32 <Host_Address_Verification+0x22>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <Host_Address_Verification+0x4c>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d802      	bhi.n	8000a32 <Host_Address_Verification+0x22>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
 8000a30:	e00c      	b.n	8000a4c <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F401_FLASH_END))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a38:	d306      	bcc.n	8000a48 <Host_Address_Verification+0x38>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <Host_Address_Verification+0x50>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d802      	bhi.n	8000a48 <Host_Address_Verification+0x38>
	{
		Address_Verification = ADDRESS_IS_VALID;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73fb      	strb	r3, [r7, #15]
 8000a46:	e001      	b.n	8000a4c <Host_Address_Verification+0x3c>
	}
	else
	{
		Address_Verification = ADDRESS_IS_INVALID;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20010000 	.word	0x20010000
 8000a60:	08040000 	.word	0x08040000

08000a64 <Bootloader_Jump_To_Address>:



static void Bootloader_Jump_To_Address(uint8_t *Host_Buffer)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	83fb      	strh	r3, [r7, #30]
    uint32_t Host_CRC32 = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Jump bootloader to specified address \r\n");
 8000a7c:	4826      	ldr	r0, [pc, #152]	; (8000b18 <Bootloader_Jump_To_Address+0xb4>)
 8000a7e:	f7ff fe41 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	3301      	adds	r3, #1
 8000a8a:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a8c:	8bfb      	ldrh	r3, [r7, #30]
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	4413      	add	r3, r2
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	61bb      	str	r3, [r7, #24]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , (Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE), Host_CRC32))
 8000a98:	8bfb      	ldrh	r3, [r7, #30]
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fe67 	bl	8000774 <Bootloader_CRC_Verify>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d12b      	bne.n	8000b04 <Bootloader_Jump_To_Address+0xa0>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000aac:	481b      	ldr	r0, [pc, #108]	; (8000b1c <Bootloader_Jump_To_Address+0xb8>)
 8000aae:	f7ff fe29 	bl	8000704 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fe9c 	bl	80007f0 <Bootloader_Send_ACK>
		/* Extract the address form the HOST packet */
		HOST_Jump_Address = *((uint32_t *)&Host_Buffer[2]);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000abe:	617b      	str	r3, [r7, #20]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);
 8000ac0:	6978      	ldr	r0, [r7, #20]
 8000ac2:	f7ff ffa5 	bl	8000a10 <Host_Address_Verification>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d112      	bne.n	8000af6 <Bootloader_Jump_To_Address+0x92>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Address verification succeeded \r\n");
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <Bootloader_Jump_To_Address+0xbc>)
 8000ad2:	f7ff fe17 	bl	8000704 <BL_Print_Message>
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host(&Address_Verification, 1);
 8000ad6:	f107 030f 	add.w	r3, r7, #15
 8000ada:	2101      	movs	r1, #1
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff feb3 	bl	8000848 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Jump to : 0x%X \r\n", Jump_Address);
 8000ae8:	6939      	ldr	r1, [r7, #16]
 8000aea:	480e      	ldr	r0, [pc, #56]	; (8000b24 <Bootloader_Jump_To_Address+0xc0>)
 8000aec:	f7ff fe0a 	bl	8000704 <BL_Print_Message>
#endif
			Jump_Address();
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}	
}
 8000af4:	e00b      	b.n	8000b0e <Bootloader_Jump_To_Address+0xaa>
			Bootloader_Send_Data_To_Host(&Address_Verification, 1);
 8000af6:	f107 030f 	add.w	r3, r7, #15
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fea3 	bl	8000848 <Bootloader_Send_Data_To_Host>
}
 8000b02:	e004      	b.n	8000b0e <Bootloader_Jump_To_Address+0xaa>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <Bootloader_Jump_To_Address+0xc4>)
 8000b06:	f7ff fdfd 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000b0a:	f7ff fe8b 	bl	8000824 <Bootloader_Send_NACK>
}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	08004edc 	.word	0x08004edc
 8000b1c:	08004e28 	.word	0x08004e28
 8000b20:	08004f04 	.word	0x08004f04
 8000b24:	08004f28 	.word	0x08004f28
 8000b28:	08004e60 	.word	0x08004e60

08000b2c <CBL_STM32F401_Get_RDP_Level>:

static uint8_t CBL_STM32F401_Get_RDP_Level()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fac9 	bl	80020cc <HAL_FLASHEx_OBGetConfig>
	
	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	b2db      	uxtb	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
 8000b5c:	4818      	ldr	r0, [pc, #96]	; (8000bc0 <Bootloader_Read_Protection_Level+0x78>)
 8000b5e:	f7ff fdd1 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 8000b6c:	8afb      	ldrh	r3, [r7, #22]
 8000b6e:	3b04      	subs	r3, #4
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE , Host_CRC32))
 8000b78:	8afb      	ldrh	r3, [r7, #22]
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fdf7 	bl	8000774 <Bootloader_CRC_Verify>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d110      	bne.n	8000bae <Bootloader_Read_Protection_Level+0x66>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <Bootloader_Read_Protection_Level+0x7c>)
 8000b8e:	f7ff fdb9 	bl	8000704 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fe2c 	bl	80007f0 <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F401_Get_RDP_Level();
 8000b98:	f7ff ffc8 	bl	8000b2c <CBL_STM32F401_Get_RDP_Level>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host(&RDP_Level, 1);
 8000ba0:	f107 030f 	add.w	r3, r7, #15
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe4e 	bl	8000848 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000bac:	e004      	b.n	8000bb8 <Bootloader_Read_Protection_Level+0x70>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <Bootloader_Read_Protection_Level+0x80>)
 8000bb0:	f7ff fda8 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000bb4:	f7ff fe36 	bl	8000824 <Bootloader_Send_NACK>
}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08004f3c 	.word	0x08004f3c
 8000bc4:	08004e28 	.word	0x08004e28
 8000bc8:	08004e60 	.word	0x08004e60

08000bcc <Perform_Flash_Erase>:




static uint8_t Perform_Flash_Erase(uint8_t Sector_Numebr, uint8_t Number_Of_Sectors)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
	uint8_t Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	FLASH_EraseInitTypeDef pEraseInit;
	uint8_t Remaining_Sectors = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint32_t SectorError = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
	
	if(Number_Of_Sectors > CBL_FLASH_MAX_SECTOR_NUMBER)
 8000bf2:	79bb      	ldrb	r3, [r7, #6]
 8000bf4:	2b06      	cmp	r3, #6
 8000bf6:	d903      	bls.n	8000c00 <Perform_Flash_Erase+0x34>
	{
		/* Number Of sectors is out of range */
		Sector_Validity_Status = INVALID_SECTOR_NUMBER;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bfe:	e04c      	b.n	8000c9a <Perform_Flash_Erase+0xce>
	}
	else
	{
		if((Sector_Numebr <= (CBL_FLASH_MAX_SECTOR_NUMBER - 1)) || (CBL_FLASH_MASS_ERASE == Sector_Numebr))
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d902      	bls.n	8000c0c <Perform_Flash_Erase+0x40>
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d143      	bne.n	8000c94 <Perform_Flash_Erase+0xc8>
		{
			/* Check if user needs Mass erase */
			if(CBL_FLASH_MASS_ERASE == Sector_Numebr)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2bff      	cmp	r3, #255	; 0xff
 8000c10:	d105      	bne.n	8000c1e <Perform_Flash_Erase+0x52>
			{
				pEraseInit.TypeErase = FLASH_TYPEERASE_MASSERASE; /* Flash Mass erase activation */
 8000c12:	2301      	movs	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Flash Mass erase activation \r\n");
 8000c16:	4824      	ldr	r0, [pc, #144]	; (8000ca8 <Perform_Flash_Erase+0xdc>)
 8000c18:	f7ff fd74 	bl	8000704 <BL_Print_Message>
 8000c1c:	e015      	b.n	8000c4a <Perform_Flash_Erase+0x7e>
			}
			else
			{
				/* User needs Sector erase */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("User needs Sector erase \r\n");
 8000c1e:	4823      	ldr	r0, [pc, #140]	; (8000cac <Perform_Flash_Erase+0xe0>)
 8000c20:	f7ff fd70 	bl	8000704 <BL_Print_Message>
#endif
				Remaining_Sectors = CBL_FLASH_MAX_SECTOR_NUMBER - Sector_Numebr;
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f1c3 0306 	rsb	r3, r3, #6
 8000c2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(Number_Of_Sectors > Remaining_Sectors)
 8000c2e:	79ba      	ldrb	r2, [r7, #6]
 8000c30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d902      	bls.n	8000c3e <Perform_Flash_Erase+0x72>
				{
					Number_Of_Sectors = Remaining_Sectors;
 8000c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c3c:	71bb      	strb	r3, [r7, #6]
				}
				else { /* Nothing */ }
				
				pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS; /* Sectors erase only */
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
				pEraseInit.Sector = Sector_Numebr;        /* Initial FLASH sector to erase when Mass erase is disabled */
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	61bb      	str	r3, [r7, #24]
				pEraseInit.NbSectors = Number_Of_Sectors; /* Number of sectors to be erased. */
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	61fb      	str	r3, [r7, #28]
			}
			
			pEraseInit.Banks = FLASH_BANK_1; /* Bank 1  */
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
			pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; /* Device operating range: 2.7V to 3.6V */
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
			
			/* Unlock the FLASH control register access */
			HAL_Status = HAL_FLASH_Unlock();
 8000c52:	f000 ffab 	bl	8001bac <HAL_FLASH_Unlock>
 8000c56:	4603      	mov	r3, r0
 8000c58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/* Perform a mass erase or erase the specified FLASH memory sectors */
			HAL_Status = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000c5c:	f107 020c 	add.w	r2, r7, #12
 8000c60:	f107 0310 	add.w	r3, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 f952 	bl	8001f10 <HAL_FLASHEx_Erase>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			if(HAL_SUCCESSFUL_ERASE == SectorError)
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c78:	d103      	bne.n	8000c82 <Perform_Flash_Erase+0xb6>
			{
				Sector_Validity_Status = SUCCESSFUL_ERASE;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c80:	e002      	b.n	8000c88 <Perform_Flash_Erase+0xbc>
			}
			else
			{
				Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			/* Locks the FLASH control register access */
			HAL_Status = HAL_FLASH_Lock();
 8000c88:	f000 ffb2 	bl	8001bf0 <HAL_FLASH_Lock>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000c92:	e002      	b.n	8000c9a <Perform_Flash_Erase+0xce>
		}
		else
		{
			Sector_Validity_Status = UNSUCCESSFUL_ERASE;
 8000c94:	2302      	movs	r3, #2
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
	}
	return Sector_Validity_Status;
 8000c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08004f68 	.word	0x08004f68
 8000cac:	08004f88 	.word	0x08004f88

08000cb0 <Bootloader_Erase_Flash>:


static void Bootloader_Erase_Flash(uint8_t *Host_Buffer)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Mass erase or sector erase of the user flash \r\n");
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <Bootloader_Erase_Flash+0xa8>)
 8000cc6:	f7ff fd1d 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));		
 8000cd4:	8afb      	ldrh	r3, [r7, #22]
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	613b      	str	r3, [r7, #16]
	/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32))
 8000ce0:	8afb      	ldrh	r3, [r7, #22]
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff fd43 	bl	8000774 <Bootloader_CRC_Verify>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d128      	bne.n	8000d46 <Bootloader_Erase_Flash+0x96>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000cf4:	4819      	ldr	r0, [pc, #100]	; (8000d5c <Bootloader_Erase_Flash+0xac>)
 8000cf6:	f7ff fd05 	bl	8000704 <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fd78 	bl	80007f0 <Bootloader_Send_ACK>
		/* Perform Mass erase or sector erase of the user flash */
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3302      	adds	r3, #2
 8000d04:	781a      	ldrb	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3303      	adds	r3, #3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4610      	mov	r0, r2
 8000d10:	f7ff ff5c 	bl	8000bcc <Perform_Flash_Erase>
 8000d14:	4603      	mov	r3, r0
 8000d16:	73fb      	strb	r3, [r7, #15]
		if(SUCCESSFUL_ERASE == Erase_Status)
 8000d18:	7bfb      	ldrb	r3, [r7, #15]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	d109      	bne.n	8000d32 <Bootloader_Erase_Flash+0x82>
		{
			/* Report erase Passed */
			Bootloader_Send_Data_To_Host(&Erase_Status, 1);
 8000d1e:	f107 030f 	add.w	r3, r7, #15
 8000d22:	2101      	movs	r1, #1
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fd8f 	bl	8000848 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Successful Erase \r\n");
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <Bootloader_Erase_Flash+0xb0>)
 8000d2c:	f7ff fcea 	bl	8000704 <BL_Print_Message>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}
}
 8000d30:	e00e      	b.n	8000d50 <Bootloader_Erase_Flash+0xa0>
			Bootloader_Send_Data_To_Host(&Erase_Status, 1);
 8000d32:	f107 030f 	add.w	r3, r7, #15
 8000d36:	2101      	movs	r1, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fd85 	bl	8000848 <Bootloader_Send_Data_To_Host>
			BL_Print_Message("Erase request failed !!\r\n");
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <Bootloader_Erase_Flash+0xb4>)
 8000d40:	f7ff fce0 	bl	8000704 <BL_Print_Message>
}
 8000d44:	e004      	b.n	8000d50 <Bootloader_Erase_Flash+0xa0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <Bootloader_Erase_Flash+0xb8>)
 8000d48:	f7ff fcdc 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000d4c:	f7ff fd6a 	bl	8000824 <Bootloader_Send_NACK>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	08004fa4 	.word	0x08004fa4
 8000d5c:	08004e28 	.word	0x08004e28
 8000d60:	08004fd4 	.word	0x08004fd4
 8000d64:	08004fe8 	.word	0x08004fe8
 8000d68:	08004e60 	.word	0x08004e60

08000d6c <Flash_Memory_Write_Payload>:



static uint8_t Flash_Memory_Write_Payload(uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len)
{
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	4613      	mov	r3, r2
 8000d78:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75bb      	strb	r3, [r7, #22]
	uint16_t Payload_Counter = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	82bb      	strh	r3, [r7, #20]
	
	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000d86:	f000 ff11 	bl	8001bac <HAL_FLASH_Unlock>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]
	
	if(HAL_Status != HAL_OK)
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <Flash_Memory_Write_Payload+0x2e>
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d94:	2300      	movs	r3, #0
 8000d96:	75bb      	strb	r3, [r7, #22]
 8000d98:	e023      	b.n	8000de2 <Flash_Memory_Write_Payload+0x76>
	}
	else
	{
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	82bb      	strh	r3, [r7, #20]
 8000d9e:	e01c      	b.n	8000dda <Flash_Memory_Write_Payload+0x6e>
		{
			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Payload_Start_Address + Payload_Counter, Host_Payload[Payload_Counter]);
 8000da0:	8aba      	ldrh	r2, [r7, #20]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	18d1      	adds	r1, r2, r3
 8000da6:	8abb      	ldrh	r3, [r7, #20]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	461c      	mov	r4, r3
 8000db4:	4615      	mov	r5, r2
 8000db6:	4622      	mov	r2, r4
 8000db8:	462b      	mov	r3, r5
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fea2 	bl	8001b04 <HAL_FLASH_Program>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	75fb      	strb	r3, [r7, #23]
			if(HAL_Status != HAL_OK)
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <Flash_Memory_Write_Payload+0x64>
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75bb      	strb	r3, [r7, #22]
				break;
 8000dce:	e008      	b.n	8000de2 <Flash_Memory_Write_Payload+0x76>
			}
			else
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	75bb      	strb	r3, [r7, #22]
		for(Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter++)
 8000dd4:	8abb      	ldrh	r3, [r7, #20]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	82bb      	strh	r3, [r7, #20]
 8000dda:	8aba      	ldrh	r2, [r7, #20]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3de      	bcc.n	8000da0 <Flash_Memory_Write_Payload+0x34>
			}
		}
	}
	
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status))
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10f      	bne.n	8000e08 <Flash_Memory_Write_Payload+0x9c>
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <Flash_Memory_Write_Payload+0x9c>
	{
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000dee:	f000 feff 	bl	8001bf0 <HAL_FLASH_Lock>
 8000df2:	4603      	mov	r3, r0
 8000df4:	75fb      	strb	r3, [r7, #23]
		if(HAL_Status != HAL_OK)
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <Flash_Memory_Write_Payload+0x96>
		{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK)
 8000e00:	e004      	b.n	8000e0c <Flash_Memory_Write_Payload+0xa0>
		}
		else
		{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75bb      	strb	r3, [r7, #22]
		if(HAL_Status != HAL_OK)
 8000e06:	e001      	b.n	8000e0c <Flash_Memory_Write_Payload+0xa0>
		}
	}
	else
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75bb      	strb	r3, [r7, #22]
	}
	
	return Flash_Payload_Write_Status;
 8000e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e18 <Bootloader_Memory_Write>:



static void Bootloader_Memory_Write(uint8_t *Host_Buffer)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	613b      	str	r3, [r7, #16]
	uint32_t HOST_Address = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	72fb      	strb	r3, [r7, #11]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000e30:	2300      	movs	r3, #0
 8000e32:	72bb      	strb	r3, [r7, #10]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e34:	2300      	movs	r3, #0
 8000e36:	727b      	strb	r3, [r7, #9]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
 8000e38:	4831      	ldr	r0, [pc, #196]	; (8000f00 <Bootloader_Memory_Write+0xe8>)
 8000e3a:	f7ff fc63 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 8000e48:	8afb      	ldrh	r3, [r7, #22]
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE , Host_CRC32))
 8000e54:	8afb      	ldrh	r3, [r7, #22]
 8000e56:	3b04      	subs	r3, #4
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff fc89 	bl	8000774 <Bootloader_CRC_Verify>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d142      	bne.n	8000eee <Bootloader_Memory_Write+0xd6>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8000e68:	4826      	ldr	r0, [pc, #152]	; (8000f04 <Bootloader_Memory_Write+0xec>)
 8000e6a:	f7ff fc4b 	bl	8000704 <BL_Print_Message>
#endif
		/* Send acknowledgement to the HOST */
		Bootloader_Send_ACK(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fcbe 	bl	80007f0 <Bootloader_Send_ACK>
		/* Extract the start address from the Host packet */
		HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e7a:	60fb      	str	r3, [r7, #12]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("HOST_Address = 0x%X \r\n", HOST_Address);
 8000e7c:	68f9      	ldr	r1, [r7, #12]
 8000e7e:	4822      	ldr	r0, [pc, #136]	; (8000f08 <Bootloader_Memory_Write+0xf0>)
 8000e80:	f7ff fc40 	bl	8000704 <BL_Print_Message>
#endif
		/* Extract the payload length from the Host packet */
		Payload_Len = Host_Buffer[6];
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	799b      	ldrb	r3, [r3, #6]
 8000e88:	72fb      	strb	r3, [r7, #11]
		/* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff fdc0 	bl	8000a10 <Host_Address_Verification>
 8000e90:	4603      	mov	r3, r0
 8000e92:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000e94:	7abb      	ldrb	r3, [r7, #10]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d120      	bne.n	8000edc <Bootloader_Memory_Write+0xc4>
		{
			/* Write the payload to the Flash memory */
			Flash_Payload_Write_Status = Flash_Memory_Write_Payload(&Host_Buffer[7], HOST_Address, Payload_Len);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	7afa      	ldrb	r2, [r7, #11]
 8000ea0:	b292      	uxth	r2, r2
 8000ea2:	68f9      	ldr	r1, [r7, #12]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff61 	bl	8000d6c <Flash_Memory_Write_Payload>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	727b      	strb	r3, [r7, #9]
			if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 8000eae:	7a7b      	ldrb	r3, [r7, #9]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d109      	bne.n	8000ec8 <Bootloader_Memory_Write+0xb0>
			{
				/* Report payload write passed */
				Bootloader_Send_Data_To_Host(&Flash_Payload_Write_Status, 1);
 8000eb4:	f107 0309 	add.w	r3, r7, #9
 8000eb8:	2101      	movs	r1, #1
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fcc4 	bl	8000848 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
				BL_Print_Message("Payload Valid \r\n");
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <Bootloader_Memory_Write+0xf4>)
 8000ec2:	f7ff fc1f 	bl	8000704 <BL_Print_Message>
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
	}	
}
 8000ec6:	e017      	b.n	8000ef8 <Bootloader_Memory_Write+0xe0>
				BL_Print_Message("Payload InValid \r\n");
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <Bootloader_Memory_Write+0xf8>)
 8000eca:	f7ff fc1b 	bl	8000704 <BL_Print_Message>
				Bootloader_Send_Data_To_Host(&Flash_Payload_Write_Status, 1);
 8000ece:	f107 0309 	add.w	r3, r7, #9
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fcb7 	bl	8000848 <Bootloader_Send_Data_To_Host>
}
 8000eda:	e00d      	b.n	8000ef8 <Bootloader_Memory_Write+0xe0>
			Address_Verification = ADDRESS_IS_INVALID;
 8000edc:	2300      	movs	r3, #0
 8000ede:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host(&Address_Verification, 1);
 8000ee0:	f107 030a 	add.w	r3, r7, #10
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fcae 	bl	8000848 <Bootloader_Send_Data_To_Host>
}
 8000eec:	e004      	b.n	8000ef8 <Bootloader_Memory_Write+0xe0>
		BL_Print_Message("CRC Verification Failed \r\n");
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <Bootloader_Memory_Write+0xfc>)
 8000ef0:	f7ff fc08 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 8000ef4:	f7ff fc96 	bl	8000824 <Bootloader_Send_NACK>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	08005004 	.word	0x08005004
 8000f04:	08004e28 	.word	0x08004e28
 8000f08:	08005038 	.word	0x08005038
 8000f0c:	08005050 	.word	0x08005050
 8000f10:	08005064 	.word	0x08005064
 8000f14:	08004e60 	.word	0x08004e60

08000f18 <Change_ROP_Level>:

static uint8_t Change_ROP_Level(uint32_t ROP_Level)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	FLASH_OBProgramInitTypeDef FLASH_OBProgramInit;
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	
	/* Unlock the FLASH Option Control Registers access */
	HAL_Status = HAL_FLASH_OB_Unlock();
 8000f2c:	f000 fe70 	bl	8001c10 <HAL_FLASH_OB_Unlock>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if(HAL_Status != HAL_OK)
 8000f36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <Change_ROP_Level+0x34>
	{
		ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Failed -> Unlock the FLASH Option Control Registers access \r\n");
 8000f44:	4827      	ldr	r0, [pc, #156]	; (8000fe4 <Change_ROP_Level+0xcc>)
 8000f46:	f7ff fbdd 	bl	8000704 <BL_Print_Message>
 8000f4a:	e044      	b.n	8000fd6 <Change_ROP_Level+0xbe>
#endif
	}
	else
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("Passed -> Unlock the FLASH Option Control Registers access \r\n");
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <Change_ROP_Level+0xd0>)
 8000f4e:	f7ff fbd9 	bl	8000704 <BL_Print_Message>
#endif
		FLASH_OBProgramInit.OptionType = OPTIONBYTE_RDP; /* RDP option byte configuration */
 8000f52:	2302      	movs	r3, #2
 8000f54:	60bb      	str	r3, [r7, #8]
		FLASH_OBProgramInit.Banks = FLASH_BANK_1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
		FLASH_OBProgramInit.RDPLevel = ROP_Level;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	61bb      	str	r3, [r7, #24]
		/* Program option bytes */
		HAL_Status = HAL_FLASHEx_OBProgram(&FLASH_OBProgramInit);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 f844 	bl	8001ff0 <HAL_FLASHEx_OBProgram>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(HAL_Status != HAL_OK)
 8000f6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <Change_ROP_Level+0x76>
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Failed -> Program option bytes \r\n");
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <Change_ROP_Level+0xd4>)
 8000f78:	f7ff fbc4 	bl	8000704 <BL_Print_Message>
#endif
			HAL_Status = HAL_FLASH_OB_Lock();
 8000f7c:	f000 fe64 	bl	8001c48 <HAL_FLASH_OB_Lock>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f8c:	e023      	b.n	8000fd6 <Change_ROP_Level+0xbe>
		}
		else
		{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Passed -> Program option bytes \r\n");
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <Change_ROP_Level+0xd8>)
 8000f90:	f7ff fbb8 	bl	8000704 <BL_Print_Message>
#endif
			/* Launch the option byte loading */
			HAL_Status = HAL_FLASH_OB_Launch();
 8000f94:	f000 fe68 	bl	8001c68 <HAL_FLASH_OB_Launch>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(HAL_Status != HAL_OK)
 8000f9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <Change_ROP_Level+0x96>
			{
				ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fac:	e013      	b.n	8000fd6 <Change_ROP_Level+0xbe>
			}
			else
			{
				/* Lock the FLASH Option Control Registers access */
				HAL_Status = HAL_FLASH_OB_Lock();
 8000fae:	f000 fe4b 	bl	8001c48 <HAL_FLASH_OB_Lock>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if(HAL_Status != HAL_OK)
 8000fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <Change_ROP_Level+0xb0>
				{
					ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fc6:	e006      	b.n	8000fd6 <Change_ROP_Level+0xbe>
				}
				else
				{
					ROP_Level_Status = ROP_LEVEL_CHANGE_VALID;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
					BL_Print_Message("Passed -> Program ROP to Level : 0x%X \r\n", ROP_Level);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <Change_ROP_Level+0xdc>)
 8000fd2:	f7ff fb97 	bl	8000704 <BL_Print_Message>
#endif
				}
			}
		}
	}
	return ROP_Level_Status;
 8000fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	08005078 	.word	0x08005078
 8000fe8:	080050b8 	.word	0x080050b8
 8000fec:	080050f8 	.word	0x080050f8
 8000ff0:	0800511c 	.word	0x0800511c
 8000ff4:	08005140 	.word	0x08005140

08000ff8 <Bootloader_Change_Read_Protection_Level>:

static void Bootloader_Change_Read_Protection_Level(uint8_t *Host_Buffer)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	82bb      	strh	r3, [r7, #20]
    uint32_t Host_CRC32 = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
	uint8_t ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 8001008:	2300      	movs	r3, #0
 800100a:	73fb      	strb	r3, [r7, #15]
	uint8_t Host_ROP_Level = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	75fb      	strb	r3, [r7, #23]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Change read protection level of the user flash \r\n");
 8001010:	4825      	ldr	r0, [pc, #148]	; (80010a8 <Bootloader_Change_Read_Protection_Level+0xb0>)
 8001012:	f7ff fb77 	bl	8000704 <BL_Print_Message>
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	3301      	adds	r3, #1
 800101e:	82bb      	strh	r3, [r7, #20]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 8001020:	8abb      	ldrh	r3, [r7, #20]
 8001022:	3b04      	subs	r3, #4
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Bootloader_CRC_Verify(Host_Buffer , Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32))
 800102c:	8abb      	ldrh	r3, [r7, #20]
 800102e:	3b04      	subs	r3, #4
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fb9d 	bl	8000774 <Bootloader_CRC_Verify>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d129      	bne.n	8001094 <Bootloader_Change_Read_Protection_Level+0x9c>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
 8001040:	481a      	ldr	r0, [pc, #104]	; (80010ac <Bootloader_Change_Read_Protection_Level+0xb4>)
 8001042:	f7ff fb5f 	bl	8000704 <BL_Print_Message>
#endif
		Bootloader_Send_ACK(1);
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fbd2 	bl	80007f0 <Bootloader_Send_ACK>
		/* Request change the Read Out Protection Level */
		Host_ROP_Level = Host_Buffer[2];
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	75fb      	strb	r3, [r7, #23]
		/* Warning: When enabling read protection level 2, it s no more possible to go back to level 1 or 0 */
		if((CBL_ROP_LEVEL_2 == Host_ROP_Level) || (OB_RDP_LEVEL_2 == Host_ROP_Level))
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d002      	beq.n	800105e <Bootloader_Change_Read_Protection_Level+0x66>
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2bcc      	cmp	r3, #204	; 0xcc
 800105c:	d102      	bne.n	8001064 <Bootloader_Change_Read_Protection_Level+0x6c>
		{
			ROP_Level_Status = ROP_LEVEL_CHANGE_INVALID;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
 8001062:	e010      	b.n	8001086 <Bootloader_Change_Read_Protection_Level+0x8e>
		}
		else
		{
			if(CBL_ROP_LEVEL_0 == Host_ROP_Level)
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <Bootloader_Change_Read_Protection_Level+0x78>
			{ 
				Host_ROP_Level = 0xAA; 
 800106a:	23aa      	movs	r3, #170	; 0xaa
 800106c:	75fb      	strb	r3, [r7, #23]
 800106e:	e004      	b.n	800107a <Bootloader_Change_Read_Protection_Level+0x82>
			}
			else if(CBL_ROP_LEVEL_1 == Host_ROP_Level)
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <Bootloader_Change_Read_Protection_Level+0x82>
			{ 
				Host_ROP_Level = 0x55; 
 8001076:	2355      	movs	r3, #85	; 0x55
 8001078:	75fb      	strb	r3, [r7, #23]
			}
			ROP_Level_Status = Change_ROP_Level(Host_ROP_Level);
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff4b 	bl	8000f18 <Change_ROP_Level>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
		}
		Bootloader_Send_Data_To_Host(&ROP_Level_Status, 1);
 8001086:	f107 030f 	add.w	r3, r7, #15
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fbdb 	bl	8000848 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8001092:	e004      	b.n	800109e <Bootloader_Change_Read_Protection_Level+0xa6>
		BL_Print_Message("CRC Verification Failed \r\n");
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <Bootloader_Change_Read_Protection_Level+0xb8>)
 8001096:	f7ff fb35 	bl	8000704 <BL_Print_Message>
		Bootloader_Send_NACK();
 800109a:	f7ff fbc3 	bl	8000824 <Bootloader_Send_NACK>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	0800516c 	.word	0x0800516c
 80010ac:	08004e28 	.word	0x08004e28
 80010b0:	08004e60 	.word	0x08004e60

080010b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_CRC_Init+0x20>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <MX_CRC_Init+0x24>)
 80010bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_CRC_Init+0x20>)
 80010c0:	f000 fcd9 	bl	8001a76 <HAL_CRC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010ca:	f000 f937 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000014c 	.word	0x2000014c
 80010d8:	40023000 	.word	0x40023000

080010dc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_CRC_MspInit+0x3c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10d      	bne.n	800110a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_CRC_MspInit+0x40>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_CRC_MspInit+0x40>)
 80010f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_CRC_MspInit+0x40>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023000 	.word	0x40023000
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_GPIO_Init+0x5c>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <MX_GPIO_Init+0x5c>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6313      	str	r3, [r2, #48]	; 0x30
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_GPIO_Init+0x5c>)
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	480a      	ldr	r0, [pc, #40]	; (8001180 <MX_GPIO_Init+0x60>)
 8001156:	f001 fb09 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800115a:	2302      	movs	r3, #2
 800115c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0x60>)
 8001170:	f001 f978 	bl	8002464 <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 faf1 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f845 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f7ff ffc5 	bl	8001120 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001196:	f000 f9f1 	bl	800157c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800119a:	f000 fa19 	bl	80015d0 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800119e:	f7ff ff89 	bl	80010b4 <MX_CRC_Init>
  MX_TIM3_Init();
 80011a2:	f000 f975 	bl	8001490 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BL_Status Status = BL_NACK ;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71bb      	strb	r3, [r7, #6]
  HAL_TIM_Base_Start_IT(&htim3);
 80011aa:	4817      	ldr	r0, [pc, #92]	; (8001208 <main+0x84>)
 80011ac:	f002 f86e 	bl	800328c <HAL_TIM_Base_Start_IT>
  uint8_t Receive_Flag = Receive_NOK ;
 80011b0:	2300      	movs	r3, #0
 80011b2:	71fb      	strb	r3, [r7, #7]
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <main+0x88>)
 80011ba:	f001 fad7 	bl	800276c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
    BL_Print_Message("Bootloader Started \r\n");
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <main+0x8c>)
 80011c0:	f7ff faa0 	bl	8000704 <BL_Print_Message>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Check if the Host Sending any Command */
	  Status = BL_UART_Fetch_Host_Command();
 80011c4:	f7ff f9da 	bl	800057c <BL_UART_Fetch_Host_Command>
 80011c8:	4603      	mov	r3, r0
 80011ca:	71bb      	strb	r3, [r7, #6]

	  /* Stop Timer in Case of any Updates*/
	  if(BL_OK == Status && Receive_Flag == Receive_NOK)
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10a      	bne.n	80011e8 <main+0x64>
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <main+0x64>
	  {
		  HAL_TIM_Base_Start_IT(&htim3);
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <main+0x84>)
 80011da:	f002 f857 	bl	800328c <HAL_TIM_Base_Start_IT>
		  Receive_Flag = Receive_OK ;
 80011de:	2301      	movs	r3, #1
 80011e0:	71fb      	strb	r3, [r7, #7]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
          BL_Print_Message(" Disable Timer 3 \r\n");
 80011e2:	480c      	ldr	r0, [pc, #48]	; (8001214 <main+0x90>)
 80011e4:	f7ff fa8e 	bl	8000704 <BL_Print_Message>
#endif

	  }
	  if(Time_flag == 1 )
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <main+0x94>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d1e8      	bne.n	80011c4 <main+0x40>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2102      	movs	r1, #2
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <main+0x88>)
 80011f8:	f001 fab8 	bl	800276c <HAL_GPIO_WritePin>

		  /* Disable Timer 3 */
		  HAL_TIM_Base_Stop_IT(&htim3);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <main+0x84>)
 80011fe:	f002 f8a7 	bl	8003350 <HAL_TIM_Base_Stop_IT>
		  bootloader_jump_to_user_app();
 8001202:	f7ff faa5 	bl	8000750 <bootloader_jump_to_user_app>
	  Status = BL_UART_Fetch_Host_Command();
 8001206:	e7dd      	b.n	80011c4 <main+0x40>
 8001208:	2000015c 	.word	0x2000015c
 800120c:	40020000 	.word	0x40020000
 8001210:	080051a0 	.word	0x080051a0
 8001214:	080051b8 	.word	0x080051b8
 8001218:	20000154 	.word	0x20000154

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	; 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f8d6 	bl	80043dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <SystemClock_Config+0xcc>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <SystemClock_Config+0xcc>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <SystemClock_Config+0xd0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001268:	4a20      	ldr	r2, [pc, #128]	; (80012ec <SystemClock_Config+0xd0>)
 800126a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <SystemClock_Config+0xd0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001294:	2354      	movs	r3, #84	; 0x54
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129c:	2304      	movs	r3, #4
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fa7b 	bl	80027a0 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012b0:	f000 f844 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	2102      	movs	r1, #2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fcdd 	bl	8002c90 <HAL_RCC_ClockConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012dc:	f000 f82e 	bl	800133c <Error_Handler>
  }
}
 80012e0:	bf00      	nop
 80012e2:	3750      	adds	r7, #80	; 0x50
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	static uint16_t Local_Counter = 0 ;
	if(30000 <= Local_Counter)
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8001300:	4293      	cmp	r3, r2
 8001302:	d909      	bls.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
        BL_Print_Message("Jumping to Application \r\n");
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001306:	f7ff f9fd 	bl	8000704 <BL_Print_Message>
#endif

        Time_flag = 1 ;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]

        /* Disable Timer 3 */
		HAL_TIM_Base_Stop_IT(&htim3);
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001312:	f002 f81d 	bl	8003350 <HAL_TIM_Base_Stop_IT>
	else
	{
	/* Increment the Counter Every time interrupt occure*/
	Local_Counter++;
	}
}
 8001316:	e005      	b.n	8001324 <HAL_TIM_PeriodElapsedCallback+0x34>
	Local_Counter++;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b29a      	uxth	r2, r3
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001322:	801a      	strh	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000156 	.word	0x20000156
 8001330:	080051cc 	.word	0x080051cc
 8001334:	20000154 	.word	0x20000154
 8001338:	2000015c 	.word	0x2000015c

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_MspInit+0x4c>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_MspInit+0x4c>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x4c>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 fa16 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <TIM3_IRQHandler+0x10>)
 80013f2:	f001 ffdc 	bl	80033ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2000015c 	.word	0x2000015c

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f002 ffdc 	bl	80043ec <__errno>
 8001434:	4603      	mov	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <_sbrk+0x64>)
 8001450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20010000 	.word	0x20010000
 8001460:	00000400 	.word	0x00000400
 8001464:	20000158 	.word	0x20000158
 8001468:	20000398 	.word	0x20000398

0800146c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <MX_TIM3_Init+0x98>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_TIM3_Init+0x94>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42000;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_TIM3_Init+0x94>)
 80014c0:	f24a 4210 	movw	r2, #42000	; 0xa410
 80014c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_TIM3_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_TIM3_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014d2:	4814      	ldr	r0, [pc, #80]	; (8001524 <MX_TIM3_Init+0x94>)
 80014d4:	f001 fe8a 	bl	80031ec <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014de:	f7ff ff2d 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_TIM3_Init+0x94>)
 80014f0:	f002 f865 	bl	80035be <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f7ff ff1f 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <MX_TIM3_Init+0x94>)
 800150c:	f002 fa60 	bl	80039d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001516:	f7ff ff11 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000015c 	.word	0x2000015c
 8001528:	40000400 	.word	0x40000400

0800152c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_TIM_Base_MspInit+0x48>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d115      	bne.n	800156a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_TIM_Base_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_TIM_Base_MspInit+0x4c>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_TIM_Base_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	201d      	movs	r0, #29
 8001560:	f000 fa53 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001564:	201d      	movs	r0, #29
 8001566:	f000 fa6c 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40000400 	.word	0x40000400
 8001578:	40023800 	.word	0x40023800

0800157c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <MX_USART1_UART_Init+0x50>)
 8001584:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART1_UART_Init+0x4c>)
 80015b4:	f002 fa8e 	bl	8003ad4 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015be:	f7ff febd 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001a4 	.word	0x200001a4
 80015cc:	40011000 	.word	0x40011000

080015d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f002 fa64 	bl	8003ad4 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fe93 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200001e8 	.word	0x200001e8
 8001620:	40004400 	.word	0x40004400

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08c      	sub	sp, #48	; 0x30
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <HAL_UART_MspInit+0xe8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12d      	bne.n	80016a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_UART_MspInit+0xec>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a30      	ldr	r2, [pc, #192]	; (8001710 <HAL_UART_MspInit+0xec>)
 8001650:	f043 0310 	orr.w	r3, r3, #16
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_UART_MspInit+0xec>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_UART_MspInit+0xec>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a29      	ldr	r2, [pc, #164]	; (8001710 <HAL_UART_MspInit+0xec>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_UART_MspInit+0xec>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001690:	2307      	movs	r3, #7
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	481e      	ldr	r0, [pc, #120]	; (8001714 <HAL_UART_MspInit+0xf0>)
 800169c:	f000 fee2 	bl	8002464 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016a0:	e030      	b.n	8001704 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_UART_MspInit+0xf4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d12b      	bne.n	8001704 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b10      	ldr	r3, [pc, #64]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <HAL_UART_MspInit+0xec>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e4:	230c      	movs	r3, #12
 80016e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f4:	2307      	movs	r3, #7
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <HAL_UART_MspInit+0xf0>)
 8001700:	f000 feb0 	bl	8002464 <HAL_GPIO_Init>
}
 8001704:	bf00      	nop
 8001706:	3730      	adds	r7, #48	; 0x30
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40011000 	.word	0x40011000
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000
 8001718:	40004400 	.word	0x40004400

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001746:	f7ff fe91 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f002 fe55 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fd19 	bl	8001184 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001760:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8001764:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001768:	20000398 	.word	0x20000398

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f92b 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fdd0 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f943 	bl	8001a5e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f90b 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	2000000c 	.word	0x2000000c
 800180c:	20000014 	.word	0x20000014
 8001810:	20000010 	.word	0x20000010

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000014 	.word	0x20000014
 8001838:	2000022c 	.word	0x2000022c

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	2000022c 	.word	0x2000022c

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00e      	b.n	8001aa6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	795b      	ldrb	r3, [r3, #5]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d105      	bne.n	8001a9e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff fb1f 	bl	80010dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b087      	sub	sp, #28
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	441a      	add	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d3f0      	bcc.n	8001aca <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2201      	movs	r2, #1
 8001af4:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001af6:	693b      	ldr	r3, [r7, #16]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b16:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_FLASH_Program+0xa0>)
 8001b18:	7e1b      	ldrb	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_FLASH_Program+0x1e>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e03b      	b.n	8001b9a <HAL_FLASH_Program+0x96>
 8001b22:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_FLASH_Program+0xa0>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b2c:	f000 f8b0 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001b30:	4603      	mov	r3, r0
 8001b32:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d12b      	bne.n	8001b92 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b40:	783b      	ldrb	r3, [r7, #0]
 8001b42:	4619      	mov	r1, r3
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f000 f95b 	bl	8001e00 <FLASH_Program_Byte>
 8001b4a:	e016      	b.n	8001b7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	f000 f92e 	bl	8001db8 <FLASH_Program_HalfWord>
 8001b5c:	e00d      	b.n	8001b7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d105      	bne.n	8001b70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f000 f903 	bl	8001d74 <FLASH_Program_Word>
 8001b6e:	e004      	b.n	8001b7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f000 f8cb 	bl	8001d10 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b7e:	f000 f887 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_FLASH_Program+0xa4>)
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	4a07      	ldr	r2, [pc, #28]	; (8001ba8 <HAL_FLASH_Program+0xa4>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_FLASH_Program+0xa0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000230 	.word	0x20000230
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_FLASH_Unlock+0x38>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	da0b      	bge.n	8001bd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_FLASH_Unlock+0x38>)
 8001bc0:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_FLASH_Unlock+0x3c>)
 8001bc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_FLASH_Unlock+0x38>)
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_FLASH_Unlock+0x40>)
 8001bc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_FLASH_Unlock+0x38>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da01      	bge.n	8001bd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40023c00 	.word	0x40023c00
 8001be8:	45670123 	.word	0x45670123
 8001bec:	cdef89ab 	.word	0xcdef89ab

08001bf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_FLASH_Lock+0x1c>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_FLASH_Lock+0x1c>)
 8001bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8001c22:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_FLASH_OB_Unlock+0x30>)
 8001c24:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_FLASH_OB_Unlock+0x2c>)
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_FLASH_OB_Unlock+0x34>)
 8001c2a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40023c00 	.word	0x40023c00
 8001c40:	08192a3b 	.word	0x08192a3b
 8001c44:	4c5d6e7f 	.word	0x4c5d6e7f

08001c48 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_FLASH_OB_Lock+0x1c>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_FLASH_OB_Lock+0x1c>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_FLASH_OB_Launch+0x24>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <HAL_FLASH_OB_Launch+0x24>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8001c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c80:	f000 f806 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023c14 	.word	0x40023c14

08001c90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <FLASH_WaitForLastOperation+0x78>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca2:	f7ff fdcb 	bl	800183c <HAL_GetTick>
 8001ca6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ca8:	e010      	b.n	8001ccc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d00c      	beq.n	8001ccc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <FLASH_WaitForLastOperation+0x38>
 8001cb8:	f7ff fdc0 	bl	800183c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d201      	bcs.n	8001ccc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e019      	b.n	8001d00 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <FLASH_WaitForLastOperation+0x7c>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e8      	bne.n	8001caa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <FLASH_WaitForLastOperation+0x7c>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <FLASH_WaitForLastOperation+0x7c>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <FLASH_WaitForLastOperation+0x7c>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001cf6:	f000 f8a5 	bl	8001e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
  
}  
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000230 	.word	0x20000230
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d2e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <FLASH_Program_DoubleWord+0x60>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d46:	f3bf 8f6f 	isb	sy
}
 8001d4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	000a      	movs	r2, r1
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	3104      	adds	r1, #4
 8001d60:	4613      	mov	r3, r2
 8001d62:	600b      	str	r3, [r1, #0]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <FLASH_Program_Word+0x40>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <FLASH_Program_HalfWord+0x44>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	801a      	strh	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023c00 	.word	0x40023c00

08001e00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e1a:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <FLASH_Program_Byte+0x40>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	701a      	strb	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e5e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e60:	4b29      	ldr	r3, [pc, #164]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e62:	2210      	movs	r2, #16
 8001e64:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e72:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f043 0308 	orr.w	r3, r3, #8
 8001e7a:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e7c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e7e:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e80:	2220      	movs	r2, #32
 8001e82:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e84:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001e9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001ea2:	4b19      	ldr	r3, [pc, #100]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d008      	beq.n	8001ec0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f043 0302 	orr.w	r3, r3, #2
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001eb8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d009      	beq.n	8001ee0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001ed6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ede:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f043 0320 	orr.w	r3, r3, #32
 8001ef4:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <FLASH_SetErrorCode+0xc8>)
 8001ef6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <FLASH_SetErrorCode+0xc4>)
 8001efa:	2202      	movs	r2, #2
 8001efc:	60da      	str	r2, [r3, #12]
  }
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	20000230 	.word	0x20000230

08001f10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <HAL_FLASHEx_Erase+0xd8>)
 8001f24:	7e1b      	ldrb	r3, [r3, #24]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_FLASHEx_Erase+0x1e>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e058      	b.n	8001fe0 <HAL_FLASHEx_Erase+0xd0>
 8001f2e:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_FLASHEx_Erase+0xd8>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f38:	f7ff feaa 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d148      	bne.n	8001fd8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d115      	bne.n	8001f82 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4619      	mov	r1, r3
 8001f62:	4610      	mov	r0, r2
 8001f64:	f000 f8d6 	bl	8002114 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f6c:	f7ff fe90 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_FLASHEx_Erase+0xdc>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_FLASHEx_Erase+0xdc>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6113      	str	r3, [r2, #16]
 8001f80:	e028      	b.n	8001fd4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	e01c      	b.n	8001fc4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	f000 f8e2 	bl	800215c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f9c:	f7ff fe78 	bl	8001c90 <FLASH_WaitForLastOperation>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_FLASHEx_Erase+0xdc>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_FLASHEx_Erase+0xdc>)
 8001faa:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001fae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	601a      	str	r2, [r3, #0]
          break;
 8001fbc:	e00a      	b.n	8001fd4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	4413      	add	r3, r2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3da      	bcc.n	8001f8a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001fd4:	f000 fa00 	bl	80023d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_FLASHEx_Erase+0xd8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	761a      	strb	r2, [r3, #24]

  return status;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000230 	.word	0x20000230
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <HAL_FLASHEx_OBProgram+0xd8>)
 8001ffe:	7e1b      	ldrb	r3, [r3, #24]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_FLASHEx_OBProgram+0x18>
 8002004:	2302      	movs	r3, #2
 8002006:	e05b      	b.n	80020c0 <HAL_FLASHEx_OBProgram+0xd0>
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_FLASHEx_OBProgram+0xd8>)
 800200a:	2201      	movs	r2, #1
 800200c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d018      	beq.n	800204c <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10a      	bne.n	8002038 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f000 f8dd 	bl	80021ec <FLASH_OB_EnableWRP>
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	e009      	b.n	800204c <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f000 f8f4 	bl	8002230 <FLASH_OB_DisableWRP>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f906 	bl	8002270 <FLASH_OB_RDP_LevelConfig>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7e1b      	ldrb	r3, [r3, #24]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800208c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	f000 f906 	bl	80022a4 <FLASH_OB_UserConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f928 	bl	8002304 <FLASH_OB_BOR_LevelConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_FLASHEx_OBProgram+0xd8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	761a      	strb	r2, [r3, #24]

  return status;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000230 	.word	0x20000230

080020cc <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	220f      	movs	r2, #15
 80020d8:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 80020da:	f000 f941 	bl	8002360 <FLASH_OB_GetWRP>
 80020de:	4603      	mov	r3, r0
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 80020e6:	f000 f947 	bl	8002378 <FLASH_OB_GetRDP>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 80020f2:	f000 f925 	bl	8002340 <FLASH_OB_GetUser>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 80020fe:	f000 f95b 	bl	80023b8 <FLASH_OB_GetBOR>
 8002102:	4603      	mov	r3, r0
 8002104:	461a      	mov	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	615a      	str	r2, [r3, #20]
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	6039      	str	r1, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <FLASH_MassErase+0x44>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <FLASH_MassErase+0x44>)
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800212a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <FLASH_MassErase+0x44>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <FLASH_MassErase+0x44>)
 8002132:	f043 0304 	orr.w	r3, r3, #4
 8002136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <FLASH_MassErase+0x44>)
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	4313      	orrs	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <FLASH_MassErase+0x44>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002148:	6113      	str	r3, [r2, #16]
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	e010      	b.n	800219a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d103      	bne.n	8002186 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800217e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e009      	b.n	800219a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d103      	bne.n	8002194 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800218c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	e002      	b.n	800219a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002194:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002198:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	490f      	ldr	r1, [pc, #60]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4313      	orrs	r3, r2
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <FLASH_Erase_Sector+0x8c>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	6113      	str	r3, [r2, #16]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	40023c00 	.word	0x40023c00

080021ec <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021fe:	f7ff fd47 	bl	8001c90 <FLASH_WaitForLastOperation>
 8002202:	4603      	mov	r3, r0
 8002204:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <FLASH_OB_EnableWRP+0x40>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29a      	uxth	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	b29b      	uxth	r3, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	4904      	ldr	r1, [pc, #16]	; (800222c <FLASH_OB_EnableWRP+0x40>)
 800221c:	4013      	ands	r3, r2
 800221e:	b29b      	uxth	r3, r3
 8002220:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023c16 	.word	0x40023c16

08002230 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800223e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002242:	f7ff fd25 	bl	8001c90 <FLASH_WaitForLastOperation>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <FLASH_OB_DisableWRP+0x3c>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4904      	ldr	r1, [pc, #16]	; (800226c <FLASH_OB_DisableWRP+0x3c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	800b      	strh	r3, [r1, #0]
  }

  return status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023c16 	.word	0x40023c16

08002270 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800227e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002282:	f7ff fd05 	bl	8001c90 <FLASH_WaitForLastOperation>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 8002290:	4a03      	ldr	r2, [pc, #12]	; (80022a0 <FLASH_OB_RDP_LevelConfig+0x30>)
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	7013      	strb	r3, [r2, #0]
  }

  return status;
 8002296:	7bfb      	ldrb	r3, [r7, #15]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023c15 	.word	0x40023c15

080022a4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	460b      	mov	r3, r1
 80022b0:	71bb      	strb	r3, [r7, #6]
 80022b2:	4613      	mov	r3, r2
 80022b4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80022b6:	23ff      	movs	r3, #255	; 0xff
 80022b8:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c2:	f7ff fce5 	bl	8001c90 <FLASH_WaitForLastOperation>
 80022c6:	4603      	mov	r3, r0
 80022c8:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d111      	bne.n	80022f4 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <FLASH_OB_UserConfig+0x5c>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 80022dc:	79ba      	ldrb	r2, [r7, #6]
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4905      	ldr	r1, [pc, #20]	; (8002300 <FLASH_OB_UserConfig+0x5c>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	700b      	strb	r3, [r1, #0]
  }

  return status;
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023c14 	.word	0x40023c14

08002304 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4a09      	ldr	r2, [pc, #36]	; (800233c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002316:	f023 030c 	bic.w	r3, r3, #12
 800231a:	b2db      	uxtb	r3, r3
 800231c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800231e:	4b07      	ldr	r3, [pc, #28]	; (800233c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4905      	ldr	r1, [pc, #20]	; (800233c <FLASH_OB_BOR_LevelConfig+0x38>)
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4313      	orrs	r3, r2
 800232a:	b2db      	uxtb	r3, r3
 800232c:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0

}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	40023c14 	.word	0x40023c14

08002340 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <FLASH_OB_GetUser+0x1c>)
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f023 031f 	bic.w	r3, r3, #31
 800234e:	b2db      	uxtb	r3, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00

08002360 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <FLASH_OB_GetWRP+0x14>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	b29b      	uxth	r3, r3
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	40023c16 	.word	0x40023c16

08002378 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800237e:	23aa      	movs	r3, #170	; 0xaa
 8002380:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <FLASH_OB_GetRDP+0x3c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2bcc      	cmp	r3, #204	; 0xcc
 800238a:	d102      	bne.n	8002392 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800238c:	23cc      	movs	r3, #204	; 0xcc
 800238e:	71fb      	strb	r3, [r7, #7]
 8002390:	e009      	b.n	80023a6 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <FLASH_OB_GetRDP+0x3c>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2baa      	cmp	r3, #170	; 0xaa
 800239a:	d102      	bne.n	80023a2 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800239c:	23aa      	movs	r3, #170	; 0xaa
 800239e:	71fb      	strb	r3, [r7, #7]
 80023a0:	e001      	b.n	80023a6 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 80023a2:	2355      	movs	r3, #85	; 0x55
 80023a4:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40023c15 	.word	0x40023c15

080023b8 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <FLASH_OB_GetBOR+0x1c>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	b2db      	uxtb	r3, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023c14 	.word	0x40023c14

080023d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <FLASH_FlushCaches+0x88>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <FLASH_FlushCaches+0x88>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <FLASH_FlushCaches+0x88>)
 80023ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <FLASH_FlushCaches+0x88>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <FLASH_FlushCaches+0x88>)
 80023fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b17      	ldr	r3, [pc, #92]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800240a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800240c:	4b14      	ldr	r3, [pc, #80]	; (8002460 <FLASH_FlushCaches+0x88>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a13      	ldr	r2, [pc, #76]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002416:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <FLASH_FlushCaches+0x88>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d017      	beq.n	8002454 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <FLASH_FlushCaches+0x88>)
 800242a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800242e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <FLASH_FlushCaches+0x88>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a07      	ldr	r2, [pc, #28]	; (8002460 <FLASH_FlushCaches+0x88>)
 8002442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002446:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <FLASH_FlushCaches+0x88>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <FLASH_FlushCaches+0x88>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
  }
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023c00 	.word	0x40023c00

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e159      	b.n	8002734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8148 	bne.w	800272e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a2 	beq.w	800272e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_GPIO_Init+0x2f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x202>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_GPIO_Init+0x2f4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x1fe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a47      	ldr	r2, [pc, #284]	; (800275c <HAL_GPIO_Init+0x2f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x1fa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <HAL_GPIO_Init+0x2fc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x1f6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a45      	ldr	r2, [pc, #276]	; (8002764 <HAL_GPIO_Init+0x300>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x1f2>
 8002652:	2304      	movs	r3, #4
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002656:	2307      	movs	r3, #7
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f aea2 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e267      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d075      	beq.n	80028aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d00c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d112      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e2:	d10b      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	4b7e      	ldr	r3, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05b      	beq.n	80028a8 <HAL_RCC_OscConfig+0x108>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d157      	bne.n	80028a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e242      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x74>
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6f      	ldr	r2, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a68      	ldr	r2, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fff0 	bl	800183c <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe ffec 	bl	800183c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e207      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xc0>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe ffdc 	bl	800183c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe ffd8 	bl	800183c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1f3      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0xe8>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d11c      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1c7      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e03a      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe ff91 	bl	800183c <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe ff8d 	bl	800183c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1a8      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4925      	ldr	r1, [pc, #148]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e015      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe ff70 	bl	800183c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe ff6c 	bl	800183c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e187      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d036      	beq.n	80029f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe ff50 	bl	800183c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe ff4c 	bl	800183c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e167      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x200>
 80029be:	e01b      	b.n	80029f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe ff39 	bl	800183c <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	e00e      	b.n	80029ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe ff35 	bl	800183c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d907      	bls.n	80029ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e150      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	42470000 	.word	0x42470000
 80029e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ea      	bne.n	80029ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8097 	beq.w	8002b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fef5 	bl	800183c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe fef1 	bl	800183c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e10c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2ea>
 8002a7c:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	e01c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x30c>
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a5e      	ldr	r2, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe feb6 	bl	800183c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe feb2 	bl	800183c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0cb      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ee      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fea0 	bl	800183c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe fe9c 	bl	800183c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0b5      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ee      	bne.n	8002b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a1 	beq.w	8002c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d05c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d141      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fe70 	bl	800183c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe fe6c 	bl	800183c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e087      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	491b      	ldr	r1, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe45 	bl	800183c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe fe41 	bl	800183c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e05c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x416>
 8002bd4:	e054      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe fe2e 	bl	800183c <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe fe2a 	bl	800183c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e045      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x444>
 8002c02:	e03d      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e038      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4ec>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d028      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d121      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0cc      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d90c      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d044      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e067      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4934      	ldr	r1, [pc, #208]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe fd5c 	bl	800183c <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe fd58 	bl	800183c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e04f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 020c 	and.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1eb      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d20c      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fcbc 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	080051e8 	.word	0x080051e8
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	20000010 	.word	0x20000010

08002e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b090      	sub	sp, #64	; 0x40
 8002e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
 8002e68:	2300      	movs	r3, #0
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e74:	4b59      	ldr	r3, [pc, #356]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	f200 80a1 	bhi.w	8002fc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8e:	e09b      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002e94:	e09b      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e96:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9a:	e098      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e9c:	4b4f      	ldr	r3, [pc, #316]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea6:	4b4d      	ldr	r3, [pc, #308]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb2:	4b4a      	ldr	r3, [pc, #296]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	2200      	movs	r2, #0
 8002eba:	623b      	str	r3, [r7, #32]
 8002ebc:	627a      	str	r2, [r7, #36]	; 0x24
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ec8:	fb03 f201 	mul.w	r2, r3, r1
 8002ecc:	2300      	movs	r3, #0
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ed6:	fba0 1202 	umull	r1, r2, r0, r2
 8002eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002edc:	460a      	mov	r2, r1
 8002ede:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee2:	4413      	add	r3, r2
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee8:	2200      	movs	r2, #0
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	61fa      	str	r2, [r7, #28]
 8002eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ef6:	f7fd f9c3 	bl	8000280 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4613      	mov	r3, r2
 8002f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f02:	e053      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	617a      	str	r2, [r7, #20]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f16:	f04f 0b00 	mov.w	fp, #0
 8002f1a:	4652      	mov	r2, sl
 8002f1c:	465b      	mov	r3, fp
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2c:	0150      	lsls	r0, r2, #5
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	ebb2 080a 	subs.w	r8, r2, sl
 8002f36:	eb63 090b 	sbc.w	r9, r3, fp
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f4e:	ebb2 0408 	subs.w	r4, r2, r8
 8002f52:	eb63 0509 	sbc.w	r5, r3, r9
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	00eb      	lsls	r3, r5, #3
 8002f60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f64:	00e2      	lsls	r2, r4, #3
 8002f66:	4614      	mov	r4, r2
 8002f68:	461d      	mov	r5, r3
 8002f6a:	eb14 030a 	adds.w	r3, r4, sl
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	eb45 030b 	adc.w	r3, r5, fp
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f82:	4629      	mov	r1, r5
 8002f84:	028b      	lsls	r3, r1, #10
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	028a      	lsls	r2, r1, #10
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	2200      	movs	r2, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fa0:	f7fd f96e 	bl	8000280 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x180>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002fbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fc6:	e002      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3740      	adds	r7, #64	; 0x40
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	017d7840 	.word	0x017d7840

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff0 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	0a9b      	lsrs	r3, r3, #10
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40023800 	.word	0x40023800
 8003024:	080051f8 	.word	0x080051f8

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800302c:	f7ff ffdc 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	0b5b      	lsrs	r3, r3, #13
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	080051f8 	.word	0x080051f8

08003050 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003056:	f7fe fbf1 	bl	800183c <HAL_GetTick>
 800305a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800305c:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800306a:	f7fe fbe7 	bl	800183c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0a7      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800307c:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003088:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a51      	ldr	r2, [pc, #324]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003094:	f7fe fbd2 	bl	800183c <HAL_GetTick>
 8003098:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800309a:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a2:	f7fe fbcb 	bl	800183c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e089      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80030b8:	4b46      	ldr	r3, [pc, #280]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80030c4:	f7fe fbba 	bl	800183c <HAL_GetTick>
 80030c8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80030ca:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a41      	ldr	r2, [pc, #260]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80030d0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80030d4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fbb0 	bl	800183c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e070      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80030ea:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80030f6:	f7fe fba1 	bl	800183c <HAL_GetTick>
 80030fa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003106:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe fb97 	bl	800183c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e057      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003128:	f7fe fb88 	bl	800183c <HAL_GetTick>
 800312c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800312e:	4b29      	ldr	r3, [pc, #164]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003134:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003138:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800313c:	f7fe fb7e 	bl	800183c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e03e      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_RCC_DeInit+0x188>)
 800315e:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003160:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_RCC_DeInit+0x18c>)
 8003164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003168:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800316e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003172:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800317a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800317e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003186:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800318a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a10      	ldr	r2, [pc, #64]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 8003192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003196:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 800319e:	f023 0301 	bic.w	r3, r3, #1
 80031a2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_RCC_DeInit+0x184>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_DeInit+0x190>)
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <HAL_RCC_DeInit+0x194>)
 80031b4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <HAL_RCC_DeInit+0x198>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fafa 	bl	80017b4 <HAL_InitTick>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	04003010 	.word	0x04003010
 80031dc:	20003000 	.word	0x20003000
 80031e0:	2000000c 	.word	0x2000000c
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	20000010 	.word	0x20000010

080031ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e041      	b.n	8003282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe f98a 	bl	800152c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3304      	adds	r3, #4
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fab6 	bl	800379c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e044      	b.n	800332e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_TIM_Base_Start_IT+0xb0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d018      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d013      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a1a      	ldr	r2, [pc, #104]	; (8003340 <HAL_TIM_Base_Start_IT+0xb4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00e      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a19      	ldr	r2, [pc, #100]	; (8003344 <HAL_TIM_Base_Start_IT+0xb8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d009      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a17      	ldr	r2, [pc, #92]	; (8003348 <HAL_TIM_Base_Start_IT+0xbc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d004      	beq.n	80032f8 <HAL_TIM_Base_Start_IT+0x6c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	; (800334c <HAL_TIM_Base_Start_IT+0xc0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d111      	bne.n	800331c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d010      	beq.n	800332c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331a:	e007      	b.n	800332c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10f      	bne.n	8003398 <HAL_TIM_Base_Stop_IT+0x48>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a1a      	ldr	r2, [r3, #32]
 800337e:	f240 4344 	movw	r3, #1092	; 0x444
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_TIM_Base_Stop_IT+0x48>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0201 	bic.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d122      	bne.n	800340a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d11b      	bne.n	800340a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f06f 0202 	mvn.w	r2, #2
 80033da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f9b5 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 80033f6:	e005      	b.n	8003404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9a7 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9b8 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d122      	bne.n	800345e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d11b      	bne.n	800345e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f06f 0204 	mvn.w	r2, #4
 800342e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f98b 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 800344a:	e005      	b.n	8003458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f97d 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f98e 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b08      	cmp	r3, #8
 800346a:	d122      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d11b      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0208 	mvn.w	r2, #8
 8003482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2204      	movs	r2, #4
 8003488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f961 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 800349e:	e005      	b.n	80034ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f953 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f964 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	d122      	bne.n	8003506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d11b      	bne.n	8003506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0210 	mvn.w	r2, #16
 80034d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2208      	movs	r2, #8
 80034dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f937 	bl	8003760 <HAL_TIM_IC_CaptureCallback>
 80034f2:	e005      	b.n	8003500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f929 	bl	800374c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f93a 	bl	8003774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b01      	cmp	r3, #1
 8003512:	d10e      	bne.n	8003532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0201 	mvn.w	r2, #1
 800352a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fd fedf 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b80      	cmp	r3, #128	; 0x80
 800353e:	d10e      	bne.n	800355e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d107      	bne.n	800355e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fab1 	bl	8003ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d10e      	bne.n	800358a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d107      	bne.n	800358a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f8ff 	bl	8003788 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b20      	cmp	r3, #32
 8003596:	d10e      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d107      	bne.n	80035b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0220 	mvn.w	r2, #32
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa7b 	bl	8003aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_TIM_ConfigClockSource+0x1c>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e0b4      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x186>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2202      	movs	r2, #2
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003600:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003612:	d03e      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xd4>
 8003614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003618:	f200 8087 	bhi.w	800372a <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003620:	f000 8086 	beq.w	8003730 <HAL_TIM_ConfigClockSource+0x172>
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003628:	d87f      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 800362a:	2b70      	cmp	r3, #112	; 0x70
 800362c:	d01a      	beq.n	8003664 <HAL_TIM_ConfigClockSource+0xa6>
 800362e:	2b70      	cmp	r3, #112	; 0x70
 8003630:	d87b      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 8003632:	2b60      	cmp	r3, #96	; 0x60
 8003634:	d050      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x11a>
 8003636:	2b60      	cmp	r3, #96	; 0x60
 8003638:	d877      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 800363a:	2b50      	cmp	r3, #80	; 0x50
 800363c:	d03c      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0xfa>
 800363e:	2b50      	cmp	r3, #80	; 0x50
 8003640:	d873      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d058      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x13a>
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d86f      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 800364a:	2b30      	cmp	r3, #48	; 0x30
 800364c:	d064      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0x15a>
 800364e:	2b30      	cmp	r3, #48	; 0x30
 8003650:	d86b      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 8003652:	2b20      	cmp	r3, #32
 8003654:	d060      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0x15a>
 8003656:	2b20      	cmp	r3, #32
 8003658:	d867      	bhi.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d05c      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0x15a>
 800365e:	2b10      	cmp	r3, #16
 8003660:	d05a      	beq.n	8003718 <HAL_TIM_ConfigClockSource+0x15a>
 8003662:	e062      	b.n	800372a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f000 f98c 	bl	8003990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003686:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
      break;
 8003690:	e04f      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f000 f975 	bl	8003990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b4:	609a      	str	r2, [r3, #8]
      break;
 80036b6:	e03c      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f000 f8e9 	bl	800389c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2150      	movs	r1, #80	; 0x50
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f942 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 80036d6:	e02c      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f000 f908 	bl	80038fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2160      	movs	r1, #96	; 0x60
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f932 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 80036f6:	e01c      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	461a      	mov	r2, r3
 8003706:	f000 f8c9 	bl	800389c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f922 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003716:	e00c      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 f919 	bl	800395a <TIM_ITRx_SetConfig>
      break;
 8003728:	e003      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
      break;
 800372e:	e000      	b.n	8003732 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003730:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a34      	ldr	r2, [pc, #208]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00f      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d00b      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a31      	ldr	r2, [pc, #196]	; (8003884 <TIM_Base_SetConfig+0xe8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d007      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a30      	ldr	r2, [pc, #192]	; (8003888 <TIM_Base_SetConfig+0xec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_Base_SetConfig+0x38>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <TIM_Base_SetConfig+0xf0>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d108      	bne.n	80037e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a25      	ldr	r2, [pc, #148]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01b      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d017      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <TIM_Base_SetConfig+0xe8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	; (8003888 <TIM_Base_SetConfig+0xec>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00f      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <TIM_Base_SetConfig+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00b      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1f      	ldr	r2, [pc, #124]	; (8003890 <TIM_Base_SetConfig+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a1e      	ldr	r2, [pc, #120]	; (8003894 <TIM_Base_SetConfig+0xf8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_Base_SetConfig+0x8a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_Base_SetConfig+0xfc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d108      	bne.n	8003838 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <TIM_Base_SetConfig+0xe4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d103      	bne.n	800386c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	615a      	str	r2, [r3, #20]
}
 8003872:	bf00      	nop
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000
 8003894:	40014400 	.word	0x40014400
 8003898:	40014800 	.word	0x40014800

0800389c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 030a 	bic.w	r3, r3, #10
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0210 	bic.w	r2, r3, #16
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	031b      	lsls	r3, r3, #12
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	f043 0307 	orr.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	371c      	adds	r7, #28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e050      	b.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d018      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a34:	d013      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00e      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d009      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10c      	bne.n	8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40000400 	.word	0x40000400
 8003aa0:	40000800 	.word	0x40000800
 8003aa4:	40000c00 	.word	0x40000c00
 8003aa8:	40014000 	.word	0x40014000

08003aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e03f      	b.n	8003b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd fd92 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f9cb 	bl	8003eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b08a      	sub	sp, #40	; 0x28
 8003b72:	af02      	add	r7, sp, #8
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d17c      	bne.n	8003c88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_UART_Transmit+0x2c>
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e075      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_UART_Transmit+0x3e>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e06e      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2221      	movs	r2, #33	; 0x21
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fe3b 	bl	800183c <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	88fa      	ldrh	r2, [r7, #6]
 8003bd2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bdc:	d108      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	e003      	b.n	8003bf8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c00:	e02a      	b.n	8003c58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f8e2 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e036      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3302      	adds	r3, #2
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e007      	b.n	8003c4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	3301      	adds	r3, #1
 8003c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1cf      	bne.n	8003c02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	; 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f8b2 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e006      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b08a      	sub	sp, #40	; 0x28
 8003c96:	af02      	add	r7, sp, #8
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b20      	cmp	r3, #32
 8003cb0:	f040 808c 	bne.w	8003dcc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_UART_Receive+0x2e>
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e084      	b.n	8003dce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_UART_Receive+0x40>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e07d      	b.n	8003dce <HAL_UART_Receive+0x13c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2222      	movs	r2, #34	; 0x22
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fda5 	bl	800183c <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Receive+0x8a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d2c:	e043      	b.n	8003db6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2120      	movs	r1, #32
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f84c 	bl	8003dd6 <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e042      	b.n	8003dce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	3302      	adds	r3, #2
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e01f      	b.n	8003da8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d70:	d007      	beq.n	8003d82 <HAL_UART_Receive+0xf0>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_UART_Receive+0xfe>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	701a      	strb	r2, [r3, #0]
 8003d8e:	e008      	b.n	8003da2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1b6      	bne.n	8003d2e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b090      	sub	sp, #64	; 0x40
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	e050      	b.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d04c      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003df6:	f7fd fd21 	bl	800183c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d241      	bcs.n	8003e8a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e26:	637a      	str	r2, [r7, #52]	; 0x34
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e5      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3314      	adds	r3, #20
 8003e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	613b      	str	r3, [r7, #16]
   return(result);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3314      	adds	r3, #20
 8003e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e5a:	623a      	str	r2, [r7, #32]
 8003e5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	69f9      	ldr	r1, [r7, #28]
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e00f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4013      	ands	r3, r2
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	bf0c      	ite	eq
 8003e9a:	2301      	moveq	r3, #1
 8003e9c:	2300      	movne	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d09f      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3740      	adds	r7, #64	; 0x40
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb8:	b0c0      	sub	sp, #256	; 0x100
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	68d9      	ldr	r1, [r3, #12]
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	ea40 0301 	orr.w	r3, r0, r1
 8003edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f0c:	f021 010c 	bic.w	r1, r1, #12
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	6999      	ldr	r1, [r3, #24]
 8003f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	ea40 0301 	orr.w	r3, r0, r1
 8003f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8f      	ldr	r3, [pc, #572]	; (8004180 <UART_SetConfig+0x2cc>)
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d005      	beq.n	8003f54 <UART_SetConfig+0xa0>
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b8d      	ldr	r3, [pc, #564]	; (8004184 <UART_SetConfig+0x2d0>)
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d104      	bne.n	8003f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f54:	f7ff f868 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8003f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f5c:	e003      	b.n	8003f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f5e:	f7ff f84f 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8003f62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f70:	f040 810c 	bne.w	800418c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f86:	4622      	mov	r2, r4
 8003f88:	462b      	mov	r3, r5
 8003f8a:	1891      	adds	r1, r2, r2
 8003f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f96:	4621      	mov	r1, r4
 8003f98:	eb12 0801 	adds.w	r8, r2, r1
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb43 0901 	adc.w	r9, r3, r1
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb6:	4690      	mov	r8, r2
 8003fb8:	4699      	mov	r9, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	eb18 0303 	adds.w	r3, r8, r3
 8003fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	eb49 0303 	adc.w	r3, r9, r3
 8003fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	18db      	adds	r3, r3, r3
 8003fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe8:	4613      	mov	r3, r2
 8003fea:	eb42 0303 	adc.w	r3, r2, r3
 8003fee:	657b      	str	r3, [r7, #84]	; 0x54
 8003ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ff8:	f7fc f942 	bl	8000280 <__aeabi_uldivmod>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4b61      	ldr	r3, [pc, #388]	; (8004188 <UART_SetConfig+0x2d4>)
 8004002:	fba3 2302 	umull	r2, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	011c      	lsls	r4, r3, #4
 800400a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800400e:	2200      	movs	r2, #0
 8004010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004014:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800401c:	4642      	mov	r2, r8
 800401e:	464b      	mov	r3, r9
 8004020:	1891      	adds	r1, r2, r2
 8004022:	64b9      	str	r1, [r7, #72]	; 0x48
 8004024:	415b      	adcs	r3, r3
 8004026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800402c:	4641      	mov	r1, r8
 800402e:	eb12 0a01 	adds.w	sl, r2, r1
 8004032:	4649      	mov	r1, r9
 8004034:	eb43 0b01 	adc.w	fp, r3, r1
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404c:	4692      	mov	sl, r2
 800404e:	469b      	mov	fp, r3
 8004050:	4643      	mov	r3, r8
 8004052:	eb1a 0303 	adds.w	r3, sl, r3
 8004056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800405a:	464b      	mov	r3, r9
 800405c:	eb4b 0303 	adc.w	r3, fp, r3
 8004060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004070:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004078:	460b      	mov	r3, r1
 800407a:	18db      	adds	r3, r3, r3
 800407c:	643b      	str	r3, [r7, #64]	; 0x40
 800407e:	4613      	mov	r3, r2
 8004080:	eb42 0303 	adc.w	r3, r2, r3
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
 8004086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800408a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800408e:	f7fc f8f7 	bl	8000280 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4611      	mov	r1, r2
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <UART_SetConfig+0x2d4>)
 800409a:	fba3 2301 	umull	r2, r3, r3, r1
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2264      	movs	r2, #100	; 0x64
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ae:	4b36      	ldr	r3, [pc, #216]	; (8004188 <UART_SetConfig+0x2d4>)
 80040b0:	fba3 2302 	umull	r2, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040bc:	441c      	add	r4, r3
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040d8:	415b      	adcs	r3, r3
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040e0:	4641      	mov	r1, r8
 80040e2:	1851      	adds	r1, r2, r1
 80040e4:	6339      	str	r1, [r7, #48]	; 0x30
 80040e6:	4649      	mov	r1, r9
 80040e8:	414b      	adcs	r3, r1
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040f8:	4659      	mov	r1, fp
 80040fa:	00cb      	lsls	r3, r1, #3
 80040fc:	4651      	mov	r1, sl
 80040fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004102:	4651      	mov	r1, sl
 8004104:	00ca      	lsls	r2, r1, #3
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	4603      	mov	r3, r0
 800410c:	4642      	mov	r2, r8
 800410e:	189b      	adds	r3, r3, r2
 8004110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004114:	464b      	mov	r3, r9
 8004116:	460a      	mov	r2, r1
 8004118:	eb42 0303 	adc.w	r3, r2, r3
 800411c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800412c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004134:	460b      	mov	r3, r1
 8004136:	18db      	adds	r3, r3, r3
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
 800413a:	4613      	mov	r3, r2
 800413c:	eb42 0303 	adc.w	r3, r2, r3
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800414a:	f7fc f899 	bl	8000280 <__aeabi_uldivmod>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <UART_SetConfig+0x2d4>)
 8004154:	fba3 1302 	umull	r1, r3, r3, r2
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	2164      	movs	r1, #100	; 0x64
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	3332      	adds	r3, #50	; 0x32
 8004166:	4a08      	ldr	r2, [pc, #32]	; (8004188 <UART_SetConfig+0x2d4>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	f003 0207 	and.w	r2, r3, #7
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4422      	add	r2, r4
 800417a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800417c:	e106      	b.n	800438c <UART_SetConfig+0x4d8>
 800417e:	bf00      	nop
 8004180:	40011000 	.word	0x40011000
 8004184:	40011400 	.word	0x40011400
 8004188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800418c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004190:	2200      	movs	r2, #0
 8004192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800419a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800419e:	4642      	mov	r2, r8
 80041a0:	464b      	mov	r3, r9
 80041a2:	1891      	adds	r1, r2, r2
 80041a4:	6239      	str	r1, [r7, #32]
 80041a6:	415b      	adcs	r3, r3
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ae:	4641      	mov	r1, r8
 80041b0:	1854      	adds	r4, r2, r1
 80041b2:	4649      	mov	r1, r9
 80041b4:	eb43 0501 	adc.w	r5, r3, r1
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	00eb      	lsls	r3, r5, #3
 80041c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041c6:	00e2      	lsls	r2, r4, #3
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	4643      	mov	r3, r8
 80041ce:	18e3      	adds	r3, r4, r3
 80041d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041d4:	464b      	mov	r3, r9
 80041d6:	eb45 0303 	adc.w	r3, r5, r3
 80041da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041fa:	4629      	mov	r1, r5
 80041fc:	008b      	lsls	r3, r1, #2
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004204:	4621      	mov	r1, r4
 8004206:	008a      	lsls	r2, r1, #2
 8004208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800420c:	f7fc f838 	bl	8000280 <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4b60      	ldr	r3, [pc, #384]	; (8004398 <UART_SetConfig+0x4e4>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800422c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	61b9      	str	r1, [r7, #24]
 8004238:	415b      	adcs	r3, r3
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004240:	4641      	mov	r1, r8
 8004242:	1851      	adds	r1, r2, r1
 8004244:	6139      	str	r1, [r7, #16]
 8004246:	4649      	mov	r1, r9
 8004248:	414b      	adcs	r3, r1
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004258:	4659      	mov	r1, fp
 800425a:	00cb      	lsls	r3, r1, #3
 800425c:	4651      	mov	r1, sl
 800425e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004262:	4651      	mov	r1, sl
 8004264:	00ca      	lsls	r2, r1, #3
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	4603      	mov	r3, r0
 800426c:	4642      	mov	r2, r8
 800426e:	189b      	adds	r3, r3, r2
 8004270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004274:	464b      	mov	r3, r9
 8004276:	460a      	mov	r2, r1
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	67bb      	str	r3, [r7, #120]	; 0x78
 800428a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004298:	4649      	mov	r1, r9
 800429a:	008b      	lsls	r3, r1, #2
 800429c:	4641      	mov	r1, r8
 800429e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042a2:	4641      	mov	r1, r8
 80042a4:	008a      	lsls	r2, r1, #2
 80042a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042aa:	f7fb ffe9 	bl	8000280 <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	4b38      	ldr	r3, [pc, #224]	; (8004398 <UART_SetConfig+0x4e4>)
 80042b6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2264      	movs	r2, #100	; 0x64
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	1acb      	subs	r3, r1, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a33      	ldr	r2, [pc, #204]	; (8004398 <UART_SetConfig+0x4e4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d4:	441c      	add	r4, r3
 80042d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042da:	2200      	movs	r2, #0
 80042dc:	673b      	str	r3, [r7, #112]	; 0x70
 80042de:	677a      	str	r2, [r7, #116]	; 0x74
 80042e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	415b      	adcs	r3, r3
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6039      	str	r1, [r7, #0]
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	66bb      	str	r3, [r7, #104]	; 0x68
 8004326:	464b      	mov	r3, r9
 8004328:	460a      	mov	r2, r1
 800432a:	eb42 0303 	adc.w	r3, r2, r3
 800432e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	663b      	str	r3, [r7, #96]	; 0x60
 800433a:	667a      	str	r2, [r7, #100]	; 0x64
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004348:	4649      	mov	r1, r9
 800434a:	008b      	lsls	r3, r1, #2
 800434c:	4641      	mov	r1, r8
 800434e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004352:	4641      	mov	r1, r8
 8004354:	008a      	lsls	r2, r1, #2
 8004356:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800435a:	f7fb ff91 	bl	8000280 <__aeabi_uldivmod>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4b0d      	ldr	r3, [pc, #52]	; (8004398 <UART_SetConfig+0x4e4>)
 8004364:	fba3 1302 	umull	r1, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	2164      	movs	r1, #100	; 0x64
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3332      	adds	r3, #50	; 0x32
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <UART_SetConfig+0x4e4>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4422      	add	r2, r4
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004392:	46bd      	mov	sp, r7
 8004394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <_vsiprintf_r>:
 800439c:	b500      	push	{lr}
 800439e:	b09b      	sub	sp, #108	; 0x6c
 80043a0:	9100      	str	r1, [sp, #0]
 80043a2:	9104      	str	r1, [sp, #16]
 80043a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043a8:	9105      	str	r1, [sp, #20]
 80043aa:	9102      	str	r1, [sp, #8]
 80043ac:	4905      	ldr	r1, [pc, #20]	; (80043c4 <_vsiprintf_r+0x28>)
 80043ae:	9103      	str	r1, [sp, #12]
 80043b0:	4669      	mov	r1, sp
 80043b2:	f000 f999 	bl	80046e8 <_svfiprintf_r>
 80043b6:	9b00      	ldr	r3, [sp, #0]
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	b01b      	add	sp, #108	; 0x6c
 80043be:	f85d fb04 	ldr.w	pc, [sp], #4
 80043c2:	bf00      	nop
 80043c4:	ffff0208 	.word	0xffff0208

080043c8 <vsiprintf>:
 80043c8:	4613      	mov	r3, r2
 80043ca:	460a      	mov	r2, r1
 80043cc:	4601      	mov	r1, r0
 80043ce:	4802      	ldr	r0, [pc, #8]	; (80043d8 <vsiprintf+0x10>)
 80043d0:	6800      	ldr	r0, [r0, #0]
 80043d2:	f7ff bfe3 	b.w	800439c <_vsiprintf_r>
 80043d6:	bf00      	nop
 80043d8:	20000064 	.word	0x20000064

080043dc <memset>:
 80043dc:	4402      	add	r2, r0
 80043de:	4603      	mov	r3, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <__errno>:
 80043ec:	4b01      	ldr	r3, [pc, #4]	; (80043f4 <__errno+0x8>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000064 	.word	0x20000064

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	; (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	; (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	; (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	; (800443c <__libc_init_array+0x44>)
 800440c:	f000 fc6a 	bl	8004ce4 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	0800523c 	.word	0x0800523c
 8004434:	0800523c 	.word	0x0800523c
 8004438:	0800523c 	.word	0x0800523c
 800443c:	08005240 	.word	0x08005240

08004440 <__retarget_lock_acquire_recursive>:
 8004440:	4770      	bx	lr

08004442 <__retarget_lock_release_recursive>:
 8004442:	4770      	bx	lr

08004444 <_free_r>:
 8004444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004446:	2900      	cmp	r1, #0
 8004448:	d044      	beq.n	80044d4 <_free_r+0x90>
 800444a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800444e:	9001      	str	r0, [sp, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f1a1 0404 	sub.w	r4, r1, #4
 8004456:	bfb8      	it	lt
 8004458:	18e4      	addlt	r4, r4, r3
 800445a:	f000 f8df 	bl	800461c <__malloc_lock>
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <_free_r+0x94>)
 8004460:	9801      	ldr	r0, [sp, #4]
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	b933      	cbnz	r3, 8004474 <_free_r+0x30>
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6014      	str	r4, [r2, #0]
 800446a:	b003      	add	sp, #12
 800446c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004470:	f000 b8da 	b.w	8004628 <__malloc_unlock>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d908      	bls.n	800448a <_free_r+0x46>
 8004478:	6825      	ldr	r5, [r4, #0]
 800447a:	1961      	adds	r1, r4, r5
 800447c:	428b      	cmp	r3, r1
 800447e:	bf01      	itttt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	1949      	addeq	r1, r1, r5
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	e7ed      	b.n	8004466 <_free_r+0x22>
 800448a:	461a      	mov	r2, r3
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b10b      	cbz	r3, 8004494 <_free_r+0x50>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d9fa      	bls.n	800448a <_free_r+0x46>
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	1855      	adds	r5, r2, r1
 8004498:	42a5      	cmp	r5, r4
 800449a:	d10b      	bne.n	80044b4 <_free_r+0x70>
 800449c:	6824      	ldr	r4, [r4, #0]
 800449e:	4421      	add	r1, r4
 80044a0:	1854      	adds	r4, r2, r1
 80044a2:	42a3      	cmp	r3, r4
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	d1e0      	bne.n	800446a <_free_r+0x26>
 80044a8:	681c      	ldr	r4, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	440c      	add	r4, r1
 80044b0:	6014      	str	r4, [r2, #0]
 80044b2:	e7da      	b.n	800446a <_free_r+0x26>
 80044b4:	d902      	bls.n	80044bc <_free_r+0x78>
 80044b6:	230c      	movs	r3, #12
 80044b8:	6003      	str	r3, [r0, #0]
 80044ba:	e7d6      	b.n	800446a <_free_r+0x26>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1961      	adds	r1, r4, r5
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf04      	itt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	bf04      	itt	eq
 80044cc:	1949      	addeq	r1, r1, r5
 80044ce:	6021      	streq	r1, [r4, #0]
 80044d0:	6054      	str	r4, [r2, #4]
 80044d2:	e7ca      	b.n	800446a <_free_r+0x26>
 80044d4:	b003      	add	sp, #12
 80044d6:	bd30      	pop	{r4, r5, pc}
 80044d8:	20000390 	.word	0x20000390

080044dc <sbrk_aligned>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4e0e      	ldr	r6, [pc, #56]	; (8004518 <sbrk_aligned+0x3c>)
 80044e0:	460c      	mov	r4, r1
 80044e2:	6831      	ldr	r1, [r6, #0]
 80044e4:	4605      	mov	r5, r0
 80044e6:	b911      	cbnz	r1, 80044ee <sbrk_aligned+0x12>
 80044e8:	f000 fba6 	bl	8004c38 <_sbrk_r>
 80044ec:	6030      	str	r0, [r6, #0]
 80044ee:	4621      	mov	r1, r4
 80044f0:	4628      	mov	r0, r5
 80044f2:	f000 fba1 	bl	8004c38 <_sbrk_r>
 80044f6:	1c43      	adds	r3, r0, #1
 80044f8:	d00a      	beq.n	8004510 <sbrk_aligned+0x34>
 80044fa:	1cc4      	adds	r4, r0, #3
 80044fc:	f024 0403 	bic.w	r4, r4, #3
 8004500:	42a0      	cmp	r0, r4
 8004502:	d007      	beq.n	8004514 <sbrk_aligned+0x38>
 8004504:	1a21      	subs	r1, r4, r0
 8004506:	4628      	mov	r0, r5
 8004508:	f000 fb96 	bl	8004c38 <_sbrk_r>
 800450c:	3001      	adds	r0, #1
 800450e:	d101      	bne.n	8004514 <sbrk_aligned+0x38>
 8004510:	f04f 34ff 	mov.w	r4, #4294967295
 8004514:	4620      	mov	r0, r4
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	20000394 	.word	0x20000394

0800451c <_malloc_r>:
 800451c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004520:	1ccd      	adds	r5, r1, #3
 8004522:	f025 0503 	bic.w	r5, r5, #3
 8004526:	3508      	adds	r5, #8
 8004528:	2d0c      	cmp	r5, #12
 800452a:	bf38      	it	cc
 800452c:	250c      	movcc	r5, #12
 800452e:	2d00      	cmp	r5, #0
 8004530:	4607      	mov	r7, r0
 8004532:	db01      	blt.n	8004538 <_malloc_r+0x1c>
 8004534:	42a9      	cmp	r1, r5
 8004536:	d905      	bls.n	8004544 <_malloc_r+0x28>
 8004538:	230c      	movs	r3, #12
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	2600      	movs	r6, #0
 800453e:	4630      	mov	r0, r6
 8004540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004618 <_malloc_r+0xfc>
 8004548:	f000 f868 	bl	800461c <__malloc_lock>
 800454c:	f8d8 3000 	ldr.w	r3, [r8]
 8004550:	461c      	mov	r4, r3
 8004552:	bb5c      	cbnz	r4, 80045ac <_malloc_r+0x90>
 8004554:	4629      	mov	r1, r5
 8004556:	4638      	mov	r0, r7
 8004558:	f7ff ffc0 	bl	80044dc <sbrk_aligned>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	4604      	mov	r4, r0
 8004560:	d155      	bne.n	800460e <_malloc_r+0xf2>
 8004562:	f8d8 4000 	ldr.w	r4, [r8]
 8004566:	4626      	mov	r6, r4
 8004568:	2e00      	cmp	r6, #0
 800456a:	d145      	bne.n	80045f8 <_malloc_r+0xdc>
 800456c:	2c00      	cmp	r4, #0
 800456e:	d048      	beq.n	8004602 <_malloc_r+0xe6>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	4631      	mov	r1, r6
 8004574:	4638      	mov	r0, r7
 8004576:	eb04 0903 	add.w	r9, r4, r3
 800457a:	f000 fb5d 	bl	8004c38 <_sbrk_r>
 800457e:	4581      	cmp	r9, r0
 8004580:	d13f      	bne.n	8004602 <_malloc_r+0xe6>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	1a6d      	subs	r5, r5, r1
 8004586:	4629      	mov	r1, r5
 8004588:	4638      	mov	r0, r7
 800458a:	f7ff ffa7 	bl	80044dc <sbrk_aligned>
 800458e:	3001      	adds	r0, #1
 8004590:	d037      	beq.n	8004602 <_malloc_r+0xe6>
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	442b      	add	r3, r5
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	f8d8 3000 	ldr.w	r3, [r8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d038      	beq.n	8004612 <_malloc_r+0xf6>
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	42a2      	cmp	r2, r4
 80045a4:	d12b      	bne.n	80045fe <_malloc_r+0xe2>
 80045a6:	2200      	movs	r2, #0
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	e00f      	b.n	80045cc <_malloc_r+0xb0>
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	1b52      	subs	r2, r2, r5
 80045b0:	d41f      	bmi.n	80045f2 <_malloc_r+0xd6>
 80045b2:	2a0b      	cmp	r2, #11
 80045b4:	d917      	bls.n	80045e6 <_malloc_r+0xca>
 80045b6:	1961      	adds	r1, r4, r5
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	6025      	str	r5, [r4, #0]
 80045bc:	bf18      	it	ne
 80045be:	6059      	strne	r1, [r3, #4]
 80045c0:	6863      	ldr	r3, [r4, #4]
 80045c2:	bf08      	it	eq
 80045c4:	f8c8 1000 	streq.w	r1, [r8]
 80045c8:	5162      	str	r2, [r4, r5]
 80045ca:	604b      	str	r3, [r1, #4]
 80045cc:	4638      	mov	r0, r7
 80045ce:	f104 060b 	add.w	r6, r4, #11
 80045d2:	f000 f829 	bl	8004628 <__malloc_unlock>
 80045d6:	f026 0607 	bic.w	r6, r6, #7
 80045da:	1d23      	adds	r3, r4, #4
 80045dc:	1af2      	subs	r2, r6, r3
 80045de:	d0ae      	beq.n	800453e <_malloc_r+0x22>
 80045e0:	1b9b      	subs	r3, r3, r6
 80045e2:	50a3      	str	r3, [r4, r2]
 80045e4:	e7ab      	b.n	800453e <_malloc_r+0x22>
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	d1dd      	bne.n	80045a8 <_malloc_r+0x8c>
 80045ec:	f8c8 2000 	str.w	r2, [r8]
 80045f0:	e7ec      	b.n	80045cc <_malloc_r+0xb0>
 80045f2:	4623      	mov	r3, r4
 80045f4:	6864      	ldr	r4, [r4, #4]
 80045f6:	e7ac      	b.n	8004552 <_malloc_r+0x36>
 80045f8:	4634      	mov	r4, r6
 80045fa:	6876      	ldr	r6, [r6, #4]
 80045fc:	e7b4      	b.n	8004568 <_malloc_r+0x4c>
 80045fe:	4613      	mov	r3, r2
 8004600:	e7cc      	b.n	800459c <_malloc_r+0x80>
 8004602:	230c      	movs	r3, #12
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4638      	mov	r0, r7
 8004608:	f000 f80e 	bl	8004628 <__malloc_unlock>
 800460c:	e797      	b.n	800453e <_malloc_r+0x22>
 800460e:	6025      	str	r5, [r4, #0]
 8004610:	e7dc      	b.n	80045cc <_malloc_r+0xb0>
 8004612:	605b      	str	r3, [r3, #4]
 8004614:	deff      	udf	#255	; 0xff
 8004616:	bf00      	nop
 8004618:	20000390 	.word	0x20000390

0800461c <__malloc_lock>:
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <__malloc_lock+0x8>)
 800461e:	f7ff bf0f 	b.w	8004440 <__retarget_lock_acquire_recursive>
 8004622:	bf00      	nop
 8004624:	2000038c 	.word	0x2000038c

08004628 <__malloc_unlock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_unlock+0x8>)
 800462a:	f7ff bf0a 	b.w	8004442 <__retarget_lock_release_recursive>
 800462e:	bf00      	nop
 8004630:	2000038c 	.word	0x2000038c

08004634 <__ssputs_r>:
 8004634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004638:	688e      	ldr	r6, [r1, #8]
 800463a:	461f      	mov	r7, r3
 800463c:	42be      	cmp	r6, r7
 800463e:	680b      	ldr	r3, [r1, #0]
 8004640:	4682      	mov	sl, r0
 8004642:	460c      	mov	r4, r1
 8004644:	4690      	mov	r8, r2
 8004646:	d82c      	bhi.n	80046a2 <__ssputs_r+0x6e>
 8004648:	898a      	ldrh	r2, [r1, #12]
 800464a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800464e:	d026      	beq.n	800469e <__ssputs_r+0x6a>
 8004650:	6965      	ldr	r5, [r4, #20]
 8004652:	6909      	ldr	r1, [r1, #16]
 8004654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004658:	eba3 0901 	sub.w	r9, r3, r1
 800465c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004660:	1c7b      	adds	r3, r7, #1
 8004662:	444b      	add	r3, r9
 8004664:	106d      	asrs	r5, r5, #1
 8004666:	429d      	cmp	r5, r3
 8004668:	bf38      	it	cc
 800466a:	461d      	movcc	r5, r3
 800466c:	0553      	lsls	r3, r2, #21
 800466e:	d527      	bpl.n	80046c0 <__ssputs_r+0x8c>
 8004670:	4629      	mov	r1, r5
 8004672:	f7ff ff53 	bl	800451c <_malloc_r>
 8004676:	4606      	mov	r6, r0
 8004678:	b360      	cbz	r0, 80046d4 <__ssputs_r+0xa0>
 800467a:	6921      	ldr	r1, [r4, #16]
 800467c:	464a      	mov	r2, r9
 800467e:	f000 faeb 	bl	8004c58 <memcpy>
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	81a3      	strh	r3, [r4, #12]
 800468e:	6126      	str	r6, [r4, #16]
 8004690:	6165      	str	r5, [r4, #20]
 8004692:	444e      	add	r6, r9
 8004694:	eba5 0509 	sub.w	r5, r5, r9
 8004698:	6026      	str	r6, [r4, #0]
 800469a:	60a5      	str	r5, [r4, #8]
 800469c:	463e      	mov	r6, r7
 800469e:	42be      	cmp	r6, r7
 80046a0:	d900      	bls.n	80046a4 <__ssputs_r+0x70>
 80046a2:	463e      	mov	r6, r7
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	4632      	mov	r2, r6
 80046a8:	4641      	mov	r1, r8
 80046aa:	f000 faab 	bl	8004c04 <memmove>
 80046ae:	68a3      	ldr	r3, [r4, #8]
 80046b0:	1b9b      	subs	r3, r3, r6
 80046b2:	60a3      	str	r3, [r4, #8]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	4433      	add	r3, r6
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	2000      	movs	r0, #0
 80046bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c0:	462a      	mov	r2, r5
 80046c2:	f000 fad7 	bl	8004c74 <_realloc_r>
 80046c6:	4606      	mov	r6, r0
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d1e0      	bne.n	800468e <__ssputs_r+0x5a>
 80046cc:	6921      	ldr	r1, [r4, #16]
 80046ce:	4650      	mov	r0, sl
 80046d0:	f7ff feb8 	bl	8004444 <_free_r>
 80046d4:	230c      	movs	r3, #12
 80046d6:	f8ca 3000 	str.w	r3, [sl]
 80046da:	89a3      	ldrh	r3, [r4, #12]
 80046dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	f04f 30ff 	mov.w	r0, #4294967295
 80046e6:	e7e9      	b.n	80046bc <__ssputs_r+0x88>

080046e8 <_svfiprintf_r>:
 80046e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	4698      	mov	r8, r3
 80046ee:	898b      	ldrh	r3, [r1, #12]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	b09d      	sub	sp, #116	; 0x74
 80046f4:	4607      	mov	r7, r0
 80046f6:	460d      	mov	r5, r1
 80046f8:	4614      	mov	r4, r2
 80046fa:	d50e      	bpl.n	800471a <_svfiprintf_r+0x32>
 80046fc:	690b      	ldr	r3, [r1, #16]
 80046fe:	b963      	cbnz	r3, 800471a <_svfiprintf_r+0x32>
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	f7ff ff0b 	bl	800451c <_malloc_r>
 8004706:	6028      	str	r0, [r5, #0]
 8004708:	6128      	str	r0, [r5, #16]
 800470a:	b920      	cbnz	r0, 8004716 <_svfiprintf_r+0x2e>
 800470c:	230c      	movs	r3, #12
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	e0d0      	b.n	80048b8 <_svfiprintf_r+0x1d0>
 8004716:	2340      	movs	r3, #64	; 0x40
 8004718:	616b      	str	r3, [r5, #20]
 800471a:	2300      	movs	r3, #0
 800471c:	9309      	str	r3, [sp, #36]	; 0x24
 800471e:	2320      	movs	r3, #32
 8004720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004724:	f8cd 800c 	str.w	r8, [sp, #12]
 8004728:	2330      	movs	r3, #48	; 0x30
 800472a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048d0 <_svfiprintf_r+0x1e8>
 800472e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004732:	f04f 0901 	mov.w	r9, #1
 8004736:	4623      	mov	r3, r4
 8004738:	469a      	mov	sl, r3
 800473a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800473e:	b10a      	cbz	r2, 8004744 <_svfiprintf_r+0x5c>
 8004740:	2a25      	cmp	r2, #37	; 0x25
 8004742:	d1f9      	bne.n	8004738 <_svfiprintf_r+0x50>
 8004744:	ebba 0b04 	subs.w	fp, sl, r4
 8004748:	d00b      	beq.n	8004762 <_svfiprintf_r+0x7a>
 800474a:	465b      	mov	r3, fp
 800474c:	4622      	mov	r2, r4
 800474e:	4629      	mov	r1, r5
 8004750:	4638      	mov	r0, r7
 8004752:	f7ff ff6f 	bl	8004634 <__ssputs_r>
 8004756:	3001      	adds	r0, #1
 8004758:	f000 80a9 	beq.w	80048ae <_svfiprintf_r+0x1c6>
 800475c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800475e:	445a      	add	r2, fp
 8004760:	9209      	str	r2, [sp, #36]	; 0x24
 8004762:	f89a 3000 	ldrb.w	r3, [sl]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80a1 	beq.w	80048ae <_svfiprintf_r+0x1c6>
 800476c:	2300      	movs	r3, #0
 800476e:	f04f 32ff 	mov.w	r2, #4294967295
 8004772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004776:	f10a 0a01 	add.w	sl, sl, #1
 800477a:	9304      	str	r3, [sp, #16]
 800477c:	9307      	str	r3, [sp, #28]
 800477e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004782:	931a      	str	r3, [sp, #104]	; 0x68
 8004784:	4654      	mov	r4, sl
 8004786:	2205      	movs	r2, #5
 8004788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478c:	4850      	ldr	r0, [pc, #320]	; (80048d0 <_svfiprintf_r+0x1e8>)
 800478e:	f7fb fd27 	bl	80001e0 <memchr>
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	b9d8      	cbnz	r0, 80047ce <_svfiprintf_r+0xe6>
 8004796:	06d0      	lsls	r0, r2, #27
 8004798:	bf44      	itt	mi
 800479a:	2320      	movmi	r3, #32
 800479c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a0:	0711      	lsls	r1, r2, #28
 80047a2:	bf44      	itt	mi
 80047a4:	232b      	movmi	r3, #43	; 0x2b
 80047a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047aa:	f89a 3000 	ldrb.w	r3, [sl]
 80047ae:	2b2a      	cmp	r3, #42	; 0x2a
 80047b0:	d015      	beq.n	80047de <_svfiprintf_r+0xf6>
 80047b2:	9a07      	ldr	r2, [sp, #28]
 80047b4:	4654      	mov	r4, sl
 80047b6:	2000      	movs	r0, #0
 80047b8:	f04f 0c0a 	mov.w	ip, #10
 80047bc:	4621      	mov	r1, r4
 80047be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047c2:	3b30      	subs	r3, #48	; 0x30
 80047c4:	2b09      	cmp	r3, #9
 80047c6:	d94d      	bls.n	8004864 <_svfiprintf_r+0x17c>
 80047c8:	b1b0      	cbz	r0, 80047f8 <_svfiprintf_r+0x110>
 80047ca:	9207      	str	r2, [sp, #28]
 80047cc:	e014      	b.n	80047f8 <_svfiprintf_r+0x110>
 80047ce:	eba0 0308 	sub.w	r3, r0, r8
 80047d2:	fa09 f303 	lsl.w	r3, r9, r3
 80047d6:	4313      	orrs	r3, r2
 80047d8:	9304      	str	r3, [sp, #16]
 80047da:	46a2      	mov	sl, r4
 80047dc:	e7d2      	b.n	8004784 <_svfiprintf_r+0x9c>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	1d19      	adds	r1, r3, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	9103      	str	r1, [sp, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfbb      	ittet	lt
 80047ea:	425b      	neglt	r3, r3
 80047ec:	f042 0202 	orrlt.w	r2, r2, #2
 80047f0:	9307      	strge	r3, [sp, #28]
 80047f2:	9307      	strlt	r3, [sp, #28]
 80047f4:	bfb8      	it	lt
 80047f6:	9204      	strlt	r2, [sp, #16]
 80047f8:	7823      	ldrb	r3, [r4, #0]
 80047fa:	2b2e      	cmp	r3, #46	; 0x2e
 80047fc:	d10c      	bne.n	8004818 <_svfiprintf_r+0x130>
 80047fe:	7863      	ldrb	r3, [r4, #1]
 8004800:	2b2a      	cmp	r3, #42	; 0x2a
 8004802:	d134      	bne.n	800486e <_svfiprintf_r+0x186>
 8004804:	9b03      	ldr	r3, [sp, #12]
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	9203      	str	r2, [sp, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	bfb8      	it	lt
 8004810:	f04f 33ff 	movlt.w	r3, #4294967295
 8004814:	3402      	adds	r4, #2
 8004816:	9305      	str	r3, [sp, #20]
 8004818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048e0 <_svfiprintf_r+0x1f8>
 800481c:	7821      	ldrb	r1, [r4, #0]
 800481e:	2203      	movs	r2, #3
 8004820:	4650      	mov	r0, sl
 8004822:	f7fb fcdd 	bl	80001e0 <memchr>
 8004826:	b138      	cbz	r0, 8004838 <_svfiprintf_r+0x150>
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	eba0 000a 	sub.w	r0, r0, sl
 800482e:	2240      	movs	r2, #64	; 0x40
 8004830:	4082      	lsls	r2, r0
 8004832:	4313      	orrs	r3, r2
 8004834:	3401      	adds	r4, #1
 8004836:	9304      	str	r3, [sp, #16]
 8004838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800483c:	4825      	ldr	r0, [pc, #148]	; (80048d4 <_svfiprintf_r+0x1ec>)
 800483e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004842:	2206      	movs	r2, #6
 8004844:	f7fb fccc 	bl	80001e0 <memchr>
 8004848:	2800      	cmp	r0, #0
 800484a:	d038      	beq.n	80048be <_svfiprintf_r+0x1d6>
 800484c:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <_svfiprintf_r+0x1f0>)
 800484e:	bb1b      	cbnz	r3, 8004898 <_svfiprintf_r+0x1b0>
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	3307      	adds	r3, #7
 8004854:	f023 0307 	bic.w	r3, r3, #7
 8004858:	3308      	adds	r3, #8
 800485a:	9303      	str	r3, [sp, #12]
 800485c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485e:	4433      	add	r3, r6
 8004860:	9309      	str	r3, [sp, #36]	; 0x24
 8004862:	e768      	b.n	8004736 <_svfiprintf_r+0x4e>
 8004864:	fb0c 3202 	mla	r2, ip, r2, r3
 8004868:	460c      	mov	r4, r1
 800486a:	2001      	movs	r0, #1
 800486c:	e7a6      	b.n	80047bc <_svfiprintf_r+0xd4>
 800486e:	2300      	movs	r3, #0
 8004870:	3401      	adds	r4, #1
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	4619      	mov	r1, r3
 8004876:	f04f 0c0a 	mov.w	ip, #10
 800487a:	4620      	mov	r0, r4
 800487c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004880:	3a30      	subs	r2, #48	; 0x30
 8004882:	2a09      	cmp	r2, #9
 8004884:	d903      	bls.n	800488e <_svfiprintf_r+0x1a6>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0c6      	beq.n	8004818 <_svfiprintf_r+0x130>
 800488a:	9105      	str	r1, [sp, #20]
 800488c:	e7c4      	b.n	8004818 <_svfiprintf_r+0x130>
 800488e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004892:	4604      	mov	r4, r0
 8004894:	2301      	movs	r3, #1
 8004896:	e7f0      	b.n	800487a <_svfiprintf_r+0x192>
 8004898:	ab03      	add	r3, sp, #12
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	462a      	mov	r2, r5
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <_svfiprintf_r+0x1f4>)
 80048a0:	a904      	add	r1, sp, #16
 80048a2:	4638      	mov	r0, r7
 80048a4:	f3af 8000 	nop.w
 80048a8:	1c42      	adds	r2, r0, #1
 80048aa:	4606      	mov	r6, r0
 80048ac:	d1d6      	bne.n	800485c <_svfiprintf_r+0x174>
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	065b      	lsls	r3, r3, #25
 80048b2:	f53f af2d 	bmi.w	8004710 <_svfiprintf_r+0x28>
 80048b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b8:	b01d      	add	sp, #116	; 0x74
 80048ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048be:	ab03      	add	r3, sp, #12
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <_svfiprintf_r+0x1f4>)
 80048c6:	a904      	add	r1, sp, #16
 80048c8:	4638      	mov	r0, r7
 80048ca:	f000 f879 	bl	80049c0 <_printf_i>
 80048ce:	e7eb      	b.n	80048a8 <_svfiprintf_r+0x1c0>
 80048d0:	08005200 	.word	0x08005200
 80048d4:	0800520a 	.word	0x0800520a
 80048d8:	00000000 	.word	0x00000000
 80048dc:	08004635 	.word	0x08004635
 80048e0:	08005206 	.word	0x08005206

080048e4 <_printf_common>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4616      	mov	r6, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048f4:	4293      	cmp	r3, r2
 80048f6:	bfb8      	it	lt
 80048f8:	4613      	movlt	r3, r2
 80048fa:	6033      	str	r3, [r6, #0]
 80048fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004900:	4607      	mov	r7, r0
 8004902:	460c      	mov	r4, r1
 8004904:	b10a      	cbz	r2, 800490a <_printf_common+0x26>
 8004906:	3301      	adds	r3, #1
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	0699      	lsls	r1, r3, #26
 800490e:	bf42      	ittt	mi
 8004910:	6833      	ldrmi	r3, [r6, #0]
 8004912:	3302      	addmi	r3, #2
 8004914:	6033      	strmi	r3, [r6, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d106      	bne.n	800492c <_printf_common+0x48>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	42ab      	cmp	r3, r5
 800492a:	dc26      	bgt.n	800497a <_printf_common+0x96>
 800492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	2301      	movne	r3, #1
 8004938:	0692      	lsls	r2, r2, #26
 800493a:	d42b      	bmi.n	8004994 <_printf_common+0xb0>
 800493c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004940:	4649      	mov	r1, r9
 8004942:	4638      	mov	r0, r7
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d01e      	beq.n	8004988 <_printf_common+0xa4>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf02      	ittt	eq
 8004956:	68e5      	ldreq	r5, [r4, #12]
 8004958:	6833      	ldreq	r3, [r6, #0]
 800495a:	1aed      	subeq	r5, r5, r3
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	bf0c      	ite	eq
 8004960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004964:	2500      	movne	r5, #0
 8004966:	4293      	cmp	r3, r2
 8004968:	bfc4      	itt	gt
 800496a:	1a9b      	subgt	r3, r3, r2
 800496c:	18ed      	addgt	r5, r5, r3
 800496e:	2600      	movs	r6, #0
 8004970:	341a      	adds	r4, #26
 8004972:	42b5      	cmp	r5, r6
 8004974:	d11a      	bne.n	80049ac <_printf_common+0xc8>
 8004976:	2000      	movs	r0, #0
 8004978:	e008      	b.n	800498c <_printf_common+0xa8>
 800497a:	2301      	movs	r3, #1
 800497c:	4652      	mov	r2, sl
 800497e:	4649      	mov	r1, r9
 8004980:	4638      	mov	r0, r7
 8004982:	47c0      	blx	r8
 8004984:	3001      	adds	r0, #1
 8004986:	d103      	bne.n	8004990 <_printf_common+0xac>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004990:	3501      	adds	r5, #1
 8004992:	e7c6      	b.n	8004922 <_printf_common+0x3e>
 8004994:	18e1      	adds	r1, r4, r3
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	2030      	movs	r0, #48	; 0x30
 800499a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800499e:	4422      	add	r2, r4
 80049a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049a8:	3302      	adds	r3, #2
 80049aa:	e7c7      	b.n	800493c <_printf_common+0x58>
 80049ac:	2301      	movs	r3, #1
 80049ae:	4622      	mov	r2, r4
 80049b0:	4649      	mov	r1, r9
 80049b2:	4638      	mov	r0, r7
 80049b4:	47c0      	blx	r8
 80049b6:	3001      	adds	r0, #1
 80049b8:	d0e6      	beq.n	8004988 <_printf_common+0xa4>
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7d9      	b.n	8004972 <_printf_common+0x8e>
	...

080049c0 <_printf_i>:
 80049c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	7e0f      	ldrb	r7, [r1, #24]
 80049c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049c8:	2f78      	cmp	r7, #120	; 0x78
 80049ca:	4691      	mov	r9, r2
 80049cc:	4680      	mov	r8, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	469a      	mov	sl, r3
 80049d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049d6:	d807      	bhi.n	80049e8 <_printf_i+0x28>
 80049d8:	2f62      	cmp	r7, #98	; 0x62
 80049da:	d80a      	bhi.n	80049f2 <_printf_i+0x32>
 80049dc:	2f00      	cmp	r7, #0
 80049de:	f000 80d4 	beq.w	8004b8a <_printf_i+0x1ca>
 80049e2:	2f58      	cmp	r7, #88	; 0x58
 80049e4:	f000 80c0 	beq.w	8004b68 <_printf_i+0x1a8>
 80049e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f0:	e03a      	b.n	8004a68 <_printf_i+0xa8>
 80049f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049f6:	2b15      	cmp	r3, #21
 80049f8:	d8f6      	bhi.n	80049e8 <_printf_i+0x28>
 80049fa:	a101      	add	r1, pc, #4	; (adr r1, 8004a00 <_printf_i+0x40>)
 80049fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a6d 	.word	0x08004a6d
 8004a08:	080049e9 	.word	0x080049e9
 8004a0c:	080049e9 	.word	0x080049e9
 8004a10:	080049e9 	.word	0x080049e9
 8004a14:	080049e9 	.word	0x080049e9
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	080049e9 	.word	0x080049e9
 8004a20:	080049e9 	.word	0x080049e9
 8004a24:	080049e9 	.word	0x080049e9
 8004a28:	080049e9 	.word	0x080049e9
 8004a2c:	08004b71 	.word	0x08004b71
 8004a30:	08004a99 	.word	0x08004a99
 8004a34:	08004b2b 	.word	0x08004b2b
 8004a38:	080049e9 	.word	0x080049e9
 8004a3c:	080049e9 	.word	0x080049e9
 8004a40:	08004b93 	.word	0x08004b93
 8004a44:	080049e9 	.word	0x080049e9
 8004a48:	08004a99 	.word	0x08004a99
 8004a4c:	080049e9 	.word	0x080049e9
 8004a50:	080049e9 	.word	0x080049e9
 8004a54:	08004b33 	.word	0x08004b33
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	602a      	str	r2, [r5, #0]
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e09f      	b.n	8004bac <_printf_i+0x1ec>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	682b      	ldr	r3, [r5, #0]
 8004a70:	0607      	lsls	r7, r0, #24
 8004a72:	f103 0104 	add.w	r1, r3, #4
 8004a76:	6029      	str	r1, [r5, #0]
 8004a78:	d501      	bpl.n	8004a7e <_printf_i+0xbe>
 8004a7a:	681e      	ldr	r6, [r3, #0]
 8004a7c:	e003      	b.n	8004a86 <_printf_i+0xc6>
 8004a7e:	0646      	lsls	r6, r0, #25
 8004a80:	d5fb      	bpl.n	8004a7a <_printf_i+0xba>
 8004a82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	da03      	bge.n	8004a92 <_printf_i+0xd2>
 8004a8a:	232d      	movs	r3, #45	; 0x2d
 8004a8c:	4276      	negs	r6, r6
 8004a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a92:	485a      	ldr	r0, [pc, #360]	; (8004bfc <_printf_i+0x23c>)
 8004a94:	230a      	movs	r3, #10
 8004a96:	e012      	b.n	8004abe <_printf_i+0xfe>
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	6820      	ldr	r0, [r4, #0]
 8004a9c:	1d19      	adds	r1, r3, #4
 8004a9e:	6029      	str	r1, [r5, #0]
 8004aa0:	0605      	lsls	r5, r0, #24
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0xe8>
 8004aa4:	681e      	ldr	r6, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0xee>
 8004aa8:	0641      	lsls	r1, r0, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0xe4>
 8004aac:	881e      	ldrh	r6, [r3, #0]
 8004aae:	4853      	ldr	r0, [pc, #332]	; (8004bfc <_printf_i+0x23c>)
 8004ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2308      	moveq	r3, #8
 8004ab6:	230a      	movne	r3, #10
 8004ab8:	2100      	movs	r1, #0
 8004aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004abe:	6865      	ldr	r5, [r4, #4]
 8004ac0:	60a5      	str	r5, [r4, #8]
 8004ac2:	2d00      	cmp	r5, #0
 8004ac4:	bfa2      	ittt	ge
 8004ac6:	6821      	ldrge	r1, [r4, #0]
 8004ac8:	f021 0104 	bicge.w	r1, r1, #4
 8004acc:	6021      	strge	r1, [r4, #0]
 8004ace:	b90e      	cbnz	r6, 8004ad4 <_printf_i+0x114>
 8004ad0:	2d00      	cmp	r5, #0
 8004ad2:	d04b      	beq.n	8004b6c <_printf_i+0x1ac>
 8004ad4:	4615      	mov	r5, r2
 8004ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ada:	fb03 6711 	mls	r7, r3, r1, r6
 8004ade:	5dc7      	ldrb	r7, [r0, r7]
 8004ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ae4:	4637      	mov	r7, r6
 8004ae6:	42bb      	cmp	r3, r7
 8004ae8:	460e      	mov	r6, r1
 8004aea:	d9f4      	bls.n	8004ad6 <_printf_i+0x116>
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d10b      	bne.n	8004b08 <_printf_i+0x148>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07de      	lsls	r6, r3, #31
 8004af4:	d508      	bpl.n	8004b08 <_printf_i+0x148>
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	6861      	ldr	r1, [r4, #4]
 8004afa:	4299      	cmp	r1, r3
 8004afc:	bfde      	ittt	le
 8004afe:	2330      	movle	r3, #48	; 0x30
 8004b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b08:	1b52      	subs	r2, r2, r5
 8004b0a:	6122      	str	r2, [r4, #16]
 8004b0c:	f8cd a000 	str.w	sl, [sp]
 8004b10:	464b      	mov	r3, r9
 8004b12:	aa03      	add	r2, sp, #12
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff fee4 	bl	80048e4 <_printf_common>
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d14a      	bne.n	8004bb6 <_printf_i+0x1f6>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	b004      	add	sp, #16
 8004b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	f043 0320 	orr.w	r3, r3, #32
 8004b30:	6023      	str	r3, [r4, #0]
 8004b32:	4833      	ldr	r0, [pc, #204]	; (8004c00 <_printf_i+0x240>)
 8004b34:	2778      	movs	r7, #120	; 0x78
 8004b36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	6829      	ldr	r1, [r5, #0]
 8004b3e:	061f      	lsls	r7, r3, #24
 8004b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b44:	d402      	bmi.n	8004b4c <_printf_i+0x18c>
 8004b46:	065f      	lsls	r7, r3, #25
 8004b48:	bf48      	it	mi
 8004b4a:	b2b6      	uxthmi	r6, r6
 8004b4c:	07df      	lsls	r7, r3, #31
 8004b4e:	bf48      	it	mi
 8004b50:	f043 0320 	orrmi.w	r3, r3, #32
 8004b54:	6029      	str	r1, [r5, #0]
 8004b56:	bf48      	it	mi
 8004b58:	6023      	strmi	r3, [r4, #0]
 8004b5a:	b91e      	cbnz	r6, 8004b64 <_printf_i+0x1a4>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f023 0320 	bic.w	r3, r3, #32
 8004b62:	6023      	str	r3, [r4, #0]
 8004b64:	2310      	movs	r3, #16
 8004b66:	e7a7      	b.n	8004ab8 <_printf_i+0xf8>
 8004b68:	4824      	ldr	r0, [pc, #144]	; (8004bfc <_printf_i+0x23c>)
 8004b6a:	e7e4      	b.n	8004b36 <_printf_i+0x176>
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	e7bd      	b.n	8004aec <_printf_i+0x12c>
 8004b70:	682b      	ldr	r3, [r5, #0]
 8004b72:	6826      	ldr	r6, [r4, #0]
 8004b74:	6961      	ldr	r1, [r4, #20]
 8004b76:	1d18      	adds	r0, r3, #4
 8004b78:	6028      	str	r0, [r5, #0]
 8004b7a:	0635      	lsls	r5, r6, #24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	d501      	bpl.n	8004b84 <_printf_i+0x1c4>
 8004b80:	6019      	str	r1, [r3, #0]
 8004b82:	e002      	b.n	8004b8a <_printf_i+0x1ca>
 8004b84:	0670      	lsls	r0, r6, #25
 8004b86:	d5fb      	bpl.n	8004b80 <_printf_i+0x1c0>
 8004b88:	8019      	strh	r1, [r3, #0]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6123      	str	r3, [r4, #16]
 8004b8e:	4615      	mov	r5, r2
 8004b90:	e7bc      	b.n	8004b0c <_printf_i+0x14c>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	1d1a      	adds	r2, r3, #4
 8004b96:	602a      	str	r2, [r5, #0]
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	6862      	ldr	r2, [r4, #4]
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f7fb fb1e 	bl	80001e0 <memchr>
 8004ba4:	b108      	cbz	r0, 8004baa <_printf_i+0x1ea>
 8004ba6:	1b40      	subs	r0, r0, r5
 8004ba8:	6060      	str	r0, [r4, #4]
 8004baa:	6863      	ldr	r3, [r4, #4]
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bb4:	e7aa      	b.n	8004b0c <_printf_i+0x14c>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	462a      	mov	r2, r5
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4640      	mov	r0, r8
 8004bbe:	47d0      	blx	sl
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d0ad      	beq.n	8004b20 <_printf_i+0x160>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	079b      	lsls	r3, r3, #30
 8004bc8:	d413      	bmi.n	8004bf2 <_printf_i+0x232>
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	4298      	cmp	r0, r3
 8004bd0:	bfb8      	it	lt
 8004bd2:	4618      	movlt	r0, r3
 8004bd4:	e7a6      	b.n	8004b24 <_printf_i+0x164>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4632      	mov	r2, r6
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d09d      	beq.n	8004b20 <_printf_i+0x160>
 8004be4:	3501      	adds	r5, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	9903      	ldr	r1, [sp, #12]
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	42ab      	cmp	r3, r5
 8004bee:	dcf2      	bgt.n	8004bd6 <_printf_i+0x216>
 8004bf0:	e7eb      	b.n	8004bca <_printf_i+0x20a>
 8004bf2:	2500      	movs	r5, #0
 8004bf4:	f104 0619 	add.w	r6, r4, #25
 8004bf8:	e7f5      	b.n	8004be6 <_printf_i+0x226>
 8004bfa:	bf00      	nop
 8004bfc:	08005211 	.word	0x08005211
 8004c00:	08005222 	.word	0x08005222

08004c04 <memmove>:
 8004c04:	4288      	cmp	r0, r1
 8004c06:	b510      	push	{r4, lr}
 8004c08:	eb01 0402 	add.w	r4, r1, r2
 8004c0c:	d902      	bls.n	8004c14 <memmove+0x10>
 8004c0e:	4284      	cmp	r4, r0
 8004c10:	4623      	mov	r3, r4
 8004c12:	d807      	bhi.n	8004c24 <memmove+0x20>
 8004c14:	1e43      	subs	r3, r0, #1
 8004c16:	42a1      	cmp	r1, r4
 8004c18:	d008      	beq.n	8004c2c <memmove+0x28>
 8004c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c22:	e7f8      	b.n	8004c16 <memmove+0x12>
 8004c24:	4402      	add	r2, r0
 8004c26:	4601      	mov	r1, r0
 8004c28:	428a      	cmp	r2, r1
 8004c2a:	d100      	bne.n	8004c2e <memmove+0x2a>
 8004c2c:	bd10      	pop	{r4, pc}
 8004c2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c36:	e7f7      	b.n	8004c28 <memmove+0x24>

08004c38 <_sbrk_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d06      	ldr	r5, [pc, #24]	; (8004c54 <_sbrk_r+0x1c>)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fc fbdc 	bl	8001400 <_sbrk>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_sbrk_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_sbrk_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	20000388 	.word	0x20000388

08004c58 <memcpy>:
 8004c58:	440a      	add	r2, r1
 8004c5a:	4291      	cmp	r1, r2
 8004c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c60:	d100      	bne.n	8004c64 <memcpy+0xc>
 8004c62:	4770      	bx	lr
 8004c64:	b510      	push	{r4, lr}
 8004c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6e:	4291      	cmp	r1, r2
 8004c70:	d1f9      	bne.n	8004c66 <memcpy+0xe>
 8004c72:	bd10      	pop	{r4, pc}

08004c74 <_realloc_r>:
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	4680      	mov	r8, r0
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	460e      	mov	r6, r1
 8004c7e:	b921      	cbnz	r1, 8004c8a <_realloc_r+0x16>
 8004c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	4611      	mov	r1, r2
 8004c86:	f7ff bc49 	b.w	800451c <_malloc_r>
 8004c8a:	b92a      	cbnz	r2, 8004c98 <_realloc_r+0x24>
 8004c8c:	f7ff fbda 	bl	8004444 <_free_r>
 8004c90:	4625      	mov	r5, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	f000 f81b 	bl	8004cd2 <_malloc_usable_size_r>
 8004c9c:	4284      	cmp	r4, r0
 8004c9e:	4607      	mov	r7, r0
 8004ca0:	d802      	bhi.n	8004ca8 <_realloc_r+0x34>
 8004ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ca6:	d812      	bhi.n	8004cce <_realloc_r+0x5a>
 8004ca8:	4621      	mov	r1, r4
 8004caa:	4640      	mov	r0, r8
 8004cac:	f7ff fc36 	bl	800451c <_malloc_r>
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d0ed      	beq.n	8004c92 <_realloc_r+0x1e>
 8004cb6:	42bc      	cmp	r4, r7
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4631      	mov	r1, r6
 8004cbc:	bf28      	it	cs
 8004cbe:	463a      	movcs	r2, r7
 8004cc0:	f7ff ffca 	bl	8004c58 <memcpy>
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4640      	mov	r0, r8
 8004cc8:	f7ff fbbc 	bl	8004444 <_free_r>
 8004ccc:	e7e1      	b.n	8004c92 <_realloc_r+0x1e>
 8004cce:	4635      	mov	r5, r6
 8004cd0:	e7df      	b.n	8004c92 <_realloc_r+0x1e>

08004cd2 <_malloc_usable_size_r>:
 8004cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd6:	1f18      	subs	r0, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bfbc      	itt	lt
 8004cdc:	580b      	ldrlt	r3, [r1, r0]
 8004cde:	18c0      	addlt	r0, r0, r3
 8004ce0:	4770      	bx	lr
	...

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
